
ADC_INT_DEIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003646  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  00800060  00003646  000036da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800194  00800194  0000380e  2**0
                  ALLOC
  3 .stab         00002490  00000000  00000000  00003810  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001093  00000000  00000000  00005ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00006d33  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00006ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00007107  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00009719  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000abe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000bef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000c0d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000c3db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cdf5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 b3 08 	jmp	0x1166	; 0x1166 <__vector_16>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__floatsisf+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e6 e4       	ldi	r30, 0x46	; 70
     162:	f6 e3       	ldi	r31, 0x36	; 54
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a4 39       	cpi	r26, 0x94	; 148
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a4 e9       	ldi	r26, 0x94	; 148
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a8 39       	cpi	r26, 0x98	; 152
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 9c 11 	call	0x2338	; 0x2338 <main>
     184:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	ab e8       	ldi	r26, 0x8B	; 139
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8b e8       	ldi	r24, 0x8B	; 139
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	6b e8       	ldi	r22, 0x8B	; 139
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 99 07 	call	0xf32	; 0xf32 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 99 07 	call	0xf32	; 0xf32 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 99 07 	call	0xf32	; 0xf32 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__epilogue_restores__+0x18>

000009a4 <__floatsisf>:
     9a4:	a8 e0       	ldi	r26, 0x08	; 8
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 f7 15 	jmp	0x2bee	; 0x2bee <__prologue_saves__+0x12>
     9b0:	9b 01       	movw	r18, r22
     9b2:	ac 01       	movw	r20, r24
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	89 83       	std	Y+1, r24	; 0x01
     9b8:	da 01       	movw	r26, r20
     9ba:	c9 01       	movw	r24, r18
     9bc:	88 27       	eor	r24, r24
     9be:	b7 fd       	sbrc	r27, 7
     9c0:	83 95       	inc	r24
     9c2:	99 27       	eor	r25, r25
     9c4:	aa 27       	eor	r26, r26
     9c6:	bb 27       	eor	r27, r27
     9c8:	b8 2e       	mov	r11, r24
     9ca:	21 15       	cp	r18, r1
     9cc:	31 05       	cpc	r19, r1
     9ce:	41 05       	cpc	r20, r1
     9d0:	51 05       	cpc	r21, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__floatsisf+0x36>
     9d4:	82 e0       	ldi	r24, 0x02	; 2
     9d6:	89 83       	std	Y+1, r24	; 0x01
     9d8:	3a c0       	rjmp	.+116    	; 0xa4e <__floatsisf+0xaa>
     9da:	88 23       	and	r24, r24
     9dc:	a9 f0       	breq	.+42     	; 0xa08 <__floatsisf+0x64>
     9de:	20 30       	cpi	r18, 0x00	; 0
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	38 07       	cpc	r19, r24
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	48 07       	cpc	r20, r24
     9e8:	80 e8       	ldi	r24, 0x80	; 128
     9ea:	58 07       	cpc	r21, r24
     9ec:	29 f4       	brne	.+10     	; 0x9f8 <__floatsisf+0x54>
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	9f ec       	ldi	r25, 0xCF	; 207
     9f6:	30 c0       	rjmp	.+96     	; 0xa58 <__floatsisf+0xb4>
     9f8:	ee 24       	eor	r14, r14
     9fa:	ff 24       	eor	r15, r15
     9fc:	87 01       	movw	r16, r14
     9fe:	e2 1a       	sub	r14, r18
     a00:	f3 0a       	sbc	r15, r19
     a02:	04 0b       	sbc	r16, r20
     a04:	15 0b       	sbc	r17, r21
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <__floatsisf+0x68>
     a08:	79 01       	movw	r14, r18
     a0a:	8a 01       	movw	r16, r20
     a0c:	8e e1       	ldi	r24, 0x1E	; 30
     a0e:	c8 2e       	mov	r12, r24
     a10:	d1 2c       	mov	r13, r1
     a12:	dc 82       	std	Y+4, r13	; 0x04
     a14:	cb 82       	std	Y+3, r12	; 0x03
     a16:	ed 82       	std	Y+5, r14	; 0x05
     a18:	fe 82       	std	Y+6, r15	; 0x06
     a1a:	0f 83       	std	Y+7, r16	; 0x07
     a1c:	18 87       	std	Y+8, r17	; 0x08
     a1e:	c8 01       	movw	r24, r16
     a20:	b7 01       	movw	r22, r14
     a22:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__clzsi2>
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	18 16       	cp	r1, r24
     a2a:	19 06       	cpc	r1, r25
     a2c:	84 f4       	brge	.+32     	; 0xa4e <__floatsisf+0xaa>
     a2e:	08 2e       	mov	r0, r24
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__floatsisf+0x96>
     a32:	ee 0c       	add	r14, r14
     a34:	ff 1c       	adc	r15, r15
     a36:	00 1f       	adc	r16, r16
     a38:	11 1f       	adc	r17, r17
     a3a:	0a 94       	dec	r0
     a3c:	d2 f7       	brpl	.-12     	; 0xa32 <__floatsisf+0x8e>
     a3e:	ed 82       	std	Y+5, r14	; 0x05
     a40:	fe 82       	std	Y+6, r15	; 0x06
     a42:	0f 83       	std	Y+7, r16	; 0x07
     a44:	18 87       	std	Y+8, r17	; 0x08
     a46:	c8 1a       	sub	r12, r24
     a48:	d9 0a       	sbc	r13, r25
     a4a:	dc 82       	std	Y+4, r13	; 0x04
     a4c:	cb 82       	std	Y+3, r12	; 0x03
     a4e:	ba 82       	std	Y+2, r11	; 0x02
     a50:	ce 01       	movw	r24, r28
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     a58:	28 96       	adiw	r28, 0x08	; 8
     a5a:	e9 e0       	ldi	r30, 0x09	; 9
     a5c:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <__epilogue_restores__+0x12>

00000a60 <__fixsfsi>:
     a60:	ac e0       	ldi	r26, 0x0C	; 12
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	e6 e3       	ldi	r30, 0x36	; 54
     a66:	f5 e0       	ldi	r31, 0x05	; 5
     a68:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <__prologue_saves__+0x20>
     a6c:	69 83       	std	Y+1, r22	; 0x01
     a6e:	7a 83       	std	Y+2, r23	; 0x02
     a70:	8b 83       	std	Y+3, r24	; 0x03
     a72:	9c 83       	std	Y+4, r25	; 0x04
     a74:	ce 01       	movw	r24, r28
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	be 01       	movw	r22, r28
     a7a:	6b 5f       	subi	r22, 0xFB	; 251
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     a82:	8d 81       	ldd	r24, Y+5	; 0x05
     a84:	82 30       	cpi	r24, 0x02	; 2
     a86:	61 f1       	breq	.+88     	; 0xae0 <__fixsfsi+0x80>
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	50 f1       	brcs	.+84     	; 0xae0 <__fixsfsi+0x80>
     a8c:	84 30       	cpi	r24, 0x04	; 4
     a8e:	21 f4       	brne	.+8      	; 0xa98 <__fixsfsi+0x38>
     a90:	8e 81       	ldd	r24, Y+6	; 0x06
     a92:	88 23       	and	r24, r24
     a94:	51 f1       	breq	.+84     	; 0xaea <__fixsfsi+0x8a>
     a96:	2e c0       	rjmp	.+92     	; 0xaf4 <__fixsfsi+0x94>
     a98:	2f 81       	ldd	r18, Y+7	; 0x07
     a9a:	38 85       	ldd	r19, Y+8	; 0x08
     a9c:	37 fd       	sbrc	r19, 7
     a9e:	20 c0       	rjmp	.+64     	; 0xae0 <__fixsfsi+0x80>
     aa0:	6e 81       	ldd	r22, Y+6	; 0x06
     aa2:	2f 31       	cpi	r18, 0x1F	; 31
     aa4:	31 05       	cpc	r19, r1
     aa6:	1c f0       	brlt	.+6      	; 0xaae <__fixsfsi+0x4e>
     aa8:	66 23       	and	r22, r22
     aaa:	f9 f0       	breq	.+62     	; 0xaea <__fixsfsi+0x8a>
     aac:	23 c0       	rjmp	.+70     	; 0xaf4 <__fixsfsi+0x94>
     aae:	8e e1       	ldi	r24, 0x1E	; 30
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	82 1b       	sub	r24, r18
     ab4:	93 0b       	sbc	r25, r19
     ab6:	29 85       	ldd	r18, Y+9	; 0x09
     ab8:	3a 85       	ldd	r19, Y+10	; 0x0a
     aba:	4b 85       	ldd	r20, Y+11	; 0x0b
     abc:	5c 85       	ldd	r21, Y+12	; 0x0c
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__fixsfsi+0x68>
     ac0:	56 95       	lsr	r21
     ac2:	47 95       	ror	r20
     ac4:	37 95       	ror	r19
     ac6:	27 95       	ror	r18
     ac8:	8a 95       	dec	r24
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__fixsfsi+0x60>
     acc:	66 23       	and	r22, r22
     ace:	b1 f0       	breq	.+44     	; 0xafc <__fixsfsi+0x9c>
     ad0:	50 95       	com	r21
     ad2:	40 95       	com	r20
     ad4:	30 95       	com	r19
     ad6:	21 95       	neg	r18
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
     ada:	4f 4f       	sbci	r20, 0xFF	; 255
     adc:	5f 4f       	sbci	r21, 0xFF	; 255
     ade:	0e c0       	rjmp	.+28     	; 0xafc <__fixsfsi+0x9c>
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	09 c0       	rjmp	.+18     	; 0xafc <__fixsfsi+0x9c>
     aea:	2f ef       	ldi	r18, 0xFF	; 255
     aec:	3f ef       	ldi	r19, 0xFF	; 255
     aee:	4f ef       	ldi	r20, 0xFF	; 255
     af0:	5f e7       	ldi	r21, 0x7F	; 127
     af2:	04 c0       	rjmp	.+8      	; 0xafc <__fixsfsi+0x9c>
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	50 e8       	ldi	r21, 0x80	; 128
     afc:	b9 01       	movw	r22, r18
     afe:	ca 01       	movw	r24, r20
     b00:	2c 96       	adiw	r28, 0x0c	; 12
     b02:	e2 e0       	ldi	r30, 0x02	; 2
     b04:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__epilogue_restores__+0x20>

00000b08 <__floatunsisf>:
     b08:	a8 e0       	ldi	r26, 0x08	; 8
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	ea e8       	ldi	r30, 0x8A	; 138
     b0e:	f5 e0       	ldi	r31, 0x05	; 5
     b10:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__prologue_saves__+0x10>
     b14:	7b 01       	movw	r14, r22
     b16:	8c 01       	movw	r16, r24
     b18:	61 15       	cp	r22, r1
     b1a:	71 05       	cpc	r23, r1
     b1c:	81 05       	cpc	r24, r1
     b1e:	91 05       	cpc	r25, r1
     b20:	19 f4       	brne	.+6      	; 0xb28 <__floatunsisf+0x20>
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	89 83       	std	Y+1, r24	; 0x01
     b26:	60 c0       	rjmp	.+192    	; 0xbe8 <__floatunsisf+0xe0>
     b28:	83 e0       	ldi	r24, 0x03	; 3
     b2a:	89 83       	std	Y+1, r24	; 0x01
     b2c:	8e e1       	ldi	r24, 0x1E	; 30
     b2e:	c8 2e       	mov	r12, r24
     b30:	d1 2c       	mov	r13, r1
     b32:	dc 82       	std	Y+4, r13	; 0x04
     b34:	cb 82       	std	Y+3, r12	; 0x03
     b36:	ed 82       	std	Y+5, r14	; 0x05
     b38:	fe 82       	std	Y+6, r15	; 0x06
     b3a:	0f 83       	std	Y+7, r16	; 0x07
     b3c:	18 87       	std	Y+8, r17	; 0x08
     b3e:	c8 01       	movw	r24, r16
     b40:	b7 01       	movw	r22, r14
     b42:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__clzsi2>
     b46:	fc 01       	movw	r30, r24
     b48:	31 97       	sbiw	r30, 0x01	; 1
     b4a:	f7 ff       	sbrs	r31, 7
     b4c:	3b c0       	rjmp	.+118    	; 0xbc4 <__floatunsisf+0xbc>
     b4e:	22 27       	eor	r18, r18
     b50:	33 27       	eor	r19, r19
     b52:	2e 1b       	sub	r18, r30
     b54:	3f 0b       	sbc	r19, r31
     b56:	57 01       	movw	r10, r14
     b58:	68 01       	movw	r12, r16
     b5a:	02 2e       	mov	r0, r18
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <__floatunsisf+0x5e>
     b5e:	d6 94       	lsr	r13
     b60:	c7 94       	ror	r12
     b62:	b7 94       	ror	r11
     b64:	a7 94       	ror	r10
     b66:	0a 94       	dec	r0
     b68:	d2 f7       	brpl	.-12     	; 0xb5e <__floatunsisf+0x56>
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	50 e0       	ldi	r21, 0x00	; 0
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	04 c0       	rjmp	.+8      	; 0xb84 <__floatunsisf+0x7c>
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	aa 1f       	adc	r26, r26
     b82:	bb 1f       	adc	r27, r27
     b84:	2a 95       	dec	r18
     b86:	d2 f7       	brpl	.-12     	; 0xb7c <__floatunsisf+0x74>
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	a1 09       	sbc	r26, r1
     b8c:	b1 09       	sbc	r27, r1
     b8e:	8e 21       	and	r24, r14
     b90:	9f 21       	and	r25, r15
     b92:	a0 23       	and	r26, r16
     b94:	b1 23       	and	r27, r17
     b96:	00 97       	sbiw	r24, 0x00	; 0
     b98:	a1 05       	cpc	r26, r1
     b9a:	b1 05       	cpc	r27, r1
     b9c:	21 f0       	breq	.+8      	; 0xba6 <__floatunsisf+0x9e>
     b9e:	41 e0       	ldi	r20, 0x01	; 1
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	4a 29       	or	r20, r10
     ba8:	5b 29       	or	r21, r11
     baa:	6c 29       	or	r22, r12
     bac:	7d 29       	or	r23, r13
     bae:	4d 83       	std	Y+5, r20	; 0x05
     bb0:	5e 83       	std	Y+6, r21	; 0x06
     bb2:	6f 83       	std	Y+7, r22	; 0x07
     bb4:	78 87       	std	Y+8, r23	; 0x08
     bb6:	8e e1       	ldi	r24, 0x1E	; 30
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	8e 1b       	sub	r24, r30
     bbc:	9f 0b       	sbc	r25, r31
     bbe:	9c 83       	std	Y+4, r25	; 0x04
     bc0:	8b 83       	std	Y+3, r24	; 0x03
     bc2:	12 c0       	rjmp	.+36     	; 0xbe8 <__floatunsisf+0xe0>
     bc4:	30 97       	sbiw	r30, 0x00	; 0
     bc6:	81 f0       	breq	.+32     	; 0xbe8 <__floatunsisf+0xe0>
     bc8:	0e 2e       	mov	r0, r30
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <__floatunsisf+0xcc>
     bcc:	ee 0c       	add	r14, r14
     bce:	ff 1c       	adc	r15, r15
     bd0:	00 1f       	adc	r16, r16
     bd2:	11 1f       	adc	r17, r17
     bd4:	0a 94       	dec	r0
     bd6:	d2 f7       	brpl	.-12     	; 0xbcc <__floatunsisf+0xc4>
     bd8:	ed 82       	std	Y+5, r14	; 0x05
     bda:	fe 82       	std	Y+6, r15	; 0x06
     bdc:	0f 83       	std	Y+7, r16	; 0x07
     bde:	18 87       	std	Y+8, r17	; 0x08
     be0:	ce 1a       	sub	r12, r30
     be2:	df 0a       	sbc	r13, r31
     be4:	dc 82       	std	Y+4, r13	; 0x04
     be6:	cb 82       	std	Y+3, r12	; 0x03
     be8:	1a 82       	std	Y+2, r1	; 0x02
     bea:	ce 01       	movw	r24, r28
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     bf2:	28 96       	adiw	r28, 0x08	; 8
     bf4:	ea e0       	ldi	r30, 0x0A	; 10
     bf6:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__epilogue_restores__+0x10>

00000bfa <__clzsi2>:
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	7b 01       	movw	r14, r22
     c04:	8c 01       	movw	r16, r24
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	e8 16       	cp	r14, r24
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	f8 06       	cpc	r15, r24
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	08 07       	cpc	r16, r24
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	18 07       	cpc	r17, r24
     c16:	88 f4       	brcc	.+34     	; 0xc3a <__clzsi2+0x40>
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	e8 16       	cp	r14, r24
     c1c:	f1 04       	cpc	r15, r1
     c1e:	01 05       	cpc	r16, r1
     c20:	11 05       	cpc	r17, r1
     c22:	31 f0       	breq	.+12     	; 0xc30 <__clzsi2+0x36>
     c24:	28 f0       	brcs	.+10     	; 0xc30 <__clzsi2+0x36>
     c26:	88 e0       	ldi	r24, 0x08	; 8
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	17 c0       	rjmp	.+46     	; 0xc5e <__clzsi2+0x64>
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	a0 e0       	ldi	r26, 0x00	; 0
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	12 c0       	rjmp	.+36     	; 0xc5e <__clzsi2+0x64>
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	e8 16       	cp	r14, r24
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	f8 06       	cpc	r15, r24
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	08 07       	cpc	r16, r24
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	18 07       	cpc	r17, r24
     c4a:	28 f0       	brcs	.+10     	; 0xc56 <__clzsi2+0x5c>
     c4c:	88 e1       	ldi	r24, 0x18	; 24
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	a0 e0       	ldi	r26, 0x00	; 0
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	04 c0       	rjmp	.+8      	; 0xc5e <__clzsi2+0x64>
     c56:	80 e1       	ldi	r24, 0x10	; 16
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	a0 e0       	ldi	r26, 0x00	; 0
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	20 e2       	ldi	r18, 0x20	; 32
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	28 1b       	sub	r18, r24
     c68:	39 0b       	sbc	r19, r25
     c6a:	4a 0b       	sbc	r20, r26
     c6c:	5b 0b       	sbc	r21, r27
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <__clzsi2+0x7e>
     c70:	16 95       	lsr	r17
     c72:	07 95       	ror	r16
     c74:	f7 94       	ror	r15
     c76:	e7 94       	ror	r14
     c78:	8a 95       	dec	r24
     c7a:	d2 f7       	brpl	.-12     	; 0xc70 <__clzsi2+0x76>
     c7c:	f7 01       	movw	r30, r14
     c7e:	ed 56       	subi	r30, 0x6D	; 109
     c80:	ff 4f       	sbci	r31, 0xFF	; 255
     c82:	80 81       	ld	r24, Z
     c84:	28 1b       	sub	r18, r24
     c86:	31 09       	sbc	r19, r1
     c88:	41 09       	sbc	r20, r1
     c8a:	51 09       	sbc	r21, r1
     c8c:	c9 01       	movw	r24, r18
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	08 95       	ret

00000c98 <__pack_f>:
     c98:	df 92       	push	r13
     c9a:	ef 92       	push	r14
     c9c:	ff 92       	push	r15
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	fc 01       	movw	r30, r24
     ca4:	e4 80       	ldd	r14, Z+4	; 0x04
     ca6:	f5 80       	ldd	r15, Z+5	; 0x05
     ca8:	06 81       	ldd	r16, Z+6	; 0x06
     caa:	17 81       	ldd	r17, Z+7	; 0x07
     cac:	d1 80       	ldd	r13, Z+1	; 0x01
     cae:	80 81       	ld	r24, Z
     cb0:	82 30       	cpi	r24, 0x02	; 2
     cb2:	48 f4       	brcc	.+18     	; 0xcc6 <__pack_f+0x2e>
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e1       	ldi	r26, 0x10	; 16
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e8 2a       	or	r14, r24
     cbe:	f9 2a       	or	r15, r25
     cc0:	0a 2b       	or	r16, r26
     cc2:	1b 2b       	or	r17, r27
     cc4:	a5 c0       	rjmp	.+330    	; 0xe10 <__pack_f+0x178>
     cc6:	84 30       	cpi	r24, 0x04	; 4
     cc8:	09 f4       	brne	.+2      	; 0xccc <__pack_f+0x34>
     cca:	9f c0       	rjmp	.+318    	; 0xe0a <__pack_f+0x172>
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	21 f4       	brne	.+8      	; 0xcd8 <__pack_f+0x40>
     cd0:	ee 24       	eor	r14, r14
     cd2:	ff 24       	eor	r15, r15
     cd4:	87 01       	movw	r16, r14
     cd6:	05 c0       	rjmp	.+10     	; 0xce2 <__pack_f+0x4a>
     cd8:	e1 14       	cp	r14, r1
     cda:	f1 04       	cpc	r15, r1
     cdc:	01 05       	cpc	r16, r1
     cde:	11 05       	cpc	r17, r1
     ce0:	19 f4       	brne	.+6      	; 0xce8 <__pack_f+0x50>
     ce2:	e0 e0       	ldi	r30, 0x00	; 0
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	96 c0       	rjmp	.+300    	; 0xe14 <__pack_f+0x17c>
     ce8:	62 81       	ldd	r22, Z+2	; 0x02
     cea:	73 81       	ldd	r23, Z+3	; 0x03
     cec:	9f ef       	ldi	r25, 0xFF	; 255
     cee:	62 38       	cpi	r22, 0x82	; 130
     cf0:	79 07       	cpc	r23, r25
     cf2:	0c f0       	brlt	.+2      	; 0xcf6 <__pack_f+0x5e>
     cf4:	5b c0       	rjmp	.+182    	; 0xdac <__pack_f+0x114>
     cf6:	22 e8       	ldi	r18, 0x82	; 130
     cf8:	3f ef       	ldi	r19, 0xFF	; 255
     cfa:	26 1b       	sub	r18, r22
     cfc:	37 0b       	sbc	r19, r23
     cfe:	2a 31       	cpi	r18, 0x1A	; 26
     d00:	31 05       	cpc	r19, r1
     d02:	2c f0       	brlt	.+10     	; 0xd0e <__pack_f+0x76>
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	2a c0       	rjmp	.+84     	; 0xd62 <__pack_f+0xca>
     d0e:	b8 01       	movw	r22, r16
     d10:	a7 01       	movw	r20, r14
     d12:	02 2e       	mov	r0, r18
     d14:	04 c0       	rjmp	.+8      	; 0xd1e <__pack_f+0x86>
     d16:	76 95       	lsr	r23
     d18:	67 95       	ror	r22
     d1a:	57 95       	ror	r21
     d1c:	47 95       	ror	r20
     d1e:	0a 94       	dec	r0
     d20:	d2 f7       	brpl	.-12     	; 0xd16 <__pack_f+0x7e>
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a0 e0       	ldi	r26, 0x00	; 0
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	04 c0       	rjmp	.+8      	; 0xd34 <__pack_f+0x9c>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	aa 1f       	adc	r26, r26
     d32:	bb 1f       	adc	r27, r27
     d34:	2a 95       	dec	r18
     d36:	d2 f7       	brpl	.-12     	; 0xd2c <__pack_f+0x94>
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	a1 09       	sbc	r26, r1
     d3c:	b1 09       	sbc	r27, r1
     d3e:	8e 21       	and	r24, r14
     d40:	9f 21       	and	r25, r15
     d42:	a0 23       	and	r26, r16
     d44:	b1 23       	and	r27, r17
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	a1 05       	cpc	r26, r1
     d4a:	b1 05       	cpc	r27, r1
     d4c:	21 f0       	breq	.+8      	; 0xd56 <__pack_f+0xbe>
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	a0 e0       	ldi	r26, 0x00	; 0
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	9a 01       	movw	r18, r20
     d58:	ab 01       	movw	r20, r22
     d5a:	28 2b       	or	r18, r24
     d5c:	39 2b       	or	r19, r25
     d5e:	4a 2b       	or	r20, r26
     d60:	5b 2b       	or	r21, r27
     d62:	da 01       	movw	r26, r20
     d64:	c9 01       	movw	r24, r18
     d66:	8f 77       	andi	r24, 0x7F	; 127
     d68:	90 70       	andi	r25, 0x00	; 0
     d6a:	a0 70       	andi	r26, 0x00	; 0
     d6c:	b0 70       	andi	r27, 0x00	; 0
     d6e:	80 34       	cpi	r24, 0x40	; 64
     d70:	91 05       	cpc	r25, r1
     d72:	a1 05       	cpc	r26, r1
     d74:	b1 05       	cpc	r27, r1
     d76:	39 f4       	brne	.+14     	; 0xd86 <__pack_f+0xee>
     d78:	27 ff       	sbrs	r18, 7
     d7a:	09 c0       	rjmp	.+18     	; 0xd8e <__pack_f+0xf6>
     d7c:	20 5c       	subi	r18, 0xC0	; 192
     d7e:	3f 4f       	sbci	r19, 0xFF	; 255
     d80:	4f 4f       	sbci	r20, 0xFF	; 255
     d82:	5f 4f       	sbci	r21, 0xFF	; 255
     d84:	04 c0       	rjmp	.+8      	; 0xd8e <__pack_f+0xf6>
     d86:	21 5c       	subi	r18, 0xC1	; 193
     d88:	3f 4f       	sbci	r19, 0xFF	; 255
     d8a:	4f 4f       	sbci	r20, 0xFF	; 255
     d8c:	5f 4f       	sbci	r21, 0xFF	; 255
     d8e:	e0 e0       	ldi	r30, 0x00	; 0
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	20 30       	cpi	r18, 0x00	; 0
     d94:	a0 e0       	ldi	r26, 0x00	; 0
     d96:	3a 07       	cpc	r19, r26
     d98:	a0 e0       	ldi	r26, 0x00	; 0
     d9a:	4a 07       	cpc	r20, r26
     d9c:	a0 e4       	ldi	r26, 0x40	; 64
     d9e:	5a 07       	cpc	r21, r26
     da0:	10 f0       	brcs	.+4      	; 0xda6 <__pack_f+0x10e>
     da2:	e1 e0       	ldi	r30, 0x01	; 1
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	79 01       	movw	r14, r18
     da8:	8a 01       	movw	r16, r20
     daa:	27 c0       	rjmp	.+78     	; 0xdfa <__pack_f+0x162>
     dac:	60 38       	cpi	r22, 0x80	; 128
     dae:	71 05       	cpc	r23, r1
     db0:	64 f5       	brge	.+88     	; 0xe0a <__pack_f+0x172>
     db2:	fb 01       	movw	r30, r22
     db4:	e1 58       	subi	r30, 0x81	; 129
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	d8 01       	movw	r26, r16
     dba:	c7 01       	movw	r24, r14
     dbc:	8f 77       	andi	r24, 0x7F	; 127
     dbe:	90 70       	andi	r25, 0x00	; 0
     dc0:	a0 70       	andi	r26, 0x00	; 0
     dc2:	b0 70       	andi	r27, 0x00	; 0
     dc4:	80 34       	cpi	r24, 0x40	; 64
     dc6:	91 05       	cpc	r25, r1
     dc8:	a1 05       	cpc	r26, r1
     dca:	b1 05       	cpc	r27, r1
     dcc:	39 f4       	brne	.+14     	; 0xddc <__pack_f+0x144>
     dce:	e7 fe       	sbrs	r14, 7
     dd0:	0d c0       	rjmp	.+26     	; 0xdec <__pack_f+0x154>
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e0       	ldi	r26, 0x00	; 0
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <__pack_f+0x14c>
     ddc:	8f e3       	ldi	r24, 0x3F	; 63
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	a0 e0       	ldi	r26, 0x00	; 0
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e8 0e       	add	r14, r24
     de6:	f9 1e       	adc	r15, r25
     de8:	0a 1f       	adc	r16, r26
     dea:	1b 1f       	adc	r17, r27
     dec:	17 ff       	sbrs	r17, 7
     dee:	05 c0       	rjmp	.+10     	; 0xdfa <__pack_f+0x162>
     df0:	16 95       	lsr	r17
     df2:	07 95       	ror	r16
     df4:	f7 94       	ror	r15
     df6:	e7 94       	ror	r14
     df8:	31 96       	adiw	r30, 0x01	; 1
     dfa:	87 e0       	ldi	r24, 0x07	; 7
     dfc:	16 95       	lsr	r17
     dfe:	07 95       	ror	r16
     e00:	f7 94       	ror	r15
     e02:	e7 94       	ror	r14
     e04:	8a 95       	dec	r24
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__pack_f+0x164>
     e08:	05 c0       	rjmp	.+10     	; 0xe14 <__pack_f+0x17c>
     e0a:	ee 24       	eor	r14, r14
     e0c:	ff 24       	eor	r15, r15
     e0e:	87 01       	movw	r16, r14
     e10:	ef ef       	ldi	r30, 0xFF	; 255
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	6e 2f       	mov	r22, r30
     e16:	67 95       	ror	r22
     e18:	66 27       	eor	r22, r22
     e1a:	67 95       	ror	r22
     e1c:	90 2f       	mov	r25, r16
     e1e:	9f 77       	andi	r25, 0x7F	; 127
     e20:	d7 94       	ror	r13
     e22:	dd 24       	eor	r13, r13
     e24:	d7 94       	ror	r13
     e26:	8e 2f       	mov	r24, r30
     e28:	86 95       	lsr	r24
     e2a:	49 2f       	mov	r20, r25
     e2c:	46 2b       	or	r20, r22
     e2e:	58 2f       	mov	r21, r24
     e30:	5d 29       	or	r21, r13
     e32:	b7 01       	movw	r22, r14
     e34:	ca 01       	movw	r24, r20
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	ff 90       	pop	r15
     e3c:	ef 90       	pop	r14
     e3e:	df 90       	pop	r13
     e40:	08 95       	ret

00000e42 <__unpack_f>:
     e42:	fc 01       	movw	r30, r24
     e44:	db 01       	movw	r26, r22
     e46:	40 81       	ld	r20, Z
     e48:	51 81       	ldd	r21, Z+1	; 0x01
     e4a:	22 81       	ldd	r18, Z+2	; 0x02
     e4c:	62 2f       	mov	r22, r18
     e4e:	6f 77       	andi	r22, 0x7F	; 127
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	22 1f       	adc	r18, r18
     e54:	22 27       	eor	r18, r18
     e56:	22 1f       	adc	r18, r18
     e58:	93 81       	ldd	r25, Z+3	; 0x03
     e5a:	89 2f       	mov	r24, r25
     e5c:	88 0f       	add	r24, r24
     e5e:	82 2b       	or	r24, r18
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	99 1f       	adc	r25, r25
     e66:	99 27       	eor	r25, r25
     e68:	99 1f       	adc	r25, r25
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	9c 93       	st	X, r25
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	21 15       	cp	r18, r1
     e72:	31 05       	cpc	r19, r1
     e74:	a9 f5       	brne	.+106    	; 0xee0 <__unpack_f+0x9e>
     e76:	41 15       	cp	r20, r1
     e78:	51 05       	cpc	r21, r1
     e7a:	61 05       	cpc	r22, r1
     e7c:	71 05       	cpc	r23, r1
     e7e:	11 f4       	brne	.+4      	; 0xe84 <__unpack_f+0x42>
     e80:	82 e0       	ldi	r24, 0x02	; 2
     e82:	37 c0       	rjmp	.+110    	; 0xef2 <__unpack_f+0xb0>
     e84:	82 e8       	ldi	r24, 0x82	; 130
     e86:	9f ef       	ldi	r25, 0xFF	; 255
     e88:	13 96       	adiw	r26, 0x03	; 3
     e8a:	9c 93       	st	X, r25
     e8c:	8e 93       	st	-X, r24
     e8e:	12 97       	sbiw	r26, 0x02	; 2
     e90:	9a 01       	movw	r18, r20
     e92:	ab 01       	movw	r20, r22
     e94:	67 e0       	ldi	r22, 0x07	; 7
     e96:	22 0f       	add	r18, r18
     e98:	33 1f       	adc	r19, r19
     e9a:	44 1f       	adc	r20, r20
     e9c:	55 1f       	adc	r21, r21
     e9e:	6a 95       	dec	r22
     ea0:	d1 f7       	brne	.-12     	; 0xe96 <__unpack_f+0x54>
     ea2:	83 e0       	ldi	r24, 0x03	; 3
     ea4:	8c 93       	st	X, r24
     ea6:	0d c0       	rjmp	.+26     	; 0xec2 <__unpack_f+0x80>
     ea8:	22 0f       	add	r18, r18
     eaa:	33 1f       	adc	r19, r19
     eac:	44 1f       	adc	r20, r20
     eae:	55 1f       	adc	r21, r21
     eb0:	12 96       	adiw	r26, 0x02	; 2
     eb2:	8d 91       	ld	r24, X+
     eb4:	9c 91       	ld	r25, X
     eb6:	13 97       	sbiw	r26, 0x03	; 3
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	13 96       	adiw	r26, 0x03	; 3
     ebc:	9c 93       	st	X, r25
     ebe:	8e 93       	st	-X, r24
     ec0:	12 97       	sbiw	r26, 0x02	; 2
     ec2:	20 30       	cpi	r18, 0x00	; 0
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	38 07       	cpc	r19, r24
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	48 07       	cpc	r20, r24
     ecc:	80 e4       	ldi	r24, 0x40	; 64
     ece:	58 07       	cpc	r21, r24
     ed0:	58 f3       	brcs	.-42     	; 0xea8 <__unpack_f+0x66>
     ed2:	14 96       	adiw	r26, 0x04	; 4
     ed4:	2d 93       	st	X+, r18
     ed6:	3d 93       	st	X+, r19
     ed8:	4d 93       	st	X+, r20
     eda:	5c 93       	st	X, r21
     edc:	17 97       	sbiw	r26, 0x07	; 7
     ede:	08 95       	ret
     ee0:	2f 3f       	cpi	r18, 0xFF	; 255
     ee2:	31 05       	cpc	r19, r1
     ee4:	79 f4       	brne	.+30     	; 0xf04 <__unpack_f+0xc2>
     ee6:	41 15       	cp	r20, r1
     ee8:	51 05       	cpc	r21, r1
     eea:	61 05       	cpc	r22, r1
     eec:	71 05       	cpc	r23, r1
     eee:	19 f4       	brne	.+6      	; 0xef6 <__unpack_f+0xb4>
     ef0:	84 e0       	ldi	r24, 0x04	; 4
     ef2:	8c 93       	st	X, r24
     ef4:	08 95       	ret
     ef6:	64 ff       	sbrs	r22, 4
     ef8:	03 c0       	rjmp	.+6      	; 0xf00 <__unpack_f+0xbe>
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	8c 93       	st	X, r24
     efe:	12 c0       	rjmp	.+36     	; 0xf24 <__unpack_f+0xe2>
     f00:	1c 92       	st	X, r1
     f02:	10 c0       	rjmp	.+32     	; 0xf24 <__unpack_f+0xe2>
     f04:	2f 57       	subi	r18, 0x7F	; 127
     f06:	30 40       	sbci	r19, 0x00	; 0
     f08:	13 96       	adiw	r26, 0x03	; 3
     f0a:	3c 93       	st	X, r19
     f0c:	2e 93       	st	-X, r18
     f0e:	12 97       	sbiw	r26, 0x02	; 2
     f10:	83 e0       	ldi	r24, 0x03	; 3
     f12:	8c 93       	st	X, r24
     f14:	87 e0       	ldi	r24, 0x07	; 7
     f16:	44 0f       	add	r20, r20
     f18:	55 1f       	adc	r21, r21
     f1a:	66 1f       	adc	r22, r22
     f1c:	77 1f       	adc	r23, r23
     f1e:	8a 95       	dec	r24
     f20:	d1 f7       	brne	.-12     	; 0xf16 <__unpack_f+0xd4>
     f22:	70 64       	ori	r23, 0x40	; 64
     f24:	14 96       	adiw	r26, 0x04	; 4
     f26:	4d 93       	st	X+, r20
     f28:	5d 93       	st	X+, r21
     f2a:	6d 93       	st	X+, r22
     f2c:	7c 93       	st	X, r23
     f2e:	17 97       	sbiw	r26, 0x07	; 7
     f30:	08 95       	ret

00000f32 <__fpcmp_parts_f>:
     f32:	1f 93       	push	r17
     f34:	dc 01       	movw	r26, r24
     f36:	fb 01       	movw	r30, r22
     f38:	9c 91       	ld	r25, X
     f3a:	92 30       	cpi	r25, 0x02	; 2
     f3c:	08 f4       	brcc	.+2      	; 0xf40 <__fpcmp_parts_f+0xe>
     f3e:	47 c0       	rjmp	.+142    	; 0xfce <__fpcmp_parts_f+0x9c>
     f40:	80 81       	ld	r24, Z
     f42:	82 30       	cpi	r24, 0x02	; 2
     f44:	08 f4       	brcc	.+2      	; 0xf48 <__fpcmp_parts_f+0x16>
     f46:	43 c0       	rjmp	.+134    	; 0xfce <__fpcmp_parts_f+0x9c>
     f48:	94 30       	cpi	r25, 0x04	; 4
     f4a:	51 f4       	brne	.+20     	; 0xf60 <__fpcmp_parts_f+0x2e>
     f4c:	11 96       	adiw	r26, 0x01	; 1
     f4e:	1c 91       	ld	r17, X
     f50:	84 30       	cpi	r24, 0x04	; 4
     f52:	99 f5       	brne	.+102    	; 0xfba <__fpcmp_parts_f+0x88>
     f54:	81 81       	ldd	r24, Z+1	; 0x01
     f56:	68 2f       	mov	r22, r24
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	61 1b       	sub	r22, r17
     f5c:	71 09       	sbc	r23, r1
     f5e:	3f c0       	rjmp	.+126    	; 0xfde <__fpcmp_parts_f+0xac>
     f60:	84 30       	cpi	r24, 0x04	; 4
     f62:	21 f0       	breq	.+8      	; 0xf6c <__fpcmp_parts_f+0x3a>
     f64:	92 30       	cpi	r25, 0x02	; 2
     f66:	31 f4       	brne	.+12     	; 0xf74 <__fpcmp_parts_f+0x42>
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	b9 f1       	breq	.+110    	; 0xfda <__fpcmp_parts_f+0xa8>
     f6c:	81 81       	ldd	r24, Z+1	; 0x01
     f6e:	88 23       	and	r24, r24
     f70:	89 f1       	breq	.+98     	; 0xfd4 <__fpcmp_parts_f+0xa2>
     f72:	2d c0       	rjmp	.+90     	; 0xfce <__fpcmp_parts_f+0x9c>
     f74:	11 96       	adiw	r26, 0x01	; 1
     f76:	1c 91       	ld	r17, X
     f78:	11 97       	sbiw	r26, 0x01	; 1
     f7a:	82 30       	cpi	r24, 0x02	; 2
     f7c:	f1 f0       	breq	.+60     	; 0xfba <__fpcmp_parts_f+0x88>
     f7e:	81 81       	ldd	r24, Z+1	; 0x01
     f80:	18 17       	cp	r17, r24
     f82:	d9 f4       	brne	.+54     	; 0xfba <__fpcmp_parts_f+0x88>
     f84:	12 96       	adiw	r26, 0x02	; 2
     f86:	2d 91       	ld	r18, X+
     f88:	3c 91       	ld	r19, X
     f8a:	13 97       	sbiw	r26, 0x03	; 3
     f8c:	82 81       	ldd	r24, Z+2	; 0x02
     f8e:	93 81       	ldd	r25, Z+3	; 0x03
     f90:	82 17       	cp	r24, r18
     f92:	93 07       	cpc	r25, r19
     f94:	94 f0       	brlt	.+36     	; 0xfba <__fpcmp_parts_f+0x88>
     f96:	28 17       	cp	r18, r24
     f98:	39 07       	cpc	r19, r25
     f9a:	bc f0       	brlt	.+46     	; 0xfca <__fpcmp_parts_f+0x98>
     f9c:	14 96       	adiw	r26, 0x04	; 4
     f9e:	8d 91       	ld	r24, X+
     fa0:	9d 91       	ld	r25, X+
     fa2:	0d 90       	ld	r0, X+
     fa4:	bc 91       	ld	r27, X
     fa6:	a0 2d       	mov	r26, r0
     fa8:	24 81       	ldd	r18, Z+4	; 0x04
     faa:	35 81       	ldd	r19, Z+5	; 0x05
     fac:	46 81       	ldd	r20, Z+6	; 0x06
     fae:	57 81       	ldd	r21, Z+7	; 0x07
     fb0:	28 17       	cp	r18, r24
     fb2:	39 07       	cpc	r19, r25
     fb4:	4a 07       	cpc	r20, r26
     fb6:	5b 07       	cpc	r21, r27
     fb8:	18 f4       	brcc	.+6      	; 0xfc0 <__fpcmp_parts_f+0x8e>
     fba:	11 23       	and	r17, r17
     fbc:	41 f0       	breq	.+16     	; 0xfce <__fpcmp_parts_f+0x9c>
     fbe:	0a c0       	rjmp	.+20     	; 0xfd4 <__fpcmp_parts_f+0xa2>
     fc0:	82 17       	cp	r24, r18
     fc2:	93 07       	cpc	r25, r19
     fc4:	a4 07       	cpc	r26, r20
     fc6:	b5 07       	cpc	r27, r21
     fc8:	40 f4       	brcc	.+16     	; 0xfda <__fpcmp_parts_f+0xa8>
     fca:	11 23       	and	r17, r17
     fcc:	19 f0       	breq	.+6      	; 0xfd4 <__fpcmp_parts_f+0xa2>
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	05 c0       	rjmp	.+10     	; 0xfde <__fpcmp_parts_f+0xac>
     fd4:	6f ef       	ldi	r22, 0xFF	; 255
     fd6:	7f ef       	ldi	r23, 0xFF	; 255
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <__fpcmp_parts_f+0xac>
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	cb 01       	movw	r24, r22
     fe0:	1f 91       	pop	r17
     fe2:	08 95       	ret

00000fe4 <LDR_GetIntensityPercentage>:
 */

#include "../typedef.h"
#include "../ADC_interface.h"

u8 LDR_GetIntensityPercentage() {
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	00 d0       	rcall	.+0      	; 0xfea <LDR_GetIntensityPercentage+0x6>
     fea:	0f 92       	push	r0
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
	u16 value =  ADC_ADCResult();
     ff0:	0e 94 92 08 	call	0x1124	; 0x1124 <ADC_ADCResult>
     ff4:	9b 83       	std	Y+3, r25	; 0x03
     ff6:	8a 83       	std	Y+2, r24	; 0x02
	u8 percentage = 100-(((float)value / 1023)*100);
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	9b 81       	ldd	r25, Y+3	; 0x03
     ffc:	cc 01       	movw	r24, r24
     ffe:	a0 e0       	ldi	r26, 0x00	; 0
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	bc 01       	movw	r22, r24
    1004:	cd 01       	movw	r24, r26
    1006:	0e 94 84 05 	call	0xb08	; 0xb08 <__floatunsisf>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	bc 01       	movw	r22, r24
    1010:	cd 01       	movw	r24, r26
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 ec       	ldi	r19, 0xC0	; 192
    1016:	4f e7       	ldi	r20, 0x7F	; 127
    1018:	54 e4       	ldi	r21, 0x44	; 68
    101a:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	bc 01       	movw	r22, r24
    1024:	cd 01       	movw	r24, r26
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	48 ec       	ldi	r20, 0xC8	; 200
    102c:	52 ec       	ldi	r21, 0xC2	; 194
    102e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	bc 01       	movw	r22, r24
    1038:	cd 01       	movw	r24, r26
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	48 ec       	ldi	r20, 0xC8	; 200
    1040:	52 e4       	ldi	r21, 0x42	; 66
    1042:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	bc 01       	movw	r22, r24
    104c:	cd 01       	movw	r24, r26
    104e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	89 83       	std	Y+1, r24	; 0x01
	return percentage;
    1058:	89 81       	ldd	r24, Y+1	; 0x01
}
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <ADC_VidInit>:
//POINTERS TO CALL BACK FUNCTIONS
void (*ADC_CallBack)(void) = NULL;

void __vector_16(void) __attribute__((signal)); // ISR for INT0

void ADC_VidInit(void){
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62

	//VCC REFERENCE VOLTAGE (AVCC with external capacitor at AREF pin)
	SET_BIT(ADMUX,ADMUX_REFS0);
    106e:	a7 e2       	ldi	r26, 0x27	; 39
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e7 e2       	ldi	r30, 0x27	; 39
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	80 64       	ori	r24, 0x40	; 64
    107a:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,ADMUX_REFS1);
    107c:	a7 e2       	ldi	r26, 0x27	; 39
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e7 e2       	ldi	r30, 0x27	; 39
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	8f 77       	andi	r24, 0x7F	; 127
    1088:	8c 93       	st	X, r24

	//ACTIVE right ADJUST
	CLEAR_BIT(ADMUX,ADMUX_ADLAR);
    108a:	a7 e2       	ldi	r26, 0x27	; 39
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e7 e2       	ldi	r30, 0x27	; 39
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	8f 7d       	andi	r24, 0xDF	; 223
    1096:	8c 93       	st	X, r24

	//ADC CLOCK(PRESCALER)
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
    1098:	a6 e2       	ldi	r26, 0x26	; 38
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e6 e2       	ldi	r30, 0x26	; 38
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	84 60       	ori	r24, 0x04	; 4
    10a4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
    10a6:	a6 e2       	ldi	r26, 0x26	; 38
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e6 e2       	ldi	r30, 0x26	; 38
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	82 60       	ori	r24, 0x02	; 2
    10b2:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
    10b4:	a6 e2       	ldi	r26, 0x26	; 38
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e6 e2       	ldi	r30, 0x26	; 38
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	81 60       	ori	r24, 0x01	; 1
    10c0:	8c 93       	st	X, r24


	//ENABLE ADC
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    10c2:	a6 e2       	ldi	r26, 0x26	; 38
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e6 e2       	ldi	r30, 0x26	; 38
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	80 68       	ori	r24, 0x80	; 128
    10ce:	8c 93       	st	X, r24

}
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <ADC_u16SOCAsyn>:

void ADC_u16SOCAsyn(u8 Copy_u8Channel){
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	0f 92       	push	r0
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	89 83       	std	Y+1, r24	; 0x01

	//CLEAR THE MUX BITS
	ADMUX &= 0b11100000;
    10e2:	a7 e2       	ldi	r26, 0x27	; 39
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e7 e2       	ldi	r30, 0x27	; 39
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	80 7e       	andi	r24, 0xE0	; 224
    10ee:	8c 93       	st	X, r24

	//SET THE REQUIRED CHANNEL INTO THE MUX
	ADMUX |= Copy_u8Channel;
    10f0:	a7 e2       	ldi	r26, 0x27	; 39
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e7 e2       	ldi	r30, 0x27	; 39
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	90 81       	ld	r25, Z
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	89 2b       	or	r24, r25
    10fe:	8c 93       	st	X, r24

	//START CONVERSION
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    1100:	a6 e2       	ldi	r26, 0x26	; 38
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e6 e2       	ldi	r30, 0x26	; 38
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	80 64       	ori	r24, 0x40	; 64
    110c:	8c 93       	st	X, r24

	//ENABLE INTERRUPT
	SET_BIT(ADCSRA,ADCSRA_ADIE);
    110e:	a6 e2       	ldi	r26, 0x26	; 38
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e6 e2       	ldi	r30, 0x26	; 38
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	88 60       	ori	r24, 0x08	; 8
    111a:	8c 93       	st	X, r24

}
    111c:	0f 90       	pop	r0
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <ADC_ADCResult>:

u16 ADC_ADCResult(){
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
	return ADCW;
    112c:	e4 e2       	ldi	r30, 0x24	; 36
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	91 81       	ldd	r25, Z+1	; 0x01
}
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <ADC_SetCallBack>:

//SET CALL BACK FUNCTION TO STORE FUNCTION IN PTR
void ADC_SetCallBack(void *Copy_PVidCallBack(void)){
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	00 d0       	rcall	.+0      	; 0x1140 <ADC_SetCallBack+0x6>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	9a 83       	std	Y+2, r25	; 0x02
    1146:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_PVidCallBack != NULL){
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	9a 81       	ldd	r25, Y+2	; 0x02
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	31 f0       	breq	.+12     	; 0x115c <ADC_SetCallBack+0x22>
		ADC_CallBack = Copy_PVidCallBack;
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	9a 81       	ldd	r25, Y+2	; 0x02
    1154:	90 93 95 01 	sts	0x0195, r25
    1158:	80 93 94 01 	sts	0x0194, r24
	}
}
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <__vector_16>:

// ISR for INT0
void __vector_16(void) {
    1166:	1f 92       	push	r1
    1168:	0f 92       	push	r0
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	0f 92       	push	r0
    116e:	11 24       	eor	r1, r1
    1170:	2f 93       	push	r18
    1172:	3f 93       	push	r19
    1174:	4f 93       	push	r20
    1176:	5f 93       	push	r21
    1178:	6f 93       	push	r22
    117a:	7f 93       	push	r23
    117c:	8f 93       	push	r24
    117e:	9f 93       	push	r25
    1180:	af 93       	push	r26
    1182:	bf 93       	push	r27
    1184:	ef 93       	push	r30
    1186:	ff 93       	push	r31
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
	if(ADC_CallBack != NULL)
    1190:	80 91 94 01 	lds	r24, 0x0194
    1194:	90 91 95 01 	lds	r25, 0x0195
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	29 f0       	breq	.+10     	; 0x11a6 <__vector_16+0x40>
		ADC_CallBack();
    119c:	e0 91 94 01 	lds	r30, 0x0194
    11a0:	f0 91 95 01 	lds	r31, 0x0195
    11a4:	09 95       	icall
}
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	ff 91       	pop	r31
    11ac:	ef 91       	pop	r30
    11ae:	bf 91       	pop	r27
    11b0:	af 91       	pop	r26
    11b2:	9f 91       	pop	r25
    11b4:	8f 91       	pop	r24
    11b6:	7f 91       	pop	r23
    11b8:	6f 91       	pop	r22
    11ba:	5f 91       	pop	r21
    11bc:	4f 91       	pop	r20
    11be:	3f 91       	pop	r19
    11c0:	2f 91       	pop	r18
    11c2:	0f 90       	pop	r0
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	0f 90       	pop	r0
    11c8:	1f 90       	pop	r1
    11ca:	18 95       	reti

000011cc <DIO_VidSetPinDirection>:
#include "bit.h"
#include "DIO_Private.h"
#include "DIO_interface.h"

void DIO_VidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Direction)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	27 97       	sbiw	r28, 0x07	; 7
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	8b 83       	std	Y+3, r24	; 0x03
    11e2:	6c 83       	std	Y+4, r22	; 0x04
    11e4:	4d 83       	std	Y+5, r20	; 0x05
    volatile u8 *ddr_reg;

    switch (Copy_u8Port) {
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	3f 83       	std	Y+7, r19	; 0x07
    11ee:	2e 83       	std	Y+6, r18	; 0x06
    11f0:	8e 81       	ldd	r24, Y+6	; 0x06
    11f2:	9f 81       	ldd	r25, Y+7	; 0x07
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	91 05       	cpc	r25, r1
    11f8:	d1 f0       	breq	.+52     	; 0x122e <DIO_VidSetPinDirection+0x62>
    11fa:	2e 81       	ldd	r18, Y+6	; 0x06
    11fc:	3f 81       	ldd	r19, Y+7	; 0x07
    11fe:	22 30       	cpi	r18, 0x02	; 2
    1200:	31 05       	cpc	r19, r1
    1202:	2c f4       	brge	.+10     	; 0x120e <DIO_VidSetPinDirection+0x42>
    1204:	8e 81       	ldd	r24, Y+6	; 0x06
    1206:	9f 81       	ldd	r25, Y+7	; 0x07
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	61 f0       	breq	.+24     	; 0x1224 <DIO_VidSetPinDirection+0x58>
    120c:	49 c0       	rjmp	.+146    	; 0x12a0 <DIO_VidSetPinDirection+0xd4>
    120e:	2e 81       	ldd	r18, Y+6	; 0x06
    1210:	3f 81       	ldd	r19, Y+7	; 0x07
    1212:	22 30       	cpi	r18, 0x02	; 2
    1214:	31 05       	cpc	r19, r1
    1216:	81 f0       	breq	.+32     	; 0x1238 <DIO_VidSetPinDirection+0x6c>
    1218:	8e 81       	ldd	r24, Y+6	; 0x06
    121a:	9f 81       	ldd	r25, Y+7	; 0x07
    121c:	83 30       	cpi	r24, 0x03	; 3
    121e:	91 05       	cpc	r25, r1
    1220:	81 f0       	breq	.+32     	; 0x1242 <DIO_VidSetPinDirection+0x76>
    1222:	3e c0       	rjmp	.+124    	; 0x12a0 <DIO_VidSetPinDirection+0xd4>
        case Port_A:
            ddr_reg = &DDRA;
    1224:	8a e3       	ldi	r24, 0x3A	; 58
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	9a 83       	std	Y+2, r25	; 0x02
    122a:	89 83       	std	Y+1, r24	; 0x01
    122c:	0e c0       	rjmp	.+28     	; 0x124a <DIO_VidSetPinDirection+0x7e>
            break;
        case Port_B:
            ddr_reg = &DDRB;
    122e:	87 e3       	ldi	r24, 0x37	; 55
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	9a 83       	std	Y+2, r25	; 0x02
    1234:	89 83       	std	Y+1, r24	; 0x01
    1236:	09 c0       	rjmp	.+18     	; 0x124a <DIO_VidSetPinDirection+0x7e>
            break;
        case Port_C:
            ddr_reg = &DDRC;
    1238:	84 e3       	ldi	r24, 0x34	; 52
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	9a 83       	std	Y+2, r25	; 0x02
    123e:	89 83       	std	Y+1, r24	; 0x01
    1240:	04 c0       	rjmp	.+8      	; 0x124a <DIO_VidSetPinDirection+0x7e>
            break;
        case Port_D:
            ddr_reg = &DDRD;
    1242:	81 e3       	ldi	r24, 0x31	; 49
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	9a 83       	std	Y+2, r25	; 0x02
    1248:	89 83       	std	Y+1, r24	; 0x01
            break;
        default:
            return;
    }

    if (Copy_u8Direction == Input) {
    124a:	8d 81       	ldd	r24, Y+5	; 0x05
    124c:	88 23       	and	r24, r24
    124e:	a9 f4       	brne	.+42     	; 0x127a <DIO_VidSetPinDirection+0xae>
    	CLEARBIT(*ddr_reg, Copy_u8Pin);
    1250:	e9 81       	ldd	r30, Y+1	; 0x01
    1252:	fa 81       	ldd	r31, Y+2	; 0x02
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8c 81       	ldd	r24, Y+4	; 0x04
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <DIO_VidSetPinDirection+0x9e>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <DIO_VidSetPinDirection+0x9a>
    126e:	80 95       	com	r24
    1270:	84 23       	and	r24, r20
    1272:	e9 81       	ldd	r30, Y+1	; 0x01
    1274:	fa 81       	ldd	r31, Y+2	; 0x02
    1276:	80 83       	st	Z, r24
    1278:	13 c0       	rjmp	.+38     	; 0x12a0 <DIO_VidSetPinDirection+0xd4>
    } else {
    	SETBIT(*ddr_reg, Copy_u8Pin);
    127a:	e9 81       	ldd	r30, Y+1	; 0x01
    127c:	fa 81       	ldd	r31, Y+2	; 0x02
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	8c 81       	ldd	r24, Y+4	; 0x04
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 2e       	mov	r0, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_VidSetPinDirection+0xc8>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	0a 94       	dec	r0
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <DIO_VidSetPinDirection+0xc4>
    1298:	84 2b       	or	r24, r20
    129a:	e9 81       	ldd	r30, Y+1	; 0x01
    129c:	fa 81       	ldd	r31, Y+2	; 0x02
    129e:	80 83       	st	Z, r24
    }
}
    12a0:	27 96       	adiw	r28, 0x07	; 7
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	de bf       	out	0x3e, r29	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	cd bf       	out	0x3d, r28	; 61
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <DIO_VidSetPinValue>:


void DIO_VidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value)
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	27 97       	sbiw	r28, 0x07	; 7
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	8b 83       	std	Y+3, r24	; 0x03
    12c8:	6c 83       	std	Y+4, r22	; 0x04
    12ca:	4d 83       	std	Y+5, r20	; 0x05
    volatile u8 *port_reg;

    switch (Copy_u8Port) {
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	3f 83       	std	Y+7, r19	; 0x07
    12d4:	2e 83       	std	Y+6, r18	; 0x06
    12d6:	8e 81       	ldd	r24, Y+6	; 0x06
    12d8:	9f 81       	ldd	r25, Y+7	; 0x07
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	91 05       	cpc	r25, r1
    12de:	d1 f0       	breq	.+52     	; 0x1314 <DIO_VidSetPinValue+0x62>
    12e0:	2e 81       	ldd	r18, Y+6	; 0x06
    12e2:	3f 81       	ldd	r19, Y+7	; 0x07
    12e4:	22 30       	cpi	r18, 0x02	; 2
    12e6:	31 05       	cpc	r19, r1
    12e8:	2c f4       	brge	.+10     	; 0x12f4 <DIO_VidSetPinValue+0x42>
    12ea:	8e 81       	ldd	r24, Y+6	; 0x06
    12ec:	9f 81       	ldd	r25, Y+7	; 0x07
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	61 f0       	breq	.+24     	; 0x130a <DIO_VidSetPinValue+0x58>
    12f2:	49 c0       	rjmp	.+146    	; 0x1386 <DIO_VidSetPinValue+0xd4>
    12f4:	2e 81       	ldd	r18, Y+6	; 0x06
    12f6:	3f 81       	ldd	r19, Y+7	; 0x07
    12f8:	22 30       	cpi	r18, 0x02	; 2
    12fa:	31 05       	cpc	r19, r1
    12fc:	81 f0       	breq	.+32     	; 0x131e <DIO_VidSetPinValue+0x6c>
    12fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1300:	9f 81       	ldd	r25, Y+7	; 0x07
    1302:	83 30       	cpi	r24, 0x03	; 3
    1304:	91 05       	cpc	r25, r1
    1306:	81 f0       	breq	.+32     	; 0x1328 <DIO_VidSetPinValue+0x76>
    1308:	3e c0       	rjmp	.+124    	; 0x1386 <DIO_VidSetPinValue+0xd4>
        case Port_A:
            port_reg = &PORTA;
    130a:	8b e3       	ldi	r24, 0x3B	; 59
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	9a 83       	std	Y+2, r25	; 0x02
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	0e c0       	rjmp	.+28     	; 0x1330 <DIO_VidSetPinValue+0x7e>
            break;
        case Port_B:
            port_reg = &PORTB;
    1314:	88 e3       	ldi	r24, 0x38	; 56
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	9a 83       	std	Y+2, r25	; 0x02
    131a:	89 83       	std	Y+1, r24	; 0x01
    131c:	09 c0       	rjmp	.+18     	; 0x1330 <DIO_VidSetPinValue+0x7e>
            break;
        case Port_C:
            port_reg = &PORTC;
    131e:	85 e3       	ldi	r24, 0x35	; 53
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	9a 83       	std	Y+2, r25	; 0x02
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	04 c0       	rjmp	.+8      	; 0x1330 <DIO_VidSetPinValue+0x7e>
            break;
        case Port_D:
            port_reg = &PORTD;
    1328:	82 e3       	ldi	r24, 0x32	; 50
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	9a 83       	std	Y+2, r25	; 0x02
    132e:	89 83       	std	Y+1, r24	; 0x01
            break;
        default:
            return;
    }

    if (Copy_u8Value == Pin_High) {
    1330:	8d 81       	ldd	r24, Y+5	; 0x05
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	a1 f4       	brne	.+40     	; 0x135e <DIO_VidSetPinValue+0xac>
        SETBIT(*port_reg, Copy_u8Pin);
    1336:	e9 81       	ldd	r30, Y+1	; 0x01
    1338:	fa 81       	ldd	r31, Y+2	; 0x02
    133a:	80 81       	ld	r24, Z
    133c:	48 2f       	mov	r20, r24
    133e:	8c 81       	ldd	r24, Y+4	; 0x04
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	02 2e       	mov	r0, r18
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <DIO_VidSetPinValue+0x9e>
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	0a 94       	dec	r0
    1352:	e2 f7       	brpl	.-8      	; 0x134c <DIO_VidSetPinValue+0x9a>
    1354:	84 2b       	or	r24, r20
    1356:	e9 81       	ldd	r30, Y+1	; 0x01
    1358:	fa 81       	ldd	r31, Y+2	; 0x02
    135a:	80 83       	st	Z, r24
    135c:	14 c0       	rjmp	.+40     	; 0x1386 <DIO_VidSetPinValue+0xd4>
    } else {
        CLEARBIT(*port_reg, Copy_u8Pin);
    135e:	e9 81       	ldd	r30, Y+1	; 0x01
    1360:	fa 81       	ldd	r31, Y+2	; 0x02
    1362:	80 81       	ld	r24, Z
    1364:	48 2f       	mov	r20, r24
    1366:	8c 81       	ldd	r24, Y+4	; 0x04
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	02 2e       	mov	r0, r18
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <DIO_VidSetPinValue+0xc6>
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	0a 94       	dec	r0
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <DIO_VidSetPinValue+0xc2>
    137c:	80 95       	com	r24
    137e:	84 23       	and	r24, r20
    1380:	e9 81       	ldd	r30, Y+1	; 0x01
    1382:	fa 81       	ldd	r31, Y+2	; 0x02
    1384:	80 83       	st	Z, r24
    }
}
    1386:	27 96       	adiw	r28, 0x07	; 7
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <DIO_VidGetPinValue>:

void DIO_VidGetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 * pu8Data)
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	28 97       	sbiw	r28, 0x08	; 8
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	8b 83       	std	Y+3, r24	; 0x03
    13ae:	6c 83       	std	Y+4, r22	; 0x04
    13b0:	5e 83       	std	Y+6, r21	; 0x06
    13b2:	4d 83       	std	Y+5, r20	; 0x05
    volatile u8 *pin_reg;

    switch (Copy_u8Port) {
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	38 87       	std	Y+8, r19	; 0x08
    13bc:	2f 83       	std	Y+7, r18	; 0x07
    13be:	4f 81       	ldd	r20, Y+7	; 0x07
    13c0:	58 85       	ldd	r21, Y+8	; 0x08
    13c2:	41 30       	cpi	r20, 0x01	; 1
    13c4:	51 05       	cpc	r21, r1
    13c6:	d9 f0       	breq	.+54     	; 0x13fe <DIO_VidGetPinValue+0x66>
    13c8:	8f 81       	ldd	r24, Y+7	; 0x07
    13ca:	98 85       	ldd	r25, Y+8	; 0x08
    13cc:	82 30       	cpi	r24, 0x02	; 2
    13ce:	91 05       	cpc	r25, r1
    13d0:	34 f4       	brge	.+12     	; 0x13de <DIO_VidGetPinValue+0x46>
    13d2:	2f 81       	ldd	r18, Y+7	; 0x07
    13d4:	38 85       	ldd	r19, Y+8	; 0x08
    13d6:	21 15       	cp	r18, r1
    13d8:	31 05       	cpc	r19, r1
    13da:	61 f0       	breq	.+24     	; 0x13f4 <DIO_VidGetPinValue+0x5c>
    13dc:	31 c0       	rjmp	.+98     	; 0x1440 <DIO_VidGetPinValue+0xa8>
    13de:	4f 81       	ldd	r20, Y+7	; 0x07
    13e0:	58 85       	ldd	r21, Y+8	; 0x08
    13e2:	42 30       	cpi	r20, 0x02	; 2
    13e4:	51 05       	cpc	r21, r1
    13e6:	81 f0       	breq	.+32     	; 0x1408 <DIO_VidGetPinValue+0x70>
    13e8:	8f 81       	ldd	r24, Y+7	; 0x07
    13ea:	98 85       	ldd	r25, Y+8	; 0x08
    13ec:	83 30       	cpi	r24, 0x03	; 3
    13ee:	91 05       	cpc	r25, r1
    13f0:	81 f0       	breq	.+32     	; 0x1412 <DIO_VidGetPinValue+0x7a>
    13f2:	26 c0       	rjmp	.+76     	; 0x1440 <DIO_VidGetPinValue+0xa8>
        case Port_A:
            pin_reg = &PINA;
    13f4:	89 e3       	ldi	r24, 0x39	; 57
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	9a 83       	std	Y+2, r25	; 0x02
    13fa:	89 83       	std	Y+1, r24	; 0x01
    13fc:	0e c0       	rjmp	.+28     	; 0x141a <DIO_VidGetPinValue+0x82>
            break;
        case Port_B:
            pin_reg = &PINB;
    13fe:	86 e3       	ldi	r24, 0x36	; 54
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	9a 83       	std	Y+2, r25	; 0x02
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	09 c0       	rjmp	.+18     	; 0x141a <DIO_VidGetPinValue+0x82>
            break;
        case Port_C:
            pin_reg = &PINC;
    1408:	83 e3       	ldi	r24, 0x33	; 51
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	9a 83       	std	Y+2, r25	; 0x02
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	04 c0       	rjmp	.+8      	; 0x141a <DIO_VidGetPinValue+0x82>
            break;
        case Port_D:
            pin_reg = &PIND;
    1412:	80 e3       	ldi	r24, 0x30	; 48
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	9a 83       	std	Y+2, r25	; 0x02
    1418:	89 83       	std	Y+1, r24	; 0x01
            break;
        default:
            return;
    }

    *pu8Data = GET_BIT(*pin_reg, Copy_u8Pin);
    141a:	e9 81       	ldd	r30, Y+1	; 0x01
    141c:	fa 81       	ldd	r31, Y+2	; 0x02
    141e:	80 81       	ld	r24, Z
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	8c 81       	ldd	r24, Y+4	; 0x04
    1426:	88 2f       	mov	r24, r24
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	a9 01       	movw	r20, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <DIO_VidGetPinValue+0x9a>
    142e:	55 95       	asr	r21
    1430:	47 95       	ror	r20
    1432:	8a 95       	dec	r24
    1434:	e2 f7       	brpl	.-8      	; 0x142e <DIO_VidGetPinValue+0x96>
    1436:	ca 01       	movw	r24, r20
    1438:	81 70       	andi	r24, 0x01	; 1
    143a:	ed 81       	ldd	r30, Y+5	; 0x05
    143c:	fe 81       	ldd	r31, Y+6	; 0x06
    143e:	80 83       	st	Z, r24
}
    1440:	28 96       	adiw	r28, 0x08	; 8
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection(u8 Copy_u8Port , u8 Copy_u8Direction)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	00 d0       	rcall	.+0      	; 0x1458 <DIO_VidSetPortDirection+0x6>
    1458:	00 d0       	rcall	.+0      	; 0x145a <DIO_VidSetPortDirection+0x8>
    145a:	00 d0       	rcall	.+0      	; 0x145c <DIO_VidSetPortDirection+0xa>
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	8b 83       	std	Y+3, r24	; 0x03
    1462:	6c 83       	std	Y+4, r22	; 0x04
	    volatile u8 *ddr_reg;

	    switch (Copy_u8Port) {
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	3e 83       	std	Y+6, r19	; 0x06
    146c:	2d 83       	std	Y+5, r18	; 0x05
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	9e 81       	ldd	r25, Y+6	; 0x06
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	91 05       	cpc	r25, r1
    1476:	d1 f0       	breq	.+52     	; 0x14ac <DIO_VidSetPortDirection+0x5a>
    1478:	2d 81       	ldd	r18, Y+5	; 0x05
    147a:	3e 81       	ldd	r19, Y+6	; 0x06
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	31 05       	cpc	r19, r1
    1480:	2c f4       	brge	.+10     	; 0x148c <DIO_VidSetPortDirection+0x3a>
    1482:	8d 81       	ldd	r24, Y+5	; 0x05
    1484:	9e 81       	ldd	r25, Y+6	; 0x06
    1486:	00 97       	sbiw	r24, 0x00	; 0
    1488:	61 f0       	breq	.+24     	; 0x14a2 <DIO_VidSetPortDirection+0x50>
    148a:	29 c0       	rjmp	.+82     	; 0x14de <DIO_VidSetPortDirection+0x8c>
    148c:	2d 81       	ldd	r18, Y+5	; 0x05
    148e:	3e 81       	ldd	r19, Y+6	; 0x06
    1490:	22 30       	cpi	r18, 0x02	; 2
    1492:	31 05       	cpc	r19, r1
    1494:	81 f0       	breq	.+32     	; 0x14b6 <DIO_VidSetPortDirection+0x64>
    1496:	8d 81       	ldd	r24, Y+5	; 0x05
    1498:	9e 81       	ldd	r25, Y+6	; 0x06
    149a:	83 30       	cpi	r24, 0x03	; 3
    149c:	91 05       	cpc	r25, r1
    149e:	81 f0       	breq	.+32     	; 0x14c0 <DIO_VidSetPortDirection+0x6e>
    14a0:	1e c0       	rjmp	.+60     	; 0x14de <DIO_VidSetPortDirection+0x8c>
	        case Port_A:
	            ddr_reg = &DDRA;
    14a2:	8a e3       	ldi	r24, 0x3A	; 58
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	9a 83       	std	Y+2, r25	; 0x02
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	0e c0       	rjmp	.+28     	; 0x14c8 <DIO_VidSetPortDirection+0x76>
	            break;
	        case Port_B:
	            ddr_reg = &DDRB;
    14ac:	87 e3       	ldi	r24, 0x37	; 55
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	9a 83       	std	Y+2, r25	; 0x02
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	09 c0       	rjmp	.+18     	; 0x14c8 <DIO_VidSetPortDirection+0x76>
	            break;
	        case Port_C:
	            ddr_reg = &DDRC;
    14b6:	84 e3       	ldi	r24, 0x34	; 52
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	9a 83       	std	Y+2, r25	; 0x02
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	04 c0       	rjmp	.+8      	; 0x14c8 <DIO_VidSetPortDirection+0x76>
	            break;
	        case Port_D:
	            ddr_reg = &DDRD;
    14c0:	81 e3       	ldi	r24, 0x31	; 49
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	9a 83       	std	Y+2, r25	; 0x02
    14c6:	89 83       	std	Y+1, r24	; 0x01
	            break;
	        default:
	            return;
	    }

	    if (Copy_u8Direction == Input) {
    14c8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ca:	88 23       	and	r24, r24
    14cc:	21 f4       	brne	.+8      	; 0x14d6 <DIO_VidSetPortDirection+0x84>
	        *ddr_reg = 0x00;
    14ce:	e9 81       	ldd	r30, Y+1	; 0x01
    14d0:	fa 81       	ldd	r31, Y+2	; 0x02
    14d2:	10 82       	st	Z, r1
    14d4:	04 c0       	rjmp	.+8      	; 0x14de <DIO_VidSetPortDirection+0x8c>
	    } else {
	        *ddr_reg = 0xff;
    14d6:	e9 81       	ldd	r30, Y+1	; 0x01
    14d8:	fa 81       	ldd	r31, Y+2	; 0x02
    14da:	8f ef       	ldi	r24, 0xFF	; 255
    14dc:	80 83       	st	Z, r24
	    }
}
    14de:	26 96       	adiw	r28, 0x06	; 6
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	f8 94       	cli
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	cd bf       	out	0x3d, r28	; 61
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <DIO_VidSetPortValue>:

void DIO_VidSetPortValue(u8 Copy_u8Port , u8 Copy_u8Value)
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <DIO_VidSetPortValue+0x6>
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <DIO_VidSetPortValue+0x8>
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port) {
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	3c 83       	std	Y+4, r19	; 0x04
    1508:	2b 83       	std	Y+3, r18	; 0x03
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	9c 81       	ldd	r25, Y+4	; 0x04
    150e:	81 30       	cpi	r24, 0x01	; 1
    1510:	91 05       	cpc	r25, r1
    1512:	d1 f0       	breq	.+52     	; 0x1548 <DIO_VidSetPortValue+0x58>
    1514:	2b 81       	ldd	r18, Y+3	; 0x03
    1516:	3c 81       	ldd	r19, Y+4	; 0x04
    1518:	22 30       	cpi	r18, 0x02	; 2
    151a:	31 05       	cpc	r19, r1
    151c:	2c f4       	brge	.+10     	; 0x1528 <DIO_VidSetPortValue+0x38>
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	61 f0       	breq	.+24     	; 0x153e <DIO_VidSetPortValue+0x4e>
    1526:	1e c0       	rjmp	.+60     	; 0x1564 <DIO_VidSetPortValue+0x74>
    1528:	2b 81       	ldd	r18, Y+3	; 0x03
    152a:	3c 81       	ldd	r19, Y+4	; 0x04
    152c:	22 30       	cpi	r18, 0x02	; 2
    152e:	31 05       	cpc	r19, r1
    1530:	81 f0       	breq	.+32     	; 0x1552 <DIO_VidSetPortValue+0x62>
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	9c 81       	ldd	r25, Y+4	; 0x04
    1536:	83 30       	cpi	r24, 0x03	; 3
    1538:	91 05       	cpc	r25, r1
    153a:	81 f0       	breq	.+32     	; 0x155c <DIO_VidSetPortValue+0x6c>
    153c:	13 c0       	rjmp	.+38     	; 0x1564 <DIO_VidSetPortValue+0x74>
	        case Port_A:
	            PORTA = Copy_u8Value;
    153e:	eb e3       	ldi	r30, 0x3B	; 59
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	80 83       	st	Z, r24
    1546:	0e c0       	rjmp	.+28     	; 0x1564 <DIO_VidSetPortValue+0x74>
	            break;
	        case Port_B:
	            PORTB = Copy_u8Value;
    1548:	e8 e3       	ldi	r30, 0x38	; 56
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	80 83       	st	Z, r24
    1550:	09 c0       	rjmp	.+18     	; 0x1564 <DIO_VidSetPortValue+0x74>
	            break;
	        case Port_C:
	            PORTC = Copy_u8Value;
    1552:	e5 e3       	ldi	r30, 0x35	; 53
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	80 83       	st	Z, r24
    155a:	04 c0       	rjmp	.+8      	; 0x1564 <DIO_VidSetPortValue+0x74>
	            break;
	        case Port_D:
	            PORTD = Copy_u8Value;
    155c:	e2 e3       	ldi	r30, 0x32	; 50
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	80 83       	st	Z, r24
	            break;
	        default:
	            return;
	    }
}
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <DIO_VidGetPortValue>:


void DIO_VidGetPortValue(u8 Copy_u8Port , u8 * pu8Data)
{
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	00 d0       	rcall	.+0      	; 0x1578 <DIO_VidGetPortValue+0x6>
    1578:	00 d0       	rcall	.+0      	; 0x157a <DIO_VidGetPortValue+0x8>
    157a:	0f 92       	push	r0
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	89 83       	std	Y+1, r24	; 0x01
    1582:	7b 83       	std	Y+3, r23	; 0x03
    1584:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	3d 83       	std	Y+5, r19	; 0x05
    158e:	2c 83       	std	Y+4, r18	; 0x04
    1590:	8c 81       	ldd	r24, Y+4	; 0x04
    1592:	9d 81       	ldd	r25, Y+5	; 0x05
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	91 05       	cpc	r25, r1
    1598:	e1 f0       	breq	.+56     	; 0x15d2 <DIO_VidGetPortValue+0x60>
    159a:	2c 81       	ldd	r18, Y+4	; 0x04
    159c:	3d 81       	ldd	r19, Y+5	; 0x05
    159e:	22 30       	cpi	r18, 0x02	; 2
    15a0:	31 05       	cpc	r19, r1
    15a2:	2c f4       	brge	.+10     	; 0x15ae <DIO_VidGetPortValue+0x3c>
    15a4:	8c 81       	ldd	r24, Y+4	; 0x04
    15a6:	9d 81       	ldd	r25, Y+5	; 0x05
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	61 f0       	breq	.+24     	; 0x15c4 <DIO_VidGetPortValue+0x52>
    15ac:	26 c0       	rjmp	.+76     	; 0x15fa <DIO_VidGetPortValue+0x88>
    15ae:	2c 81       	ldd	r18, Y+4	; 0x04
    15b0:	3d 81       	ldd	r19, Y+5	; 0x05
    15b2:	22 30       	cpi	r18, 0x02	; 2
    15b4:	31 05       	cpc	r19, r1
    15b6:	a1 f0       	breq	.+40     	; 0x15e0 <DIO_VidGetPortValue+0x6e>
    15b8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ba:	9d 81       	ldd	r25, Y+5	; 0x05
    15bc:	83 30       	cpi	r24, 0x03	; 3
    15be:	91 05       	cpc	r25, r1
    15c0:	b1 f0       	breq	.+44     	; 0x15ee <DIO_VidGetPortValue+0x7c>
    15c2:	1b c0       	rjmp	.+54     	; 0x15fa <DIO_VidGetPortValue+0x88>
	{
		case Port_A : 
			*pu8Data = PINA;
    15c4:	e9 e3       	ldi	r30, 0x39	; 57
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	ea 81       	ldd	r30, Y+2	; 0x02
    15cc:	fb 81       	ldd	r31, Y+3	; 0x03
    15ce:	80 83       	st	Z, r24
    15d0:	14 c0       	rjmp	.+40     	; 0x15fa <DIO_VidGetPortValue+0x88>
			break ;

		case Port_B : 
			*pu8Data = PINB;
    15d2:	e6 e3       	ldi	r30, 0x36	; 54
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	ea 81       	ldd	r30, Y+2	; 0x02
    15da:	fb 81       	ldd	r31, Y+3	; 0x03
    15dc:	80 83       	st	Z, r24
    15de:	0d c0       	rjmp	.+26     	; 0x15fa <DIO_VidGetPortValue+0x88>
			break ;

		case Port_C : 
			*pu8Data = PINC;
    15e0:	e3 e3       	ldi	r30, 0x33	; 51
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	ea 81       	ldd	r30, Y+2	; 0x02
    15e8:	fb 81       	ldd	r31, Y+3	; 0x03
    15ea:	80 83       	st	Z, r24
    15ec:	06 c0       	rjmp	.+12     	; 0x15fa <DIO_VidGetPortValue+0x88>
			break ;

		case Port_D : 
			*pu8Data = PIND;
    15ee:	e0 e3       	ldi	r30, 0x30	; 48
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	ea 81       	ldd	r30, Y+2	; 0x02
    15f6:	fb 81       	ldd	r31, Y+3	; 0x03
    15f8:	80 83       	st	Z, r24
			break ;
	}
}
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <GIE_VidEnable>:
#include "typedef.h"
#include "GIE_private.h"
#include "GIE_config.h"
#include "GIE_interface.h"

void GIE_VidEnable(){
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
	SETBIT(SREG,SREF_I);
    1612:	af e5       	ldi	r26, 0x5F	; 95
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	ef e5       	ldi	r30, 0x5F	; 95
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	80 68       	ori	r24, 0x80	; 128
    161e:	8c 93       	st	X, r24
}
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <GIE_VidDisable>:
void GIE_VidDisable(){
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
	CLEARBIT(SREG,SREF_I);
    162e:	af e5       	ldi	r26, 0x5F	; 95
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	ef e5       	ldi	r30, 0x5F	; 95
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	8f 77       	andi	r24, 0x7F	; 127
    163a:	8c 93       	st	X, r24
}
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <LCD_VidSendCommand>:
#include <stdlib.h>
#include <util/delay.h>

int LOC=0;
//SEND COMMAN FUNCTION
void LCD_VidSendCommand( u8 Copy_u8Command){
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	6e 97       	sbiw	r28, 0x1e	; 30
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61
    1656:	8e 8f       	std	Y+30, r24	; 0x1e

	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,Pin_Low);
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	61 e0       	ldi	r22, 0x01	; 1
    165c:	40 e0       	ldi	r20, 0x00	; 0
    165e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,Pin_Low);

#elif LCD_MODE == 4

	/* SEND 4 MSBs */
	u8 x = Copy_u8Command;
    1662:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1664:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSetPinValue(LCD_DATA_PORT, LCD_DATA_PIN0, GET_BIT(Copy_u8Command, 4));
    1666:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1668:	82 95       	swap	r24
    166a:	8f 70       	andi	r24, 0x0F	; 15
    166c:	98 2f       	mov	r25, r24
    166e:	91 70       	andi	r25, 0x01	; 1
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	63 e0       	ldi	r22, 0x03	; 3
    1674:	49 2f       	mov	r20, r25
    1676:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>
	Copy_u8Command = x;
    167a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    167c:	8e 8f       	std	Y+30, r24	; 0x1e
	DIO_VidSetPinValue(LCD_DATA_PORT, LCD_DATA_PIN1, GET_BIT(Copy_u8Command, 5));
    167e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1680:	82 95       	swap	r24
    1682:	86 95       	lsr	r24
    1684:	87 70       	andi	r24, 0x07	; 7
    1686:	98 2f       	mov	r25, r24
    1688:	91 70       	andi	r25, 0x01	; 1
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	64 e0       	ldi	r22, 0x04	; 4
    168e:	49 2f       	mov	r20, r25
    1690:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>
	Copy_u8Command = x;
    1694:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1696:	8e 8f       	std	Y+30, r24	; 0x1e
	DIO_VidSetPinValue(LCD_DATA_PORT, LCD_DATA_PIN2, GET_BIT(Copy_u8Command, 6));
    1698:	8e 8d       	ldd	r24, Y+30	; 0x1e
    169a:	82 95       	swap	r24
    169c:	86 95       	lsr	r24
    169e:	86 95       	lsr	r24
    16a0:	83 70       	andi	r24, 0x03	; 3
    16a2:	98 2f       	mov	r25, r24
    16a4:	91 70       	andi	r25, 0x01	; 1
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	65 e0       	ldi	r22, 0x05	; 5
    16aa:	49 2f       	mov	r20, r25
    16ac:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>
	Copy_u8Command = x;
    16b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16b2:	8e 8f       	std	Y+30, r24	; 0x1e
	DIO_VidSetPinValue(LCD_DATA_PORT, LCD_DATA_PIN3, GET_BIT(Copy_u8Command, 7));
    16b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16b6:	98 2f       	mov	r25, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	99 27       	eor	r25, r25
    16bc:	99 1f       	adc	r25, r25
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	66 e0       	ldi	r22, 0x06	; 6
    16c2:	49 2f       	mov	r20, r25
    16c4:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>

	//E HIGH  -->  ENABLE
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,Pin_High);
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	62 e0       	ldi	r22, 0x02	; 2
    16cc:	41 e0       	ldi	r20, 0x01	; 1
    16ce:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	a0 e0       	ldi	r26, 0x00	; 0
    16d8:	b0 e4       	ldi	r27, 0x40	; 64
    16da:	89 8f       	std	Y+25, r24	; 0x19
    16dc:	9a 8f       	std	Y+26, r25	; 0x1a
    16de:	ab 8f       	std	Y+27, r26	; 0x1b
    16e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e2:	69 8d       	ldd	r22, Y+25	; 0x19
    16e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	4a e7       	ldi	r20, 0x7A	; 122
    16f0:	55 e4       	ldi	r21, 0x45	; 69
    16f2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	8d 8b       	std	Y+21, r24	; 0x15
    16fc:	9e 8b       	std	Y+22, r25	; 0x16
    16fe:	af 8b       	std	Y+23, r26	; 0x17
    1700:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1702:	6d 89       	ldd	r22, Y+21	; 0x15
    1704:	7e 89       	ldd	r23, Y+22	; 0x16
    1706:	8f 89       	ldd	r24, Y+23	; 0x17
    1708:	98 8d       	ldd	r25, Y+24	; 0x18
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	40 e8       	ldi	r20, 0x80	; 128
    1710:	5f e3       	ldi	r21, 0x3F	; 63
    1712:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1716:	88 23       	and	r24, r24
    1718:	2c f4       	brge	.+10     	; 0x1724 <LCD_VidSendCommand+0xe2>
		__ticks = 1;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	9c 8b       	std	Y+20, r25	; 0x14
    1720:	8b 8b       	std	Y+19, r24	; 0x13
    1722:	3f c0       	rjmp	.+126    	; 0x17a2 <LCD_VidSendCommand+0x160>
	else if (__tmp > 65535)
    1724:	6d 89       	ldd	r22, Y+21	; 0x15
    1726:	7e 89       	ldd	r23, Y+22	; 0x16
    1728:	8f 89       	ldd	r24, Y+23	; 0x17
    172a:	98 8d       	ldd	r25, Y+24	; 0x18
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	3f ef       	ldi	r19, 0xFF	; 255
    1730:	4f e7       	ldi	r20, 0x7F	; 127
    1732:	57 e4       	ldi	r21, 0x47	; 71
    1734:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1738:	18 16       	cp	r1, r24
    173a:	4c f5       	brge	.+82     	; 0x178e <LCD_VidSendCommand+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173c:	69 8d       	ldd	r22, Y+25	; 0x19
    173e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1740:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1742:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e2       	ldi	r20, 0x20	; 32
    174a:	51 e4       	ldi	r21, 0x41	; 65
    174c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	bc 01       	movw	r22, r24
    1756:	cd 01       	movw	r24, r26
    1758:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	9c 8b       	std	Y+20, r25	; 0x14
    1762:	8b 8b       	std	Y+19, r24	; 0x13
    1764:	0f c0       	rjmp	.+30     	; 0x1784 <LCD_VidSendCommand+0x142>
    1766:	80 e9       	ldi	r24, 0x90	; 144
    1768:	91 e0       	ldi	r25, 0x01	; 1
    176a:	9a 8b       	std	Y+18, r25	; 0x12
    176c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    176e:	89 89       	ldd	r24, Y+17	; 0x11
    1770:	9a 89       	ldd	r25, Y+18	; 0x12
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	f1 f7       	brne	.-4      	; 0x1772 <LCD_VidSendCommand+0x130>
    1776:	9a 8b       	std	Y+18, r25	; 0x12
    1778:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177a:	8b 89       	ldd	r24, Y+19	; 0x13
    177c:	9c 89       	ldd	r25, Y+20	; 0x14
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	9c 8b       	std	Y+20, r25	; 0x14
    1782:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1784:	8b 89       	ldd	r24, Y+19	; 0x13
    1786:	9c 89       	ldd	r25, Y+20	; 0x14
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	69 f7       	brne	.-38     	; 0x1766 <LCD_VidSendCommand+0x124>
    178c:	14 c0       	rjmp	.+40     	; 0x17b6 <LCD_VidSendCommand+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    178e:	6d 89       	ldd	r22, Y+21	; 0x15
    1790:	7e 89       	ldd	r23, Y+22	; 0x16
    1792:	8f 89       	ldd	r24, Y+23	; 0x17
    1794:	98 8d       	ldd	r25, Y+24	; 0x18
    1796:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	9c 8b       	std	Y+20, r25	; 0x14
    17a0:	8b 8b       	std	Y+19, r24	; 0x13
    17a2:	8b 89       	ldd	r24, Y+19	; 0x13
    17a4:	9c 89       	ldd	r25, Y+20	; 0x14
    17a6:	98 8b       	std	Y+16, r25	; 0x10
    17a8:	8f 87       	std	Y+15, r24	; 0x0f
    17aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ac:	98 89       	ldd	r25, Y+16	; 0x10
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	f1 f7       	brne	.-4      	; 0x17ae <LCD_VidSendCommand+0x16c>
    17b2:	98 8b       	std	Y+16, r25	; 0x10
    17b4:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(2);

	//E LOW  -->  UNENABLE
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,Pin_Low);
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	62 e0       	ldi	r22, 0x02	; 2
    17ba:	40 e0       	ldi	r20, 0x00	; 0
    17bc:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>

	                //--------------------------//

	/* SEND 4 LSBs */
	Copy_u8Command = x;
    17c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17c2:	8e 8f       	std	Y+30, r24	; 0x1e
	DIO_VidSetPinValue(LCD_DATA_PORT, LCD_DATA_PIN0, GET_BIT(Copy_u8Command, 0));
    17c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17c6:	98 2f       	mov	r25, r24
    17c8:	91 70       	andi	r25, 0x01	; 1
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	63 e0       	ldi	r22, 0x03	; 3
    17ce:	49 2f       	mov	r20, r25
    17d0:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>
	Copy_u8Command = x;
    17d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17d6:	8e 8f       	std	Y+30, r24	; 0x1e
	DIO_VidSetPinValue(LCD_DATA_PORT, LCD_DATA_PIN1, GET_BIT(Copy_u8Command, 1));
    17d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17da:	86 95       	lsr	r24
    17dc:	98 2f       	mov	r25, r24
    17de:	91 70       	andi	r25, 0x01	; 1
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	64 e0       	ldi	r22, 0x04	; 4
    17e4:	49 2f       	mov	r20, r25
    17e6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>
	Copy_u8Command = x;
    17ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ec:	8e 8f       	std	Y+30, r24	; 0x1e
	DIO_VidSetPinValue(LCD_DATA_PORT, LCD_DATA_PIN2, GET_BIT(Copy_u8Command, 2));
    17ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17f0:	86 95       	lsr	r24
    17f2:	86 95       	lsr	r24
    17f4:	98 2f       	mov	r25, r24
    17f6:	91 70       	andi	r25, 0x01	; 1
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	65 e0       	ldi	r22, 0x05	; 5
    17fc:	49 2f       	mov	r20, r25
    17fe:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>
	Copy_u8Command = x;
    1802:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1804:	8e 8f       	std	Y+30, r24	; 0x1e
	DIO_VidSetPinValue(LCD_DATA_PORT, LCD_DATA_PIN3, GET_BIT(Copy_u8Command, 3));
    1806:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1808:	86 95       	lsr	r24
    180a:	86 95       	lsr	r24
    180c:	86 95       	lsr	r24
    180e:	98 2f       	mov	r25, r24
    1810:	91 70       	andi	r25, 0x01	; 1
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	66 e0       	ldi	r22, 0x06	; 6
    1816:	49 2f       	mov	r20, r25
    1818:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>


	//E HIGH  -->  ENABLE
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,Pin_High);
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	62 e0       	ldi	r22, 0x02	; 2
    1820:	41 e0       	ldi	r20, 0x01	; 1
    1822:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	a0 e0       	ldi	r26, 0x00	; 0
    182c:	b0 e4       	ldi	r27, 0x40	; 64
    182e:	8b 87       	std	Y+11, r24	; 0x0b
    1830:	9c 87       	std	Y+12, r25	; 0x0c
    1832:	ad 87       	std	Y+13, r26	; 0x0d
    1834:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1836:	6b 85       	ldd	r22, Y+11	; 0x0b
    1838:	7c 85       	ldd	r23, Y+12	; 0x0c
    183a:	8d 85       	ldd	r24, Y+13	; 0x0d
    183c:	9e 85       	ldd	r25, Y+14	; 0x0e
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	4a e7       	ldi	r20, 0x7A	; 122
    1844:	55 e4       	ldi	r21, 0x45	; 69
    1846:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	8f 83       	std	Y+7, r24	; 0x07
    1850:	98 87       	std	Y+8, r25	; 0x08
    1852:	a9 87       	std	Y+9, r26	; 0x09
    1854:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1856:	6f 81       	ldd	r22, Y+7	; 0x07
    1858:	78 85       	ldd	r23, Y+8	; 0x08
    185a:	89 85       	ldd	r24, Y+9	; 0x09
    185c:	9a 85       	ldd	r25, Y+10	; 0x0a
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e8       	ldi	r20, 0x80	; 128
    1864:	5f e3       	ldi	r21, 0x3F	; 63
    1866:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    186a:	88 23       	and	r24, r24
    186c:	2c f4       	brge	.+10     	; 0x1878 <LCD_VidSendCommand+0x236>
		__ticks = 1;
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	9e 83       	std	Y+6, r25	; 0x06
    1874:	8d 83       	std	Y+5, r24	; 0x05
    1876:	3f c0       	rjmp	.+126    	; 0x18f6 <LCD_VidSendCommand+0x2b4>
	else if (__tmp > 65535)
    1878:	6f 81       	ldd	r22, Y+7	; 0x07
    187a:	78 85       	ldd	r23, Y+8	; 0x08
    187c:	89 85       	ldd	r24, Y+9	; 0x09
    187e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	3f ef       	ldi	r19, 0xFF	; 255
    1884:	4f e7       	ldi	r20, 0x7F	; 127
    1886:	57 e4       	ldi	r21, 0x47	; 71
    1888:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    188c:	18 16       	cp	r1, r24
    188e:	4c f5       	brge	.+82     	; 0x18e2 <LCD_VidSendCommand+0x2a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1890:	6b 85       	ldd	r22, Y+11	; 0x0b
    1892:	7c 85       	ldd	r23, Y+12	; 0x0c
    1894:	8d 85       	ldd	r24, Y+13	; 0x0d
    1896:	9e 85       	ldd	r25, Y+14	; 0x0e
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e2       	ldi	r20, 0x20	; 32
    189e:	51 e4       	ldi	r21, 0x41	; 65
    18a0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	bc 01       	movw	r22, r24
    18aa:	cd 01       	movw	r24, r26
    18ac:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	9e 83       	std	Y+6, r25	; 0x06
    18b6:	8d 83       	std	Y+5, r24	; 0x05
    18b8:	0f c0       	rjmp	.+30     	; 0x18d8 <LCD_VidSendCommand+0x296>
    18ba:	80 e9       	ldi	r24, 0x90	; 144
    18bc:	91 e0       	ldi	r25, 0x01	; 1
    18be:	9c 83       	std	Y+4, r25	; 0x04
    18c0:	8b 83       	std	Y+3, r24	; 0x03
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	9c 81       	ldd	r25, Y+4	; 0x04
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <LCD_VidSendCommand+0x284>
    18ca:	9c 83       	std	Y+4, r25	; 0x04
    18cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ce:	8d 81       	ldd	r24, Y+5	; 0x05
    18d0:	9e 81       	ldd	r25, Y+6	; 0x06
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	9e 83       	std	Y+6, r25	; 0x06
    18d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d8:	8d 81       	ldd	r24, Y+5	; 0x05
    18da:	9e 81       	ldd	r25, Y+6	; 0x06
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	69 f7       	brne	.-38     	; 0x18ba <LCD_VidSendCommand+0x278>
    18e0:	14 c0       	rjmp	.+40     	; 0x190a <LCD_VidSendCommand+0x2c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e2:	6f 81       	ldd	r22, Y+7	; 0x07
    18e4:	78 85       	ldd	r23, Y+8	; 0x08
    18e6:	89 85       	ldd	r24, Y+9	; 0x09
    18e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ea:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	9e 83       	std	Y+6, r25	; 0x06
    18f4:	8d 83       	std	Y+5, r24	; 0x05
    18f6:	8d 81       	ldd	r24, Y+5	; 0x05
    18f8:	9e 81       	ldd	r25, Y+6	; 0x06
    18fa:	9a 83       	std	Y+2, r25	; 0x02
    18fc:	89 83       	std	Y+1, r24	; 0x01
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	9a 81       	ldd	r25, Y+2	; 0x02
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	f1 f7       	brne	.-4      	; 0x1902 <LCD_VidSendCommand+0x2c0>
    1906:	9a 83       	std	Y+2, r25	; 0x02
    1908:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	//E LOW  -->  UNENABLE
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,Pin_Low);
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	62 e0       	ldi	r22, 0x02	; 2
    190e:	40 e0       	ldi	r20, 0x00	; 0
    1910:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>

#endif

}
    1914:	6e 96       	adiw	r28, 0x1e	; 30
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <LCD_VidSendData>:


//SEND DATA FUNCTION
void LCD_VidSendData( u8 Copy_u8Data){
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	ac 97       	sbiw	r28, 0x2c	; 44
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	8c a7       	std	Y+44, r24	; 0x2c
	//E LOW  -->  UNENABLE
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,Pin_Low);

#elif LCD_MODE == 4

	if(LOC == 16)
    193c:	80 91 96 01 	lds	r24, 0x0196
    1940:	90 91 97 01 	lds	r25, 0x0197
    1944:	80 31       	cpi	r24, 0x10	; 16
    1946:	91 05       	cpc	r25, r1
    1948:	21 f4       	brne	.+8      	; 0x1952 <LCD_VidSendData+0x2c>
		LCD_VidSendCommand(LCD_FORCE_START_LOCATION|LCD_SEGMENT_1_OF_ROW_1);
    194a:	80 ec       	ldi	r24, 0xC0	; 192
    194c:	0e 94 21 0b 	call	0x1642	; 0x1642 <LCD_VidSendCommand>
    1950:	83 c0       	rjmp	.+262    	; 0x1a58 <LCD_VidSendData+0x132>
	else if(LOC == 32){
    1952:	80 91 96 01 	lds	r24, 0x0196
    1956:	90 91 97 01 	lds	r25, 0x0197
    195a:	80 32       	cpi	r24, 0x20	; 32
    195c:	91 05       	cpc	r25, r1
    195e:	09 f0       	breq	.+2      	; 0x1962 <LCD_VidSendData+0x3c>
    1960:	7b c0       	rjmp	.+246    	; 0x1a58 <LCD_VidSendData+0x132>
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	90 e4       	ldi	r25, 0x40	; 64
    1966:	ac e1       	ldi	r26, 0x1C	; 28
    1968:	b6 e4       	ldi	r27, 0x46	; 70
    196a:	8f a3       	std	Y+39, r24	; 0x27
    196c:	98 a7       	std	Y+40, r25	; 0x28
    196e:	a9 a7       	std	Y+41, r26	; 0x29
    1970:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1972:	6f a1       	ldd	r22, Y+39	; 0x27
    1974:	78 a5       	ldd	r23, Y+40	; 0x28
    1976:	89 a5       	ldd	r24, Y+41	; 0x29
    1978:	9a a5       	ldd	r25, Y+42	; 0x2a
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	4a e7       	ldi	r20, 0x7A	; 122
    1980:	55 e4       	ldi	r21, 0x45	; 69
    1982:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	8b a3       	std	Y+35, r24	; 0x23
    198c:	9c a3       	std	Y+36, r25	; 0x24
    198e:	ad a3       	std	Y+37, r26	; 0x25
    1990:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1992:	6b a1       	ldd	r22, Y+35	; 0x23
    1994:	7c a1       	ldd	r23, Y+36	; 0x24
    1996:	8d a1       	ldd	r24, Y+37	; 0x25
    1998:	9e a1       	ldd	r25, Y+38	; 0x26
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	40 e8       	ldi	r20, 0x80	; 128
    19a0:	5f e3       	ldi	r21, 0x3F	; 63
    19a2:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    19a6:	88 23       	and	r24, r24
    19a8:	2c f4       	brge	.+10     	; 0x19b4 <LCD_VidSendData+0x8e>
		__ticks = 1;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	9a a3       	std	Y+34, r25	; 0x22
    19b0:	89 a3       	std	Y+33, r24	; 0x21
    19b2:	3f c0       	rjmp	.+126    	; 0x1a32 <LCD_VidSendData+0x10c>
	else if (__tmp > 65535)
    19b4:	6b a1       	ldd	r22, Y+35	; 0x23
    19b6:	7c a1       	ldd	r23, Y+36	; 0x24
    19b8:	8d a1       	ldd	r24, Y+37	; 0x25
    19ba:	9e a1       	ldd	r25, Y+38	; 0x26
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	3f ef       	ldi	r19, 0xFF	; 255
    19c0:	4f e7       	ldi	r20, 0x7F	; 127
    19c2:	57 e4       	ldi	r21, 0x47	; 71
    19c4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    19c8:	18 16       	cp	r1, r24
    19ca:	4c f5       	brge	.+82     	; 0x1a1e <LCD_VidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19cc:	6f a1       	ldd	r22, Y+39	; 0x27
    19ce:	78 a5       	ldd	r23, Y+40	; 0x28
    19d0:	89 a5       	ldd	r24, Y+41	; 0x29
    19d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e2       	ldi	r20, 0x20	; 32
    19da:	51 e4       	ldi	r21, 0x41	; 65
    19dc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	bc 01       	movw	r22, r24
    19e6:	cd 01       	movw	r24, r26
    19e8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	9a a3       	std	Y+34, r25	; 0x22
    19f2:	89 a3       	std	Y+33, r24	; 0x21
    19f4:	0f c0       	rjmp	.+30     	; 0x1a14 <LCD_VidSendData+0xee>
    19f6:	80 e9       	ldi	r24, 0x90	; 144
    19f8:	91 e0       	ldi	r25, 0x01	; 1
    19fa:	98 a3       	std	Y+32, r25	; 0x20
    19fc:	8f 8f       	std	Y+31, r24	; 0x1f
    19fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a00:	98 a1       	ldd	r25, Y+32	; 0x20
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <LCD_VidSendData+0xdc>
    1a06:	98 a3       	std	Y+32, r25	; 0x20
    1a08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	9a a3       	std	Y+34, r25	; 0x22
    1a12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a14:	89 a1       	ldd	r24, Y+33	; 0x21
    1a16:	9a a1       	ldd	r25, Y+34	; 0x22
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	69 f7       	brne	.-38     	; 0x19f6 <LCD_VidSendData+0xd0>
    1a1c:	14 c0       	rjmp	.+40     	; 0x1a46 <LCD_VidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a20:	7c a1       	ldd	r23, Y+36	; 0x24
    1a22:	8d a1       	ldd	r24, Y+37	; 0x25
    1a24:	9e a1       	ldd	r25, Y+38	; 0x26
    1a26:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	9a a3       	std	Y+34, r25	; 0x22
    1a30:	89 a3       	std	Y+33, r24	; 0x21
    1a32:	89 a1       	ldd	r24, Y+33	; 0x21
    1a34:	9a a1       	ldd	r25, Y+34	; 0x22
    1a36:	9e 8f       	std	Y+30, r25	; 0x1e
    1a38:	8d 8f       	std	Y+29, r24	; 0x1d
    1a3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <LCD_VidSendData+0x118>
    1a42:	9e 8f       	std	Y+30, r25	; 0x1e
    1a44:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10000);
		LCD_VidSendCommand(LCD_CLEAR);
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	0e 94 21 0b 	call	0x1642	; 0x1642 <LCD_VidSendCommand>
		LOC = -1;
    1a4c:	8f ef       	ldi	r24, 0xFF	; 255
    1a4e:	9f ef       	ldi	r25, 0xFF	; 255
    1a50:	90 93 97 01 	sts	0x0197, r25
    1a54:	80 93 96 01 	sts	0x0196, r24
	}
	LOC++;
    1a58:	80 91 96 01 	lds	r24, 0x0196
    1a5c:	90 91 97 01 	lds	r25, 0x0197
    1a60:	01 96       	adiw	r24, 0x01	; 1
    1a62:	90 93 97 01 	sts	0x0197, r25
    1a66:	80 93 96 01 	sts	0x0196, r24

	//RS LOW  -->  SEND DATA
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,Pin_High);
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	61 e0       	ldi	r22, 0x01	; 1
    1a6e:	41 e0       	ldi	r20, 0x01	; 1
    1a70:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>

	/* SEND 4 MSBs */
	u8 x = Copy_u8Data;
    1a74:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a76:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_VidSetPinValue(LCD_DATA_PORT, LCD_DATA_PIN0, GET_BIT(Copy_u8Data, 4));
    1a78:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a7a:	82 95       	swap	r24
    1a7c:	8f 70       	andi	r24, 0x0F	; 15
    1a7e:	98 2f       	mov	r25, r24
    1a80:	91 70       	andi	r25, 0x01	; 1
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	63 e0       	ldi	r22, 0x03	; 3
    1a86:	49 2f       	mov	r20, r25
    1a88:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>
	Copy_u8Data = x;
    1a8c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a8e:	8c a7       	std	Y+44, r24	; 0x2c
	DIO_VidSetPinValue(LCD_DATA_PORT, LCD_DATA_PIN1, GET_BIT(Copy_u8Data, 5));
    1a90:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a92:	82 95       	swap	r24
    1a94:	86 95       	lsr	r24
    1a96:	87 70       	andi	r24, 0x07	; 7
    1a98:	98 2f       	mov	r25, r24
    1a9a:	91 70       	andi	r25, 0x01	; 1
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	64 e0       	ldi	r22, 0x04	; 4
    1aa0:	49 2f       	mov	r20, r25
    1aa2:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>
	Copy_u8Data = x;
    1aa6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1aa8:	8c a7       	std	Y+44, r24	; 0x2c
	DIO_VidSetPinValue(LCD_DATA_PORT, LCD_DATA_PIN2, GET_BIT(Copy_u8Data, 6));
    1aaa:	8c a5       	ldd	r24, Y+44	; 0x2c
    1aac:	82 95       	swap	r24
    1aae:	86 95       	lsr	r24
    1ab0:	86 95       	lsr	r24
    1ab2:	83 70       	andi	r24, 0x03	; 3
    1ab4:	98 2f       	mov	r25, r24
    1ab6:	91 70       	andi	r25, 0x01	; 1
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	65 e0       	ldi	r22, 0x05	; 5
    1abc:	49 2f       	mov	r20, r25
    1abe:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>
	Copy_u8Data = x;
    1ac2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ac4:	8c a7       	std	Y+44, r24	; 0x2c
	DIO_VidSetPinValue(LCD_DATA_PORT, LCD_DATA_PIN3, GET_BIT(Copy_u8Data, 7));
    1ac6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ac8:	98 2f       	mov	r25, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	99 27       	eor	r25, r25
    1ace:	99 1f       	adc	r25, r25
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	66 e0       	ldi	r22, 0x06	; 6
    1ad4:	49 2f       	mov	r20, r25
    1ad6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>

	//E HIGH  -->  ENABLE
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,Pin_High);
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	62 e0       	ldi	r22, 0x02	; 2
    1ade:	41 e0       	ldi	r20, 0x01	; 1
    1ae0:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a0 e0       	ldi	r26, 0x00	; 0
    1aea:	b0 e4       	ldi	r27, 0x40	; 64
    1aec:	89 8f       	std	Y+25, r24	; 0x19
    1aee:	9a 8f       	std	Y+26, r25	; 0x1a
    1af0:	ab 8f       	std	Y+27, r26	; 0x1b
    1af2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af4:	69 8d       	ldd	r22, Y+25	; 0x19
    1af6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1afa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	4a e7       	ldi	r20, 0x7A	; 122
    1b02:	55 e4       	ldi	r21, 0x45	; 69
    1b04:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	8d 8b       	std	Y+21, r24	; 0x15
    1b0e:	9e 8b       	std	Y+22, r25	; 0x16
    1b10:	af 8b       	std	Y+23, r26	; 0x17
    1b12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b14:	6d 89       	ldd	r22, Y+21	; 0x15
    1b16:	7e 89       	ldd	r23, Y+22	; 0x16
    1b18:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e8       	ldi	r20, 0x80	; 128
    1b22:	5f e3       	ldi	r21, 0x3F	; 63
    1b24:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1b28:	88 23       	and	r24, r24
    1b2a:	2c f4       	brge	.+10     	; 0x1b36 <LCD_VidSendData+0x210>
		__ticks = 1;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	9c 8b       	std	Y+20, r25	; 0x14
    1b32:	8b 8b       	std	Y+19, r24	; 0x13
    1b34:	3f c0       	rjmp	.+126    	; 0x1bb4 <LCD_VidSendData+0x28e>
	else if (__tmp > 65535)
    1b36:	6d 89       	ldd	r22, Y+21	; 0x15
    1b38:	7e 89       	ldd	r23, Y+22	; 0x16
    1b3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	3f ef       	ldi	r19, 0xFF	; 255
    1b42:	4f e7       	ldi	r20, 0x7F	; 127
    1b44:	57 e4       	ldi	r21, 0x47	; 71
    1b46:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1b4a:	18 16       	cp	r1, r24
    1b4c:	4c f5       	brge	.+82     	; 0x1ba0 <LCD_VidSendData+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e2       	ldi	r20, 0x20	; 32
    1b5c:	51 e4       	ldi	r21, 0x41	; 65
    1b5e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	bc 01       	movw	r22, r24
    1b68:	cd 01       	movw	r24, r26
    1b6a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	9c 8b       	std	Y+20, r25	; 0x14
    1b74:	8b 8b       	std	Y+19, r24	; 0x13
    1b76:	0f c0       	rjmp	.+30     	; 0x1b96 <LCD_VidSendData+0x270>
    1b78:	80 e9       	ldi	r24, 0x90	; 144
    1b7a:	91 e0       	ldi	r25, 0x01	; 1
    1b7c:	9a 8b       	std	Y+18, r25	; 0x12
    1b7e:	89 8b       	std	Y+17, r24	; 0x11
    1b80:	89 89       	ldd	r24, Y+17	; 0x11
    1b82:	9a 89       	ldd	r25, Y+18	; 0x12
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <LCD_VidSendData+0x25e>
    1b88:	9a 8b       	std	Y+18, r25	; 0x12
    1b8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	9c 8b       	std	Y+20, r25	; 0x14
    1b94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b96:	8b 89       	ldd	r24, Y+19	; 0x13
    1b98:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	69 f7       	brne	.-38     	; 0x1b78 <LCD_VidSendData+0x252>
    1b9e:	14 c0       	rjmp	.+40     	; 0x1bc8 <LCD_VidSendData+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	9c 8b       	std	Y+20, r25	; 0x14
    1bb2:	8b 8b       	std	Y+19, r24	; 0x13
    1bb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb8:	98 8b       	std	Y+16, r25	; 0x10
    1bba:	8f 87       	std	Y+15, r24	; 0x0f
    1bbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bbe:	98 89       	ldd	r25, Y+16	; 0x10
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <LCD_VidSendData+0x29a>
    1bc4:	98 8b       	std	Y+16, r25	; 0x10
    1bc6:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(2);

	//E LOW  -->  UNENABLE
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,Pin_Low);
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	62 e0       	ldi	r22, 0x02	; 2
    1bcc:	40 e0       	ldi	r20, 0x00	; 0
    1bce:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>

	                //--------------------------//

	/* SEND 4 LSBs */
	Copy_u8Data = x;
    1bd2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bd4:	8c a7       	std	Y+44, r24	; 0x2c
	DIO_VidSetPinValue(LCD_DATA_PORT, LCD_DATA_PIN0, GET_BIT(Copy_u8Data, 0));
    1bd6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bd8:	98 2f       	mov	r25, r24
    1bda:	91 70       	andi	r25, 0x01	; 1
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	63 e0       	ldi	r22, 0x03	; 3
    1be0:	49 2f       	mov	r20, r25
    1be2:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>
	Copy_u8Data = x;
    1be6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1be8:	8c a7       	std	Y+44, r24	; 0x2c
	DIO_VidSetPinValue(LCD_DATA_PORT, LCD_DATA_PIN1, GET_BIT(Copy_u8Data, 1));
    1bea:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bec:	86 95       	lsr	r24
    1bee:	98 2f       	mov	r25, r24
    1bf0:	91 70       	andi	r25, 0x01	; 1
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	64 e0       	ldi	r22, 0x04	; 4
    1bf6:	49 2f       	mov	r20, r25
    1bf8:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>
	Copy_u8Data = x;
    1bfc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bfe:	8c a7       	std	Y+44, r24	; 0x2c
	DIO_VidSetPinValue(LCD_DATA_PORT, LCD_DATA_PIN2, GET_BIT(Copy_u8Data, 2));
    1c00:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c02:	86 95       	lsr	r24
    1c04:	86 95       	lsr	r24
    1c06:	98 2f       	mov	r25, r24
    1c08:	91 70       	andi	r25, 0x01	; 1
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	65 e0       	ldi	r22, 0x05	; 5
    1c0e:	49 2f       	mov	r20, r25
    1c10:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>
	Copy_u8Data = x;
    1c14:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c16:	8c a7       	std	Y+44, r24	; 0x2c
	DIO_VidSetPinValue(LCD_DATA_PORT, LCD_DATA_PIN3, GET_BIT(Copy_u8Data, 3));
    1c18:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c1a:	86 95       	lsr	r24
    1c1c:	86 95       	lsr	r24
    1c1e:	86 95       	lsr	r24
    1c20:	98 2f       	mov	r25, r24
    1c22:	91 70       	andi	r25, 0x01	; 1
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	66 e0       	ldi	r22, 0x06	; 6
    1c28:	49 2f       	mov	r20, r25
    1c2a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>

	//E HIGH  -->  ENABLE
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,Pin_High);
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	62 e0       	ldi	r22, 0x02	; 2
    1c32:	41 e0       	ldi	r20, 0x01	; 1
    1c34:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	a0 e0       	ldi	r26, 0x00	; 0
    1c3e:	b0 e4       	ldi	r27, 0x40	; 64
    1c40:	8b 87       	std	Y+11, r24	; 0x0b
    1c42:	9c 87       	std	Y+12, r25	; 0x0c
    1c44:	ad 87       	std	Y+13, r26	; 0x0d
    1c46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	4a e7       	ldi	r20, 0x7A	; 122
    1c56:	55 e4       	ldi	r21, 0x45	; 69
    1c58:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	8f 83       	std	Y+7, r24	; 0x07
    1c62:	98 87       	std	Y+8, r25	; 0x08
    1c64:	a9 87       	std	Y+9, r26	; 0x09
    1c66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c68:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6a:	78 85       	ldd	r23, Y+8	; 0x08
    1c6c:	89 85       	ldd	r24, Y+9	; 0x09
    1c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	40 e8       	ldi	r20, 0x80	; 128
    1c76:	5f e3       	ldi	r21, 0x3F	; 63
    1c78:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1c7c:	88 23       	and	r24, r24
    1c7e:	2c f4       	brge	.+10     	; 0x1c8a <LCD_VidSendData+0x364>
		__ticks = 1;
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	9e 83       	std	Y+6, r25	; 0x06
    1c86:	8d 83       	std	Y+5, r24	; 0x05
    1c88:	3f c0       	rjmp	.+126    	; 0x1d08 <LCD_VidSendData+0x3e2>
	else if (__tmp > 65535)
    1c8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8c:	78 85       	ldd	r23, Y+8	; 0x08
    1c8e:	89 85       	ldd	r24, Y+9	; 0x09
    1c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	3f ef       	ldi	r19, 0xFF	; 255
    1c96:	4f e7       	ldi	r20, 0x7F	; 127
    1c98:	57 e4       	ldi	r21, 0x47	; 71
    1c9a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1c9e:	18 16       	cp	r1, r24
    1ca0:	4c f5       	brge	.+82     	; 0x1cf4 <LCD_VidSendData+0x3ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e2       	ldi	r20, 0x20	; 32
    1cb0:	51 e4       	ldi	r21, 0x41	; 65
    1cb2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	bc 01       	movw	r22, r24
    1cbc:	cd 01       	movw	r24, r26
    1cbe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	9e 83       	std	Y+6, r25	; 0x06
    1cc8:	8d 83       	std	Y+5, r24	; 0x05
    1cca:	0f c0       	rjmp	.+30     	; 0x1cea <LCD_VidSendData+0x3c4>
    1ccc:	80 e9       	ldi	r24, 0x90	; 144
    1cce:	91 e0       	ldi	r25, 0x01	; 1
    1cd0:	9c 83       	std	Y+4, r25	; 0x04
    1cd2:	8b 83       	std	Y+3, r24	; 0x03
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	f1 f7       	brne	.-4      	; 0x1cd8 <LCD_VidSendData+0x3b2>
    1cdc:	9c 83       	std	Y+4, r25	; 0x04
    1cde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	9e 83       	std	Y+6, r25	; 0x06
    1ce8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cea:	8d 81       	ldd	r24, Y+5	; 0x05
    1cec:	9e 81       	ldd	r25, Y+6	; 0x06
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	69 f7       	brne	.-38     	; 0x1ccc <LCD_VidSendData+0x3a6>
    1cf2:	14 c0       	rjmp	.+40     	; 0x1d1c <LCD_VidSendData+0x3f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf6:	78 85       	ldd	r23, Y+8	; 0x08
    1cf8:	89 85       	ldd	r24, Y+9	; 0x09
    1cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	9e 83       	std	Y+6, r25	; 0x06
    1d06:	8d 83       	std	Y+5, r24	; 0x05
    1d08:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0c:	9a 83       	std	Y+2, r25	; 0x02
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	9a 81       	ldd	r25, Y+2	; 0x02
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <LCD_VidSendData+0x3ee>
    1d18:	9a 83       	std	Y+2, r25	; 0x02
    1d1a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	//E LOW  -->  UNENABLE
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,Pin_Low);
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	62 e0       	ldi	r22, 0x02	; 2
    1d20:	40 e0       	ldi	r20, 0x00	; 0
    1d22:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>

#endif

}
    1d26:	ac 96       	adiw	r28, 0x2c	; 44
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <LCD_VidInit>:


//INITIALIZATION FUNCTION
void LCD_VidInit(){
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	aa 97       	sbiw	r28, 0x2a	; 42
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61

	//SET PIN RS DIRECTION TO BE OUTPUT
	DIO_VidSetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,Output);
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	61 e0       	ldi	r22, 0x01	; 1
    1d50:	41 e0       	ldi	r20, 0x01	; 1
    1d52:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_VidSetPinDirection>

	//SET PIN E DIRECTION TO BE OUTPUT
	DIO_VidSetPinDirection(LCD_CTRL_PORT,LCD_E_PIN,Output);
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	62 e0       	ldi	r22, 0x02	; 2
    1d5a:	41 e0       	ldi	r20, 0x01	; 1
    1d5c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_VidSetPinDirection>
	LCD_VidSendCommand(LCD_CLEAR);

#elif LCD_MODE == 4

	//SET MSBs OF PORT A DIRECTION TO BE OUTPUT
	DIO_VidSetPinDirection(LCD_DATA_PORT, LCD_DATA_PIN0, Output);
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	63 e0       	ldi	r22, 0x03	; 3
    1d64:	41 e0       	ldi	r20, 0x01	; 1
    1d66:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_DATA_PORT, LCD_DATA_PIN1, Output);
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	64 e0       	ldi	r22, 0x04	; 4
    1d6e:	41 e0       	ldi	r20, 0x01	; 1
    1d70:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_DATA_PORT, LCD_DATA_PIN2, Output);
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	65 e0       	ldi	r22, 0x05	; 5
    1d78:	41 e0       	ldi	r20, 0x01	; 1
    1d7a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_DATA_PORT, LCD_DATA_PIN3, Output);
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	66 e0       	ldi	r22, 0x06	; 6
    1d82:	41 e0       	ldi	r20, 0x01	; 1
    1d84:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_VidSetPinDirection>
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	a0 e2       	ldi	r26, 0x20	; 32
    1d8e:	b2 e4       	ldi	r27, 0x42	; 66
    1d90:	8f a3       	std	Y+39, r24	; 0x27
    1d92:	98 a7       	std	Y+40, r25	; 0x28
    1d94:	a9 a7       	std	Y+41, r26	; 0x29
    1d96:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d98:	6f a1       	ldd	r22, Y+39	; 0x27
    1d9a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d9c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	4a e7       	ldi	r20, 0x7A	; 122
    1da6:	55 e4       	ldi	r21, 0x45	; 69
    1da8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	8b a3       	std	Y+35, r24	; 0x23
    1db2:	9c a3       	std	Y+36, r25	; 0x24
    1db4:	ad a3       	std	Y+37, r26	; 0x25
    1db6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1db8:	6b a1       	ldd	r22, Y+35	; 0x23
    1dba:	7c a1       	ldd	r23, Y+36	; 0x24
    1dbc:	8d a1       	ldd	r24, Y+37	; 0x25
    1dbe:	9e a1       	ldd	r25, Y+38	; 0x26
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e8       	ldi	r20, 0x80	; 128
    1dc6:	5f e3       	ldi	r21, 0x3F	; 63
    1dc8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1dcc:	88 23       	and	r24, r24
    1dce:	2c f4       	brge	.+10     	; 0x1dda <LCD_VidInit+0xa2>
		__ticks = 1;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	9a a3       	std	Y+34, r25	; 0x22
    1dd6:	89 a3       	std	Y+33, r24	; 0x21
    1dd8:	3f c0       	rjmp	.+126    	; 0x1e58 <LCD_VidInit+0x120>
	else if (__tmp > 65535)
    1dda:	6b a1       	ldd	r22, Y+35	; 0x23
    1ddc:	7c a1       	ldd	r23, Y+36	; 0x24
    1dde:	8d a1       	ldd	r24, Y+37	; 0x25
    1de0:	9e a1       	ldd	r25, Y+38	; 0x26
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	3f ef       	ldi	r19, 0xFF	; 255
    1de6:	4f e7       	ldi	r20, 0x7F	; 127
    1de8:	57 e4       	ldi	r21, 0x47	; 71
    1dea:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1dee:	18 16       	cp	r1, r24
    1df0:	4c f5       	brge	.+82     	; 0x1e44 <LCD_VidInit+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df2:	6f a1       	ldd	r22, Y+39	; 0x27
    1df4:	78 a5       	ldd	r23, Y+40	; 0x28
    1df6:	89 a5       	ldd	r24, Y+41	; 0x29
    1df8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e2       	ldi	r20, 0x20	; 32
    1e00:	51 e4       	ldi	r21, 0x41	; 65
    1e02:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	bc 01       	movw	r22, r24
    1e0c:	cd 01       	movw	r24, r26
    1e0e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	9a a3       	std	Y+34, r25	; 0x22
    1e18:	89 a3       	std	Y+33, r24	; 0x21
    1e1a:	0f c0       	rjmp	.+30     	; 0x1e3a <LCD_VidInit+0x102>
    1e1c:	80 e9       	ldi	r24, 0x90	; 144
    1e1e:	91 e0       	ldi	r25, 0x01	; 1
    1e20:	98 a3       	std	Y+32, r25	; 0x20
    1e22:	8f 8f       	std	Y+31, r24	; 0x1f
    1e24:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e26:	98 a1       	ldd	r25, Y+32	; 0x20
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	f1 f7       	brne	.-4      	; 0x1e28 <LCD_VidInit+0xf0>
    1e2c:	98 a3       	std	Y+32, r25	; 0x20
    1e2e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e30:	89 a1       	ldd	r24, Y+33	; 0x21
    1e32:	9a a1       	ldd	r25, Y+34	; 0x22
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	9a a3       	std	Y+34, r25	; 0x22
    1e38:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	69 f7       	brne	.-38     	; 0x1e1c <LCD_VidInit+0xe4>
    1e42:	14 c0       	rjmp	.+40     	; 0x1e6c <LCD_VidInit+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e44:	6b a1       	ldd	r22, Y+35	; 0x23
    1e46:	7c a1       	ldd	r23, Y+36	; 0x24
    1e48:	8d a1       	ldd	r24, Y+37	; 0x25
    1e4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e4c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	9a a3       	std	Y+34, r25	; 0x22
    1e56:	89 a3       	std	Y+33, r24	; 0x21
    1e58:	89 a1       	ldd	r24, Y+33	; 0x21
    1e5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e5c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e5e:	8d 8f       	std	Y+29, r24	; 0x1d
    1e60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <LCD_VidInit+0x12c>
    1e68:	9e 8f       	std	Y+30, r25	; 0x1e
    1e6a:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(40);

	//FUNCTION SET COMMAND: 4bot mode
	LCD_VidSendCommand(LCD_FOUR_BIT_MODE_S1);
    1e6c:	83 e3       	ldi	r24, 0x33	; 51
    1e6e:	0e 94 21 0b 	call	0x1642	; 0x1642 <LCD_VidSendCommand>
	LCD_VidSendCommand(LCD_FOUR_BIT_MODE_S2);
    1e72:	82 e3       	ldi	r24, 0x32	; 50
    1e74:	0e 94 21 0b 	call	0x1642	; 0x1642 <LCD_VidSendCommand>

	//FUNCTION SET COMMAND: 4bit mode 2 LINES, 5*8 FONT SIZE
	LCD_VidSendCommand(LCD_FOUR_BIT_MODE_TWO_LINES);
    1e78:	88 e2       	ldi	r24, 0x28	; 40
    1e7a:	0e 94 21 0b 	call	0x1642	; 0x1642 <LCD_VidSendCommand>
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	a0 e2       	ldi	r26, 0x20	; 32
    1e84:	b2 e4       	ldi	r27, 0x42	; 66
    1e86:	89 8f       	std	Y+25, r24	; 0x19
    1e88:	9a 8f       	std	Y+26, r25	; 0x1a
    1e8a:	ab 8f       	std	Y+27, r26	; 0x1b
    1e8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	4a e7       	ldi	r20, 0x7A	; 122
    1e9c:	55 e4       	ldi	r21, 0x45	; 69
    1e9e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	8d 8b       	std	Y+21, r24	; 0x15
    1ea8:	9e 8b       	std	Y+22, r25	; 0x16
    1eaa:	af 8b       	std	Y+23, r26	; 0x17
    1eac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1eae:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb0:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e8       	ldi	r20, 0x80	; 128
    1ebc:	5f e3       	ldi	r21, 0x3F	; 63
    1ebe:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1ec2:	88 23       	and	r24, r24
    1ec4:	2c f4       	brge	.+10     	; 0x1ed0 <LCD_VidInit+0x198>
		__ticks = 1;
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	9c 8b       	std	Y+20, r25	; 0x14
    1ecc:	8b 8b       	std	Y+19, r24	; 0x13
    1ece:	3f c0       	rjmp	.+126    	; 0x1f4e <LCD_VidInit+0x216>
	else if (__tmp > 65535)
    1ed0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	3f ef       	ldi	r19, 0xFF	; 255
    1edc:	4f e7       	ldi	r20, 0x7F	; 127
    1ede:	57 e4       	ldi	r21, 0x47	; 71
    1ee0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1ee4:	18 16       	cp	r1, r24
    1ee6:	4c f5       	brge	.+82     	; 0x1f3a <LCD_VidInit+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee8:	69 8d       	ldd	r22, Y+25	; 0x19
    1eea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e2       	ldi	r20, 0x20	; 32
    1ef6:	51 e4       	ldi	r21, 0x41	; 65
    1ef8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	bc 01       	movw	r22, r24
    1f02:	cd 01       	movw	r24, r26
    1f04:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	9c 8b       	std	Y+20, r25	; 0x14
    1f0e:	8b 8b       	std	Y+19, r24	; 0x13
    1f10:	0f c0       	rjmp	.+30     	; 0x1f30 <LCD_VidInit+0x1f8>
    1f12:	80 e9       	ldi	r24, 0x90	; 144
    1f14:	91 e0       	ldi	r25, 0x01	; 1
    1f16:	9a 8b       	std	Y+18, r25	; 0x12
    1f18:	89 8b       	std	Y+17, r24	; 0x11
    1f1a:	89 89       	ldd	r24, Y+17	; 0x11
    1f1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	f1 f7       	brne	.-4      	; 0x1f1e <LCD_VidInit+0x1e6>
    1f22:	9a 8b       	std	Y+18, r25	; 0x12
    1f24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f26:	8b 89       	ldd	r24, Y+19	; 0x13
    1f28:	9c 89       	ldd	r25, Y+20	; 0x14
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	9c 8b       	std	Y+20, r25	; 0x14
    1f2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f30:	8b 89       	ldd	r24, Y+19	; 0x13
    1f32:	9c 89       	ldd	r25, Y+20	; 0x14
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	69 f7       	brne	.-38     	; 0x1f12 <LCD_VidInit+0x1da>
    1f38:	14 c0       	rjmp	.+40     	; 0x1f62 <LCD_VidInit+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f40:	98 8d       	ldd	r25, Y+24	; 0x18
    1f42:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	9c 8b       	std	Y+20, r25	; 0x14
    1f4c:	8b 8b       	std	Y+19, r24	; 0x13
    1f4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f50:	9c 89       	ldd	r25, Y+20	; 0x14
    1f52:	98 8b       	std	Y+16, r25	; 0x10
    1f54:	8f 87       	std	Y+15, r24	; 0x0f
    1f56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f58:	98 89       	ldd	r25, Y+16	; 0x10
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <LCD_VidInit+0x222>
    1f5e:	98 8b       	std	Y+16, r25	; 0x10
    1f60:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(40);
	//DISPLAY ON OFF CONTROL: DISPLAY ENABLE, DISPLAY CURSOR, ON BLINK CURSOR
	LCD_VidSendCommand(LCD_CURSOR_OFF_BLINK);
    1f62:	8d e0       	ldi	r24, 0x0D	; 13
    1f64:	0e 94 21 0b 	call	0x1642	; 0x1642 <LCD_VidSendCommand>
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	a0 e2       	ldi	r26, 0x20	; 32
    1f6e:	b2 e4       	ldi	r27, 0x42	; 66
    1f70:	8b 87       	std	Y+11, r24	; 0x0b
    1f72:	9c 87       	std	Y+12, r25	; 0x0c
    1f74:	ad 87       	std	Y+13, r26	; 0x0d
    1f76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	4a e7       	ldi	r20, 0x7A	; 122
    1f86:	55 e4       	ldi	r21, 0x45	; 69
    1f88:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	8f 83       	std	Y+7, r24	; 0x07
    1f92:	98 87       	std	Y+8, r25	; 0x08
    1f94:	a9 87       	std	Y+9, r26	; 0x09
    1f96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f98:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9a:	78 85       	ldd	r23, Y+8	; 0x08
    1f9c:	89 85       	ldd	r24, Y+9	; 0x09
    1f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e8       	ldi	r20, 0x80	; 128
    1fa6:	5f e3       	ldi	r21, 0x3F	; 63
    1fa8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1fac:	88 23       	and	r24, r24
    1fae:	2c f4       	brge	.+10     	; 0x1fba <LCD_VidInit+0x282>
		__ticks = 1;
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	9e 83       	std	Y+6, r25	; 0x06
    1fb6:	8d 83       	std	Y+5, r24	; 0x05
    1fb8:	3f c0       	rjmp	.+126    	; 0x2038 <LCD_VidInit+0x300>
	else if (__tmp > 65535)
    1fba:	6f 81       	ldd	r22, Y+7	; 0x07
    1fbc:	78 85       	ldd	r23, Y+8	; 0x08
    1fbe:	89 85       	ldd	r24, Y+9	; 0x09
    1fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	3f ef       	ldi	r19, 0xFF	; 255
    1fc6:	4f e7       	ldi	r20, 0x7F	; 127
    1fc8:	57 e4       	ldi	r21, 0x47	; 71
    1fca:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1fce:	18 16       	cp	r1, r24
    1fd0:	4c f5       	brge	.+82     	; 0x2024 <LCD_VidInit+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	40 e2       	ldi	r20, 0x20	; 32
    1fe0:	51 e4       	ldi	r21, 0x41	; 65
    1fe2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	bc 01       	movw	r22, r24
    1fec:	cd 01       	movw	r24, r26
    1fee:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	9e 83       	std	Y+6, r25	; 0x06
    1ff8:	8d 83       	std	Y+5, r24	; 0x05
    1ffa:	0f c0       	rjmp	.+30     	; 0x201a <LCD_VidInit+0x2e2>
    1ffc:	80 e9       	ldi	r24, 0x90	; 144
    1ffe:	91 e0       	ldi	r25, 0x01	; 1
    2000:	9c 83       	std	Y+4, r25	; 0x04
    2002:	8b 83       	std	Y+3, r24	; 0x03
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	9c 81       	ldd	r25, Y+4	; 0x04
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	f1 f7       	brne	.-4      	; 0x2008 <LCD_VidInit+0x2d0>
    200c:	9c 83       	std	Y+4, r25	; 0x04
    200e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2010:	8d 81       	ldd	r24, Y+5	; 0x05
    2012:	9e 81       	ldd	r25, Y+6	; 0x06
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	9e 83       	std	Y+6, r25	; 0x06
    2018:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201a:	8d 81       	ldd	r24, Y+5	; 0x05
    201c:	9e 81       	ldd	r25, Y+6	; 0x06
    201e:	00 97       	sbiw	r24, 0x00	; 0
    2020:	69 f7       	brne	.-38     	; 0x1ffc <LCD_VidInit+0x2c4>
    2022:	14 c0       	rjmp	.+40     	; 0x204c <LCD_VidInit+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2024:	6f 81       	ldd	r22, Y+7	; 0x07
    2026:	78 85       	ldd	r23, Y+8	; 0x08
    2028:	89 85       	ldd	r24, Y+9	; 0x09
    202a:	9a 85       	ldd	r25, Y+10	; 0x0a
    202c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	9e 83       	std	Y+6, r25	; 0x06
    2036:	8d 83       	std	Y+5, r24	; 0x05
    2038:	8d 81       	ldd	r24, Y+5	; 0x05
    203a:	9e 81       	ldd	r25, Y+6	; 0x06
    203c:	9a 83       	std	Y+2, r25	; 0x02
    203e:	89 83       	std	Y+1, r24	; 0x01
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	9a 81       	ldd	r25, Y+2	; 0x02
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <LCD_VidInit+0x30c>
    2048:	9a 83       	std	Y+2, r25	; 0x02
    204a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(40);
	//CLEAR DISPLAY
	LCD_VidSendCommand(LCD_CLEAR);
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	0e 94 21 0b 	call	0x1642	; 0x1642 <LCD_VidSendCommand>

#endif
}
    2052:	aa 96       	adiw	r28, 0x2a	; 42
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	f8 94       	cli
    2058:	de bf       	out	0x3e, r29	; 62
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	cd bf       	out	0x3d, r28	; 61
    205e:	cf 91       	pop	r28
    2060:	df 91       	pop	r29
    2062:	08 95       	ret

00002064 <LCD_VidSendString>:

//SEND STRING FUNCTION
void LCD_VidSendString(char *Copy_u8Data){
    2064:	df 93       	push	r29
    2066:	cf 93       	push	r28
    2068:	00 d0       	rcall	.+0      	; 0x206a <LCD_VidSendString+0x6>
    206a:	00 d0       	rcall	.+0      	; 0x206c <LCD_VidSendString+0x8>
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	9c 83       	std	Y+4, r25	; 0x04
    2072:	8b 83       	std	Y+3, r24	; 0x03
	int Iterator = 0;
    2074:	1a 82       	std	Y+2, r1	; 0x02
    2076:	19 82       	std	Y+1, r1	; 0x01
    2078:	0f c0       	rjmp	.+30     	; 0x2098 <LCD_VidSendString+0x34>
	while(Copy_u8Data[Iterator] != '\0'){
		LCD_VidSendData(Copy_u8Data[Iterator]);
    207a:	29 81       	ldd	r18, Y+1	; 0x01
    207c:	3a 81       	ldd	r19, Y+2	; 0x02
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	9c 81       	ldd	r25, Y+4	; 0x04
    2082:	fc 01       	movw	r30, r24
    2084:	e2 0f       	add	r30, r18
    2086:	f3 1f       	adc	r31, r19
    2088:	80 81       	ld	r24, Z
    208a:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_VidSendData>
		Iterator++;
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	9a 81       	ldd	r25, Y+2	; 0x02
    2092:	01 96       	adiw	r24, 0x01	; 1
    2094:	9a 83       	std	Y+2, r25	; 0x02
    2096:	89 83       	std	Y+1, r24	; 0x01
}

//SEND STRING FUNCTION
void LCD_VidSendString(char *Copy_u8Data){
	int Iterator = 0;
	while(Copy_u8Data[Iterator] != '\0'){
    2098:	29 81       	ldd	r18, Y+1	; 0x01
    209a:	3a 81       	ldd	r19, Y+2	; 0x02
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	9c 81       	ldd	r25, Y+4	; 0x04
    20a0:	fc 01       	movw	r30, r24
    20a2:	e2 0f       	add	r30, r18
    20a4:	f3 1f       	adc	r31, r19
    20a6:	80 81       	ld	r24, Z
    20a8:	88 23       	and	r24, r24
    20aa:	39 f7       	brne	.-50     	; 0x207a <LCD_VidSendString+0x16>
		LCD_VidSendData(Copy_u8Data[Iterator]);
		Iterator++;
	}
}
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	cf 91       	pop	r28
    20b6:	df 91       	pop	r29
    20b8:	08 95       	ret

000020ba <LCD_VidSetPosition>:

//SET POSITION FUNCTION
void LCD_VidSetPosition(u8 Copy_u8Row, u8 Copy_u8Columm){
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	00 d0       	rcall	.+0      	; 0x20c0 <LCD_VidSetPosition+0x6>
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
    20c4:	89 83       	std	Y+1, r24	; 0x01
    20c6:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8Row == LCD_ROW1){
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	88 23       	and	r24, r24
    20cc:	61 f4       	brne	.+24     	; 0x20e6 <LCD_VidSetPosition+0x2c>
		LOC = Copy_u8Columm;
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	88 2f       	mov	r24, r24
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	90 93 97 01 	sts	0x0197, r25
    20d8:	80 93 96 01 	sts	0x0196, r24
		LCD_VidSendCommand(LCD_FORCE_START_LOCATION|Copy_u8Columm);
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	80 68       	ori	r24, 0x80	; 128
    20e0:	0e 94 21 0b 	call	0x1642	; 0x1642 <LCD_VidSendCommand>
    20e4:	0f c0       	rjmp	.+30     	; 0x2104 <LCD_VidSetPosition+0x4a>
	}
	else if(Copy_u8Row == LCD_ROW2){
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	81 30       	cpi	r24, 0x01	; 1
    20ea:	61 f4       	brne	.+24     	; 0x2104 <LCD_VidSetPosition+0x4a>
		LOC = 16+Copy_u8Columm;
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	88 2f       	mov	r24, r24
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	40 96       	adiw	r24, 0x10	; 16
    20f4:	90 93 97 01 	sts	0x0197, r25
    20f8:	80 93 96 01 	sts	0x0196, r24
		LCD_VidSendCommand(LCD_FORCE_START_LOCATION|LCD_SEGMENT_1_OF_ROW_1|Copy_u8Columm);
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	80 6c       	ori	r24, 0xC0	; 192
    2100:	0e 94 21 0b 	call	0x1642	; 0x1642 <LCD_VidSendCommand>
	}
}
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <LCD_VidSendfloat>:

//SEND NUMBER FUNCTION
void LCD_VidSendfloat(f32 Copy_u8Data){
    210e:	0f 93       	push	r16
    2110:	1f 93       	push	r17
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	6c 97       	sbiw	r28, 0x1c	; 28
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	cd bf       	out	0x3d, r28	; 61
    2126:	69 8f       	std	Y+25, r22	; 0x19
    2128:	7a 8f       	std	Y+26, r23	; 0x1a
    212a:	8b 8f       	std	Y+27, r24	; 0x1b
    212c:	9c 8f       	std	Y+28, r25	; 0x1c
	char floatStr[20];  // Adjust the size as needed
	int n = Copy_u8Data;
    212e:	69 8d       	ldd	r22, Y+25	; 0x19
    2130:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2132:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2134:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2136:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	9c 83       	std	Y+4, r25	; 0x04
    2140:	8b 83       	std	Y+3, r24	; 0x03
	int digit = 1;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	9a 83       	std	Y+2, r25	; 0x02
    2148:	89 83       	std	Y+1, r24	; 0x01
    214a:	0f c0       	rjmp	.+30     	; 0x216a <LCD_VidSendfloat+0x5c>
	while(n!=0)
	   {
	       n=n/10;
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	9c 81       	ldd	r25, Y+4	; 0x04
    2150:	2a e0       	ldi	r18, 0x0A	; 10
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	b9 01       	movw	r22, r18
    2156:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <__divmodhi4>
    215a:	cb 01       	movw	r24, r22
    215c:	9c 83       	std	Y+4, r25	; 0x04
    215e:	8b 83       	std	Y+3, r24	; 0x03
	       digit++;
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	9a 81       	ldd	r25, Y+2	; 0x02
    2164:	01 96       	adiw	r24, 0x01	; 1
    2166:	9a 83       	std	Y+2, r25	; 0x02
    2168:	89 83       	std	Y+1, r24	; 0x01
//SEND NUMBER FUNCTION
void LCD_VidSendfloat(f32 Copy_u8Data){
	char floatStr[20];  // Adjust the size as needed
	int n = Copy_u8Data;
	int digit = 1;
	while(n!=0)
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	9c 81       	ldd	r25, Y+4	; 0x04
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	69 f7       	brne	.-38     	; 0x214c <LCD_VidSendfloat+0x3e>
	   {
	       n=n/10;
	       digit++;
	   }
	dtostrf(Copy_u8Data, digit+2,2, floatStr);
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	8e 5f       	subi	r24, 0xFE	; 254
    2176:	28 2f       	mov	r18, r24
    2178:	89 8d       	ldd	r24, Y+25	; 0x19
    217a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    217c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    217e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2180:	fe 01       	movw	r30, r28
    2182:	35 96       	adiw	r30, 0x05	; 5
    2184:	bc 01       	movw	r22, r24
    2186:	cd 01       	movw	r24, r26
    2188:	42 2f       	mov	r20, r18
    218a:	22 e0       	ldi	r18, 0x02	; 2
    218c:	8f 01       	movw	r16, r30
    218e:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <dtostrf>
	LCD_VidSendString(floatStr);
    2192:	ce 01       	movw	r24, r28
    2194:	05 96       	adiw	r24, 0x05	; 5
    2196:	0e 94 32 10 	call	0x2064	; 0x2064 <LCD_VidSendString>
}
    219a:	6c 96       	adiw	r28, 0x1c	; 28
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	de bf       	out	0x3e, r29	; 62
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	cd bf       	out	0x3d, r28	; 61
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	1f 91       	pop	r17
    21ac:	0f 91       	pop	r16
    21ae:	08 95       	ret

000021b0 <LCD_VidSendint>:

void LCD_VidSendint(int Copy_u8Data){
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	66 97       	sbiw	r28, 0x16	; 22
    21ba:	0f b6       	in	r0, 0x3f	; 63
    21bc:	f8 94       	cli
    21be:	de bf       	out	0x3e, r29	; 62
    21c0:	0f be       	out	0x3f, r0	; 63
    21c2:	cd bf       	out	0x3d, r28	; 61
    21c4:	9e 8b       	std	Y+22, r25	; 0x16
    21c6:	8d 8b       	std	Y+21, r24	; 0x15
	char intstr[20];  // Adjust the size as needed
	sprintf(intstr,"%d",Copy_u8Data);
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <LCD_VidSendint+0x1a>
    21ca:	00 d0       	rcall	.+0      	; 0x21cc <LCD_VidSendint+0x1c>
    21cc:	00 d0       	rcall	.+0      	; 0x21ce <LCD_VidSendint+0x1e>
    21ce:	ed b7       	in	r30, 0x3d	; 61
    21d0:	fe b7       	in	r31, 0x3e	; 62
    21d2:	31 96       	adiw	r30, 0x01	; 1
    21d4:	ce 01       	movw	r24, r28
    21d6:	01 96       	adiw	r24, 0x01	; 1
    21d8:	91 83       	std	Z+1, r25	; 0x01
    21da:	80 83       	st	Z, r24
    21dc:	80 e6       	ldi	r24, 0x60	; 96
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	93 83       	std	Z+3, r25	; 0x03
    21e2:	82 83       	std	Z+2, r24	; 0x02
    21e4:	8d 89       	ldd	r24, Y+21	; 0x15
    21e6:	9e 89       	ldd	r25, Y+22	; 0x16
    21e8:	95 83       	std	Z+5, r25	; 0x05
    21ea:	84 83       	std	Z+4, r24	; 0x04
    21ec:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <sprintf>
    21f0:	8d b7       	in	r24, 0x3d	; 61
    21f2:	9e b7       	in	r25, 0x3e	; 62
    21f4:	06 96       	adiw	r24, 0x06	; 6
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	9e bf       	out	0x3e, r25	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	8d bf       	out	0x3d, r24	; 61
	LCD_VidSendString(intstr);
    2200:	ce 01       	movw	r24, r28
    2202:	01 96       	adiw	r24, 0x01	; 1
    2204:	0e 94 32 10 	call	0x2064	; 0x2064 <LCD_VidSendString>
}
    2208:	66 96       	adiw	r28, 0x16	; 22
    220a:	0f b6       	in	r0, 0x3f	; 63
    220c:	f8 94       	cli
    220e:	de bf       	out	0x3e, r29	; 62
    2210:	0f be       	out	0x3f, r0	; 63
    2212:	cd bf       	out	0x3d, r28	; 61
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	08 95       	ret

0000221a <LCD_VidClear>:

void LCD_VidClear()
{
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
    2222:	2e 97       	sbiw	r28, 0x0e	; 14
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	de bf       	out	0x3e, r29	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	cd bf       	out	0x3d, r28	; 61
	LOC =0;
    222e:	10 92 97 01 	sts	0x0197, r1
    2232:	10 92 96 01 	sts	0x0196, r1
	LCD_VidSendCommand(LCD_CLEAR);		/* Clear display */
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	0e 94 21 0b 	call	0x1642	; 0x1642 <LCD_VidSendCommand>
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	a0 e0       	ldi	r26, 0x00	; 0
    2242:	b0 e4       	ldi	r27, 0x40	; 64
    2244:	8b 87       	std	Y+11, r24	; 0x0b
    2246:	9c 87       	std	Y+12, r25	; 0x0c
    2248:	ad 87       	std	Y+13, r26	; 0x0d
    224a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224c:	6b 85       	ldd	r22, Y+11	; 0x0b
    224e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2250:	8d 85       	ldd	r24, Y+13	; 0x0d
    2252:	9e 85       	ldd	r25, Y+14	; 0x0e
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	4a e7       	ldi	r20, 0x7A	; 122
    225a:	55 e4       	ldi	r21, 0x45	; 69
    225c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	8f 83       	std	Y+7, r24	; 0x07
    2266:	98 87       	std	Y+8, r25	; 0x08
    2268:	a9 87       	std	Y+9, r26	; 0x09
    226a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    226c:	6f 81       	ldd	r22, Y+7	; 0x07
    226e:	78 85       	ldd	r23, Y+8	; 0x08
    2270:	89 85       	ldd	r24, Y+9	; 0x09
    2272:	9a 85       	ldd	r25, Y+10	; 0x0a
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	40 e8       	ldi	r20, 0x80	; 128
    227a:	5f e3       	ldi	r21, 0x3F	; 63
    227c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2280:	88 23       	and	r24, r24
    2282:	2c f4       	brge	.+10     	; 0x228e <LCD_VidClear+0x74>
		__ticks = 1;
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	9e 83       	std	Y+6, r25	; 0x06
    228a:	8d 83       	std	Y+5, r24	; 0x05
    228c:	3f c0       	rjmp	.+126    	; 0x230c <LCD_VidClear+0xf2>
	else if (__tmp > 65535)
    228e:	6f 81       	ldd	r22, Y+7	; 0x07
    2290:	78 85       	ldd	r23, Y+8	; 0x08
    2292:	89 85       	ldd	r24, Y+9	; 0x09
    2294:	9a 85       	ldd	r25, Y+10	; 0x0a
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	3f ef       	ldi	r19, 0xFF	; 255
    229a:	4f e7       	ldi	r20, 0x7F	; 127
    229c:	57 e4       	ldi	r21, 0x47	; 71
    229e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    22a2:	18 16       	cp	r1, r24
    22a4:	4c f5       	brge	.+82     	; 0x22f8 <LCD_VidClear+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e2       	ldi	r20, 0x20	; 32
    22b4:	51 e4       	ldi	r21, 0x41	; 65
    22b6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	bc 01       	movw	r22, r24
    22c0:	cd 01       	movw	r24, r26
    22c2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	9e 83       	std	Y+6, r25	; 0x06
    22cc:	8d 83       	std	Y+5, r24	; 0x05
    22ce:	0f c0       	rjmp	.+30     	; 0x22ee <LCD_VidClear+0xd4>
    22d0:	80 e9       	ldi	r24, 0x90	; 144
    22d2:	91 e0       	ldi	r25, 0x01	; 1
    22d4:	9c 83       	std	Y+4, r25	; 0x04
    22d6:	8b 83       	std	Y+3, r24	; 0x03
    22d8:	8b 81       	ldd	r24, Y+3	; 0x03
    22da:	9c 81       	ldd	r25, Y+4	; 0x04
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <LCD_VidClear+0xc2>
    22e0:	9c 83       	std	Y+4, r25	; 0x04
    22e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e4:	8d 81       	ldd	r24, Y+5	; 0x05
    22e6:	9e 81       	ldd	r25, Y+6	; 0x06
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	9e 83       	std	Y+6, r25	; 0x06
    22ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ee:	8d 81       	ldd	r24, Y+5	; 0x05
    22f0:	9e 81       	ldd	r25, Y+6	; 0x06
    22f2:	00 97       	sbiw	r24, 0x00	; 0
    22f4:	69 f7       	brne	.-38     	; 0x22d0 <LCD_VidClear+0xb6>
    22f6:	14 c0       	rjmp	.+40     	; 0x2320 <LCD_VidClear+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f8:	6f 81       	ldd	r22, Y+7	; 0x07
    22fa:	78 85       	ldd	r23, Y+8	; 0x08
    22fc:	89 85       	ldd	r24, Y+9	; 0x09
    22fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2300:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	9e 83       	std	Y+6, r25	; 0x06
    230a:	8d 83       	std	Y+5, r24	; 0x05
    230c:	8d 81       	ldd	r24, Y+5	; 0x05
    230e:	9e 81       	ldd	r25, Y+6	; 0x06
    2310:	9a 83       	std	Y+2, r25	; 0x02
    2312:	89 83       	std	Y+1, r24	; 0x01
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	9a 81       	ldd	r25, Y+2	; 0x02
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	f1 f7       	brne	.-4      	; 0x2318 <LCD_VidClear+0xfe>
    231c:	9a 83       	std	Y+2, r25	; 0x02
    231e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_VidSendCommand(LCD_FORCE_START_LOCATION);		/* Cursor at home position */
    2320:	80 e8       	ldi	r24, 0x80	; 128
    2322:	0e 94 21 0b 	call	0x1642	; 0x1642 <LCD_VidSendCommand>
}
    2326:	2e 96       	adiw	r28, 0x0e	; 14
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <main>:
void ADC_LM35_FUNCTION(void);
void ADC_LDR_FUNCTION(void);
void ADC_PIR_FUNCTION(void);
void ADC_FLAME_FUNCTION(void);
int main()
{
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
	ADC_VidInit();
    2340:	0e 94 33 08 	call	0x1066	; 0x1066 <ADC_VidInit>
	LCD_VidInit();
    2344:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <LCD_VidInit>
	GIE_VidEnable();
    2348:	0e 94 05 0b 	call	0x160a	; 0x160a <GIE_VidEnable>

	while(1){
		ADC_u16SOCAsyn(Channel0);
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <ADC_u16SOCAsyn>
		ADC_SetCallBack(&ADC_LDR_FUNCTION);
    2352:	82 ef       	ldi	r24, 0xF2	; 242
    2354:	92 e1       	ldi	r25, 0x12	; 18
    2356:	0e 94 9d 08 	call	0x113a	; 0x113a <ADC_SetCallBack>
    235a:	f8 cf       	rjmp	.-16     	; 0x234c <main+0x14>

0000235c <ADC_LM35_FUNCTION>:
	}
	return 0;
}

void ADC_LM35_FUNCTION(void) {
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	a0 97       	sbiw	r28, 0x20	; 32
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	cd bf       	out	0x3d, r28	; 61
	u16 r;
	int cel;
	r =  ADC_ADCResult();
    2370:	0e 94 92 08 	call	0x1124	; 0x1124 <ADC_ADCResult>
    2374:	98 a3       	std	Y+32, r25	; 0x20
    2376:	8f 8f       	std	Y+31, r24	; 0x1f
	//STEP == 5/1024 = 0.00488
	//ANALOG = DIGITAL * STEP *1000 --> mV
	cel = (r*4.88);
    2378:	8f 8d       	ldd	r24, Y+31	; 0x1f
    237a:	98 a1       	ldd	r25, Y+32	; 0x20
    237c:	cc 01       	movw	r24, r24
    237e:	a0 e0       	ldi	r26, 0x00	; 0
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	bc 01       	movw	r22, r24
    2384:	cd 01       	movw	r24, r26
    2386:	0e 94 84 05 	call	0xb08	; 0xb08 <__floatunsisf>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	bc 01       	movw	r22, r24
    2390:	cd 01       	movw	r24, r26
    2392:	26 ef       	ldi	r18, 0xF6	; 246
    2394:	38 e2       	ldi	r19, 0x28	; 40
    2396:	4c e9       	ldi	r20, 0x9C	; 156
    2398:	50 e4       	ldi	r21, 0x40	; 64
    239a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	bc 01       	movw	r22, r24
    23a4:	cd 01       	movw	r24, r26
    23a6:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	9e 8f       	std	Y+30, r25	; 0x1e
    23b0:	8d 8f       	std	Y+29, r24	; 0x1d
	cel=(cel/10.00);
    23b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23b6:	aa 27       	eor	r26, r26
    23b8:	97 fd       	sbrc	r25, 7
    23ba:	a0 95       	com	r26
    23bc:	ba 2f       	mov	r27, r26
    23be:	bc 01       	movw	r22, r24
    23c0:	cd 01       	movw	r24, r26
    23c2:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatsisf>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	bc 01       	movw	r22, r24
    23cc:	cd 01       	movw	r24, r26
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	40 e2       	ldi	r20, 0x20	; 32
    23d4:	51 e4       	ldi	r21, 0x41	; 65
    23d6:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	bc 01       	movw	r22, r24
    23e0:	cd 01       	movw	r24, r26
    23e2:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	9e 8f       	std	Y+30, r25	; 0x1e
    23ec:	8d 8f       	std	Y+29, r24	; 0x1d
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	a8 e4       	ldi	r26, 0x48	; 72
    23f4:	b2 e4       	ldi	r27, 0x42	; 66
    23f6:	89 8f       	std	Y+25, r24	; 0x19
    23f8:	9a 8f       	std	Y+26, r25	; 0x1a
    23fa:	ab 8f       	std	Y+27, r26	; 0x1b
    23fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2400:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2402:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2404:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	4a e7       	ldi	r20, 0x7A	; 122
    240c:	55 e4       	ldi	r21, 0x45	; 69
    240e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	8d 8b       	std	Y+21, r24	; 0x15
    2418:	9e 8b       	std	Y+22, r25	; 0x16
    241a:	af 8b       	std	Y+23, r26	; 0x17
    241c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    241e:	6d 89       	ldd	r22, Y+21	; 0x15
    2420:	7e 89       	ldd	r23, Y+22	; 0x16
    2422:	8f 89       	ldd	r24, Y+23	; 0x17
    2424:	98 8d       	ldd	r25, Y+24	; 0x18
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	40 e8       	ldi	r20, 0x80	; 128
    242c:	5f e3       	ldi	r21, 0x3F	; 63
    242e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2432:	88 23       	and	r24, r24
    2434:	2c f4       	brge	.+10     	; 0x2440 <ADC_LM35_FUNCTION+0xe4>
		__ticks = 1;
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	9c 8b       	std	Y+20, r25	; 0x14
    243c:	8b 8b       	std	Y+19, r24	; 0x13
    243e:	3f c0       	rjmp	.+126    	; 0x24be <ADC_LM35_FUNCTION+0x162>
	else if (__tmp > 65535)
    2440:	6d 89       	ldd	r22, Y+21	; 0x15
    2442:	7e 89       	ldd	r23, Y+22	; 0x16
    2444:	8f 89       	ldd	r24, Y+23	; 0x17
    2446:	98 8d       	ldd	r25, Y+24	; 0x18
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	3f ef       	ldi	r19, 0xFF	; 255
    244c:	4f e7       	ldi	r20, 0x7F	; 127
    244e:	57 e4       	ldi	r21, 0x47	; 71
    2450:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2454:	18 16       	cp	r1, r24
    2456:	4c f5       	brge	.+82     	; 0x24aa <ADC_LM35_FUNCTION+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2458:	69 8d       	ldd	r22, Y+25	; 0x19
    245a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    245c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    245e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	40 e2       	ldi	r20, 0x20	; 32
    2466:	51 e4       	ldi	r21, 0x41	; 65
    2468:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	bc 01       	movw	r22, r24
    2472:	cd 01       	movw	r24, r26
    2474:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	9c 8b       	std	Y+20, r25	; 0x14
    247e:	8b 8b       	std	Y+19, r24	; 0x13
    2480:	0f c0       	rjmp	.+30     	; 0x24a0 <ADC_LM35_FUNCTION+0x144>
    2482:	80 e9       	ldi	r24, 0x90	; 144
    2484:	91 e0       	ldi	r25, 0x01	; 1
    2486:	9a 8b       	std	Y+18, r25	; 0x12
    2488:	89 8b       	std	Y+17, r24	; 0x11
    248a:	89 89       	ldd	r24, Y+17	; 0x11
    248c:	9a 89       	ldd	r25, Y+18	; 0x12
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	f1 f7       	brne	.-4      	; 0x248e <ADC_LM35_FUNCTION+0x132>
    2492:	9a 8b       	std	Y+18, r25	; 0x12
    2494:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2496:	8b 89       	ldd	r24, Y+19	; 0x13
    2498:	9c 89       	ldd	r25, Y+20	; 0x14
    249a:	01 97       	sbiw	r24, 0x01	; 1
    249c:	9c 8b       	std	Y+20, r25	; 0x14
    249e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a0:	8b 89       	ldd	r24, Y+19	; 0x13
    24a2:	9c 89       	ldd	r25, Y+20	; 0x14
    24a4:	00 97       	sbiw	r24, 0x00	; 0
    24a6:	69 f7       	brne	.-38     	; 0x2482 <ADC_LM35_FUNCTION+0x126>
    24a8:	14 c0       	rjmp	.+40     	; 0x24d2 <ADC_LM35_FUNCTION+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24aa:	6d 89       	ldd	r22, Y+21	; 0x15
    24ac:	7e 89       	ldd	r23, Y+22	; 0x16
    24ae:	8f 89       	ldd	r24, Y+23	; 0x17
    24b0:	98 8d       	ldd	r25, Y+24	; 0x18
    24b2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	9c 8b       	std	Y+20, r25	; 0x14
    24bc:	8b 8b       	std	Y+19, r24	; 0x13
    24be:	8b 89       	ldd	r24, Y+19	; 0x13
    24c0:	9c 89       	ldd	r25, Y+20	; 0x14
    24c2:	98 8b       	std	Y+16, r25	; 0x10
    24c4:	8f 87       	std	Y+15, r24	; 0x0f
    24c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24c8:	98 89       	ldd	r25, Y+16	; 0x10
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	f1 f7       	brne	.-4      	; 0x24ca <ADC_LM35_FUNCTION+0x16e>
    24ce:	98 8b       	std	Y+16, r25	; 0x10
    24d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	LCD_VidSendString("Temprature : ");
    24d2:	83 e6       	ldi	r24, 0x63	; 99
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	0e 94 32 10 	call	0x2064	; 0x2064 <LCD_VidSendString>
	LCD_VidSendint(cel);
    24da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24de:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <LCD_VidSendint>
	LCD_VidSendString(" C");
    24e2:	81 e7       	ldi	r24, 0x71	; 113
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	0e 94 32 10 	call	0x2064	; 0x2064 <LCD_VidSendString>
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	a8 ec       	ldi	r26, 0xC8	; 200
    24f0:	b3 e4       	ldi	r27, 0x43	; 67
    24f2:	8b 87       	std	Y+11, r24	; 0x0b
    24f4:	9c 87       	std	Y+12, r25	; 0x0c
    24f6:	ad 87       	std	Y+13, r26	; 0x0d
    24f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    24fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2500:	9e 85       	ldd	r25, Y+14	; 0x0e
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	4a e7       	ldi	r20, 0x7A	; 122
    2508:	55 e4       	ldi	r21, 0x45	; 69
    250a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	8f 83       	std	Y+7, r24	; 0x07
    2514:	98 87       	std	Y+8, r25	; 0x08
    2516:	a9 87       	std	Y+9, r26	; 0x09
    2518:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    251a:	6f 81       	ldd	r22, Y+7	; 0x07
    251c:	78 85       	ldd	r23, Y+8	; 0x08
    251e:	89 85       	ldd	r24, Y+9	; 0x09
    2520:	9a 85       	ldd	r25, Y+10	; 0x0a
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e8       	ldi	r20, 0x80	; 128
    2528:	5f e3       	ldi	r21, 0x3F	; 63
    252a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    252e:	88 23       	and	r24, r24
    2530:	2c f4       	brge	.+10     	; 0x253c <ADC_LM35_FUNCTION+0x1e0>
		__ticks = 1;
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	9e 83       	std	Y+6, r25	; 0x06
    2538:	8d 83       	std	Y+5, r24	; 0x05
    253a:	3f c0       	rjmp	.+126    	; 0x25ba <ADC_LM35_FUNCTION+0x25e>
	else if (__tmp > 65535)
    253c:	6f 81       	ldd	r22, Y+7	; 0x07
    253e:	78 85       	ldd	r23, Y+8	; 0x08
    2540:	89 85       	ldd	r24, Y+9	; 0x09
    2542:	9a 85       	ldd	r25, Y+10	; 0x0a
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	3f ef       	ldi	r19, 0xFF	; 255
    2548:	4f e7       	ldi	r20, 0x7F	; 127
    254a:	57 e4       	ldi	r21, 0x47	; 71
    254c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2550:	18 16       	cp	r1, r24
    2552:	4c f5       	brge	.+82     	; 0x25a6 <ADC_LM35_FUNCTION+0x24a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2554:	6b 85       	ldd	r22, Y+11	; 0x0b
    2556:	7c 85       	ldd	r23, Y+12	; 0x0c
    2558:	8d 85       	ldd	r24, Y+13	; 0x0d
    255a:	9e 85       	ldd	r25, Y+14	; 0x0e
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e2       	ldi	r20, 0x20	; 32
    2562:	51 e4       	ldi	r21, 0x41	; 65
    2564:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	bc 01       	movw	r22, r24
    256e:	cd 01       	movw	r24, r26
    2570:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	9e 83       	std	Y+6, r25	; 0x06
    257a:	8d 83       	std	Y+5, r24	; 0x05
    257c:	0f c0       	rjmp	.+30     	; 0x259c <ADC_LM35_FUNCTION+0x240>
    257e:	80 e9       	ldi	r24, 0x90	; 144
    2580:	91 e0       	ldi	r25, 0x01	; 1
    2582:	9c 83       	std	Y+4, r25	; 0x04
    2584:	8b 83       	std	Y+3, r24	; 0x03
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	9c 81       	ldd	r25, Y+4	; 0x04
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	f1 f7       	brne	.-4      	; 0x258a <ADC_LM35_FUNCTION+0x22e>
    258e:	9c 83       	std	Y+4, r25	; 0x04
    2590:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2592:	8d 81       	ldd	r24, Y+5	; 0x05
    2594:	9e 81       	ldd	r25, Y+6	; 0x06
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	9e 83       	std	Y+6, r25	; 0x06
    259a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259c:	8d 81       	ldd	r24, Y+5	; 0x05
    259e:	9e 81       	ldd	r25, Y+6	; 0x06
    25a0:	00 97       	sbiw	r24, 0x00	; 0
    25a2:	69 f7       	brne	.-38     	; 0x257e <ADC_LM35_FUNCTION+0x222>
    25a4:	14 c0       	rjmp	.+40     	; 0x25ce <ADC_LM35_FUNCTION+0x272>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a6:	6f 81       	ldd	r22, Y+7	; 0x07
    25a8:	78 85       	ldd	r23, Y+8	; 0x08
    25aa:	89 85       	ldd	r24, Y+9	; 0x09
    25ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ae:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	9e 83       	std	Y+6, r25	; 0x06
    25b8:	8d 83       	std	Y+5, r24	; 0x05
    25ba:	8d 81       	ldd	r24, Y+5	; 0x05
    25bc:	9e 81       	ldd	r25, Y+6	; 0x06
    25be:	9a 83       	std	Y+2, r25	; 0x02
    25c0:	89 83       	std	Y+1, r24	; 0x01
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	9a 81       	ldd	r25, Y+2	; 0x02
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	f1 f7       	brne	.-4      	; 0x25c6 <ADC_LM35_FUNCTION+0x26a>
    25ca:	9a 83       	std	Y+2, r25	; 0x02
    25cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(400);
	LCD_VidClear();
    25ce:	0e 94 0d 11 	call	0x221a	; 0x221a <LCD_VidClear>
}
    25d2:	a0 96       	adiw	r28, 0x20	; 32
    25d4:	0f b6       	in	r0, 0x3f	; 63
    25d6:	f8 94       	cli
    25d8:	de bf       	out	0x3e, r29	; 62
    25da:	0f be       	out	0x3f, r0	; 63
    25dc:	cd bf       	out	0x3d, r28	; 61
    25de:	cf 91       	pop	r28
    25e0:	df 91       	pop	r29
    25e2:	08 95       	ret

000025e4 <ADC_LDR_FUNCTION>:

void ADC_LDR_FUNCTION(void) {
    25e4:	df 93       	push	r29
    25e6:	cf 93       	push	r28
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	6d 97       	sbiw	r28, 0x1d	; 29
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	f8 94       	cli
    25f2:	de bf       	out	0x3e, r29	; 62
    25f4:	0f be       	out	0x3f, r0	; 63
    25f6:	cd bf       	out	0x3d, r28	; 61
	u8 percentage = LDR_GetIntensityPercentage();
    25f8:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LDR_GetIntensityPercentage>
    25fc:	8d 8f       	std	Y+29, r24	; 0x1d
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	a8 e4       	ldi	r26, 0x48	; 72
    2604:	b2 e4       	ldi	r27, 0x42	; 66
    2606:	89 8f       	std	Y+25, r24	; 0x19
    2608:	9a 8f       	std	Y+26, r25	; 0x1a
    260a:	ab 8f       	std	Y+27, r26	; 0x1b
    260c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    260e:	69 8d       	ldd	r22, Y+25	; 0x19
    2610:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2612:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2614:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	4a e7       	ldi	r20, 0x7A	; 122
    261c:	55 e4       	ldi	r21, 0x45	; 69
    261e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	8d 8b       	std	Y+21, r24	; 0x15
    2628:	9e 8b       	std	Y+22, r25	; 0x16
    262a:	af 8b       	std	Y+23, r26	; 0x17
    262c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    262e:	6d 89       	ldd	r22, Y+21	; 0x15
    2630:	7e 89       	ldd	r23, Y+22	; 0x16
    2632:	8f 89       	ldd	r24, Y+23	; 0x17
    2634:	98 8d       	ldd	r25, Y+24	; 0x18
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e8       	ldi	r20, 0x80	; 128
    263c:	5f e3       	ldi	r21, 0x3F	; 63
    263e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2642:	88 23       	and	r24, r24
    2644:	2c f4       	brge	.+10     	; 0x2650 <ADC_LDR_FUNCTION+0x6c>
		__ticks = 1;
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	9c 8b       	std	Y+20, r25	; 0x14
    264c:	8b 8b       	std	Y+19, r24	; 0x13
    264e:	3f c0       	rjmp	.+126    	; 0x26ce <ADC_LDR_FUNCTION+0xea>
	else if (__tmp > 65535)
    2650:	6d 89       	ldd	r22, Y+21	; 0x15
    2652:	7e 89       	ldd	r23, Y+22	; 0x16
    2654:	8f 89       	ldd	r24, Y+23	; 0x17
    2656:	98 8d       	ldd	r25, Y+24	; 0x18
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	3f ef       	ldi	r19, 0xFF	; 255
    265c:	4f e7       	ldi	r20, 0x7F	; 127
    265e:	57 e4       	ldi	r21, 0x47	; 71
    2660:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2664:	18 16       	cp	r1, r24
    2666:	4c f5       	brge	.+82     	; 0x26ba <ADC_LDR_FUNCTION+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2668:	69 8d       	ldd	r22, Y+25	; 0x19
    266a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    266c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    266e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	40 e2       	ldi	r20, 0x20	; 32
    2676:	51 e4       	ldi	r21, 0x41	; 65
    2678:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	bc 01       	movw	r22, r24
    2682:	cd 01       	movw	r24, r26
    2684:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	9c 8b       	std	Y+20, r25	; 0x14
    268e:	8b 8b       	std	Y+19, r24	; 0x13
    2690:	0f c0       	rjmp	.+30     	; 0x26b0 <ADC_LDR_FUNCTION+0xcc>
    2692:	80 e9       	ldi	r24, 0x90	; 144
    2694:	91 e0       	ldi	r25, 0x01	; 1
    2696:	9a 8b       	std	Y+18, r25	; 0x12
    2698:	89 8b       	std	Y+17, r24	; 0x11
    269a:	89 89       	ldd	r24, Y+17	; 0x11
    269c:	9a 89       	ldd	r25, Y+18	; 0x12
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	f1 f7       	brne	.-4      	; 0x269e <ADC_LDR_FUNCTION+0xba>
    26a2:	9a 8b       	std	Y+18, r25	; 0x12
    26a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a6:	8b 89       	ldd	r24, Y+19	; 0x13
    26a8:	9c 89       	ldd	r25, Y+20	; 0x14
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	9c 8b       	std	Y+20, r25	; 0x14
    26ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b0:	8b 89       	ldd	r24, Y+19	; 0x13
    26b2:	9c 89       	ldd	r25, Y+20	; 0x14
    26b4:	00 97       	sbiw	r24, 0x00	; 0
    26b6:	69 f7       	brne	.-38     	; 0x2692 <ADC_LDR_FUNCTION+0xae>
    26b8:	14 c0       	rjmp	.+40     	; 0x26e2 <ADC_LDR_FUNCTION+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ba:	6d 89       	ldd	r22, Y+21	; 0x15
    26bc:	7e 89       	ldd	r23, Y+22	; 0x16
    26be:	8f 89       	ldd	r24, Y+23	; 0x17
    26c0:	98 8d       	ldd	r25, Y+24	; 0x18
    26c2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	9c 8b       	std	Y+20, r25	; 0x14
    26cc:	8b 8b       	std	Y+19, r24	; 0x13
    26ce:	8b 89       	ldd	r24, Y+19	; 0x13
    26d0:	9c 89       	ldd	r25, Y+20	; 0x14
    26d2:	98 8b       	std	Y+16, r25	; 0x10
    26d4:	8f 87       	std	Y+15, r24	; 0x0f
    26d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26d8:	98 89       	ldd	r25, Y+16	; 0x10
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	f1 f7       	brne	.-4      	; 0x26da <ADC_LDR_FUNCTION+0xf6>
    26de:	98 8b       	std	Y+16, r25	; 0x10
    26e0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	LCD_VidSendString("Light : ");
    26e2:	84 e7       	ldi	r24, 0x74	; 116
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	0e 94 32 10 	call	0x2064	; 0x2064 <LCD_VidSendString>
	LCD_VidSendint(percentage);
    26ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26ec:	88 2f       	mov	r24, r24
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <LCD_VidSendint>
	LCD_VidSendString(" %");
    26f4:	8d e7       	ldi	r24, 0x7D	; 125
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	0e 94 32 10 	call	0x2064	; 0x2064 <LCD_VidSendString>
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	a8 ec       	ldi	r26, 0xC8	; 200
    2702:	b3 e4       	ldi	r27, 0x43	; 67
    2704:	8b 87       	std	Y+11, r24	; 0x0b
    2706:	9c 87       	std	Y+12, r25	; 0x0c
    2708:	ad 87       	std	Y+13, r26	; 0x0d
    270a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    270c:	6b 85       	ldd	r22, Y+11	; 0x0b
    270e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2710:	8d 85       	ldd	r24, Y+13	; 0x0d
    2712:	9e 85       	ldd	r25, Y+14	; 0x0e
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	4a e7       	ldi	r20, 0x7A	; 122
    271a:	55 e4       	ldi	r21, 0x45	; 69
    271c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	8f 83       	std	Y+7, r24	; 0x07
    2726:	98 87       	std	Y+8, r25	; 0x08
    2728:	a9 87       	std	Y+9, r26	; 0x09
    272a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    272c:	6f 81       	ldd	r22, Y+7	; 0x07
    272e:	78 85       	ldd	r23, Y+8	; 0x08
    2730:	89 85       	ldd	r24, Y+9	; 0x09
    2732:	9a 85       	ldd	r25, Y+10	; 0x0a
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e8       	ldi	r20, 0x80	; 128
    273a:	5f e3       	ldi	r21, 0x3F	; 63
    273c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2740:	88 23       	and	r24, r24
    2742:	2c f4       	brge	.+10     	; 0x274e <ADC_LDR_FUNCTION+0x16a>
		__ticks = 1;
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	9e 83       	std	Y+6, r25	; 0x06
    274a:	8d 83       	std	Y+5, r24	; 0x05
    274c:	3f c0       	rjmp	.+126    	; 0x27cc <ADC_LDR_FUNCTION+0x1e8>
	else if (__tmp > 65535)
    274e:	6f 81       	ldd	r22, Y+7	; 0x07
    2750:	78 85       	ldd	r23, Y+8	; 0x08
    2752:	89 85       	ldd	r24, Y+9	; 0x09
    2754:	9a 85       	ldd	r25, Y+10	; 0x0a
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	3f ef       	ldi	r19, 0xFF	; 255
    275a:	4f e7       	ldi	r20, 0x7F	; 127
    275c:	57 e4       	ldi	r21, 0x47	; 71
    275e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2762:	18 16       	cp	r1, r24
    2764:	4c f5       	brge	.+82     	; 0x27b8 <ADC_LDR_FUNCTION+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2766:	6b 85       	ldd	r22, Y+11	; 0x0b
    2768:	7c 85       	ldd	r23, Y+12	; 0x0c
    276a:	8d 85       	ldd	r24, Y+13	; 0x0d
    276c:	9e 85       	ldd	r25, Y+14	; 0x0e
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e2       	ldi	r20, 0x20	; 32
    2774:	51 e4       	ldi	r21, 0x41	; 65
    2776:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	bc 01       	movw	r22, r24
    2780:	cd 01       	movw	r24, r26
    2782:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	9e 83       	std	Y+6, r25	; 0x06
    278c:	8d 83       	std	Y+5, r24	; 0x05
    278e:	0f c0       	rjmp	.+30     	; 0x27ae <ADC_LDR_FUNCTION+0x1ca>
    2790:	80 e9       	ldi	r24, 0x90	; 144
    2792:	91 e0       	ldi	r25, 0x01	; 1
    2794:	9c 83       	std	Y+4, r25	; 0x04
    2796:	8b 83       	std	Y+3, r24	; 0x03
    2798:	8b 81       	ldd	r24, Y+3	; 0x03
    279a:	9c 81       	ldd	r25, Y+4	; 0x04
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	f1 f7       	brne	.-4      	; 0x279c <ADC_LDR_FUNCTION+0x1b8>
    27a0:	9c 83       	std	Y+4, r25	; 0x04
    27a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a4:	8d 81       	ldd	r24, Y+5	; 0x05
    27a6:	9e 81       	ldd	r25, Y+6	; 0x06
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	9e 83       	std	Y+6, r25	; 0x06
    27ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ae:	8d 81       	ldd	r24, Y+5	; 0x05
    27b0:	9e 81       	ldd	r25, Y+6	; 0x06
    27b2:	00 97       	sbiw	r24, 0x00	; 0
    27b4:	69 f7       	brne	.-38     	; 0x2790 <ADC_LDR_FUNCTION+0x1ac>
    27b6:	14 c0       	rjmp	.+40     	; 0x27e0 <ADC_LDR_FUNCTION+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ba:	78 85       	ldd	r23, Y+8	; 0x08
    27bc:	89 85       	ldd	r24, Y+9	; 0x09
    27be:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	9e 83       	std	Y+6, r25	; 0x06
    27ca:	8d 83       	std	Y+5, r24	; 0x05
    27cc:	8d 81       	ldd	r24, Y+5	; 0x05
    27ce:	9e 81       	ldd	r25, Y+6	; 0x06
    27d0:	9a 83       	std	Y+2, r25	; 0x02
    27d2:	89 83       	std	Y+1, r24	; 0x01
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	9a 81       	ldd	r25, Y+2	; 0x02
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	f1 f7       	brne	.-4      	; 0x27d8 <ADC_LDR_FUNCTION+0x1f4>
    27dc:	9a 83       	std	Y+2, r25	; 0x02
    27de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(400);
	LCD_VidClear();
    27e0:	0e 94 0d 11 	call	0x221a	; 0x221a <LCD_VidClear>
}
    27e4:	6d 96       	adiw	r28, 0x1d	; 29
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61
    27f0:	cf 91       	pop	r28
    27f2:	df 91       	pop	r29
    27f4:	08 95       	ret

000027f6 <ADC_PIR_FUNCTION>:

void ADC_PIR_FUNCTION(void) {
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62
    27fe:	a1 97       	sbiw	r28, 0x21	; 33
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	f8 94       	cli
    2804:	de bf       	out	0x3e, r29	; 62
    2806:	0f be       	out	0x3f, r0	; 63
    2808:	cd bf       	out	0x3d, r28	; 61
	u16 pirValue = ADC_ADCResult();
    280a:	0e 94 92 08 	call	0x1124	; 0x1124 <ADC_ADCResult>
    280e:	99 a3       	std	Y+33, r25	; 0x21
    2810:	88 a3       	std	Y+32, r24	; 0x20

	u16 threshold = 512;
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	92 e0       	ldi	r25, 0x02	; 2
    2816:	9f 8f       	std	Y+31, r25	; 0x1f
    2818:	8e 8f       	std	Y+30, r24	; 0x1e

	if (pirValue > threshold) {
    281a:	28 a1       	ldd	r18, Y+32	; 0x20
    281c:	39 a1       	ldd	r19, Y+33	; 0x21
    281e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2820:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2822:	82 17       	cp	r24, r18
    2824:	93 07       	cpc	r25, r19
    2826:	30 f4       	brcc	.+12     	; 0x2834 <ADC_PIR_FUNCTION+0x3e>
		DIO_VidSetPinValue(Port_C, Pin0, Pin_High);
    2828:	82 e0       	ldi	r24, 0x02	; 2
    282a:	60 e0       	ldi	r22, 0x00	; 0
    282c:	41 e0       	ldi	r20, 0x01	; 1
    282e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>
    2832:	05 c0       	rjmp	.+10     	; 0x283e <ADC_PIR_FUNCTION+0x48>

	} else {
		DIO_VidSetPinValue(Port_C, Pin0, Pin_Low);
    2834:	82 e0       	ldi	r24, 0x02	; 2
    2836:	60 e0       	ldi	r22, 0x00	; 0
    2838:	40 e0       	ldi	r20, 0x00	; 0
    283a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>
	}
	u8 percentage = (pirValue / 1023) * 100;
    283e:	88 a1       	ldd	r24, Y+32	; 0x20
    2840:	99 a1       	ldd	r25, Y+33	; 0x21
    2842:	2f ef       	ldi	r18, 0xFF	; 255
    2844:	33 e0       	ldi	r19, 0x03	; 3
    2846:	b9 01       	movw	r22, r18
    2848:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__udivmodhi4>
    284c:	cb 01       	movw	r24, r22
    284e:	9c 01       	movw	r18, r24
    2850:	84 e6       	ldi	r24, 0x64	; 100
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	ac 01       	movw	r20, r24
    2856:	24 9f       	mul	r18, r20
    2858:	c0 01       	movw	r24, r0
    285a:	25 9f       	mul	r18, r21
    285c:	90 0d       	add	r25, r0
    285e:	34 9f       	mul	r19, r20
    2860:	90 0d       	add	r25, r0
    2862:	11 24       	eor	r1, r1
    2864:	8d 8f       	std	Y+29, r24	; 0x1d
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	a8 e4       	ldi	r26, 0x48	; 72
    286c:	b2 e4       	ldi	r27, 0x42	; 66
    286e:	89 8f       	std	Y+25, r24	; 0x19
    2870:	9a 8f       	std	Y+26, r25	; 0x1a
    2872:	ab 8f       	std	Y+27, r26	; 0x1b
    2874:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2876:	69 8d       	ldd	r22, Y+25	; 0x19
    2878:	7a 8d       	ldd	r23, Y+26	; 0x1a
    287a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    287c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	4a e7       	ldi	r20, 0x7A	; 122
    2884:	55 e4       	ldi	r21, 0x45	; 69
    2886:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	8d 8b       	std	Y+21, r24	; 0x15
    2890:	9e 8b       	std	Y+22, r25	; 0x16
    2892:	af 8b       	std	Y+23, r26	; 0x17
    2894:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2896:	6d 89       	ldd	r22, Y+21	; 0x15
    2898:	7e 89       	ldd	r23, Y+22	; 0x16
    289a:	8f 89       	ldd	r24, Y+23	; 0x17
    289c:	98 8d       	ldd	r25, Y+24	; 0x18
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	40 e8       	ldi	r20, 0x80	; 128
    28a4:	5f e3       	ldi	r21, 0x3F	; 63
    28a6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    28aa:	88 23       	and	r24, r24
    28ac:	2c f4       	brge	.+10     	; 0x28b8 <ADC_PIR_FUNCTION+0xc2>
		__ticks = 1;
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	9c 8b       	std	Y+20, r25	; 0x14
    28b4:	8b 8b       	std	Y+19, r24	; 0x13
    28b6:	3f c0       	rjmp	.+126    	; 0x2936 <ADC_PIR_FUNCTION+0x140>
	else if (__tmp > 65535)
    28b8:	6d 89       	ldd	r22, Y+21	; 0x15
    28ba:	7e 89       	ldd	r23, Y+22	; 0x16
    28bc:	8f 89       	ldd	r24, Y+23	; 0x17
    28be:	98 8d       	ldd	r25, Y+24	; 0x18
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	3f ef       	ldi	r19, 0xFF	; 255
    28c4:	4f e7       	ldi	r20, 0x7F	; 127
    28c6:	57 e4       	ldi	r21, 0x47	; 71
    28c8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    28cc:	18 16       	cp	r1, r24
    28ce:	4c f5       	brge	.+82     	; 0x2922 <ADC_PIR_FUNCTION+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d0:	69 8d       	ldd	r22, Y+25	; 0x19
    28d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	40 e2       	ldi	r20, 0x20	; 32
    28de:	51 e4       	ldi	r21, 0x41	; 65
    28e0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	bc 01       	movw	r22, r24
    28ea:	cd 01       	movw	r24, r26
    28ec:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	9c 8b       	std	Y+20, r25	; 0x14
    28f6:	8b 8b       	std	Y+19, r24	; 0x13
    28f8:	0f c0       	rjmp	.+30     	; 0x2918 <ADC_PIR_FUNCTION+0x122>
    28fa:	80 e9       	ldi	r24, 0x90	; 144
    28fc:	91 e0       	ldi	r25, 0x01	; 1
    28fe:	9a 8b       	std	Y+18, r25	; 0x12
    2900:	89 8b       	std	Y+17, r24	; 0x11
    2902:	89 89       	ldd	r24, Y+17	; 0x11
    2904:	9a 89       	ldd	r25, Y+18	; 0x12
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	f1 f7       	brne	.-4      	; 0x2906 <ADC_PIR_FUNCTION+0x110>
    290a:	9a 8b       	std	Y+18, r25	; 0x12
    290c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    290e:	8b 89       	ldd	r24, Y+19	; 0x13
    2910:	9c 89       	ldd	r25, Y+20	; 0x14
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	9c 8b       	std	Y+20, r25	; 0x14
    2916:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2918:	8b 89       	ldd	r24, Y+19	; 0x13
    291a:	9c 89       	ldd	r25, Y+20	; 0x14
    291c:	00 97       	sbiw	r24, 0x00	; 0
    291e:	69 f7       	brne	.-38     	; 0x28fa <ADC_PIR_FUNCTION+0x104>
    2920:	14 c0       	rjmp	.+40     	; 0x294a <ADC_PIR_FUNCTION+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2922:	6d 89       	ldd	r22, Y+21	; 0x15
    2924:	7e 89       	ldd	r23, Y+22	; 0x16
    2926:	8f 89       	ldd	r24, Y+23	; 0x17
    2928:	98 8d       	ldd	r25, Y+24	; 0x18
    292a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	9c 8b       	std	Y+20, r25	; 0x14
    2934:	8b 8b       	std	Y+19, r24	; 0x13
    2936:	8b 89       	ldd	r24, Y+19	; 0x13
    2938:	9c 89       	ldd	r25, Y+20	; 0x14
    293a:	98 8b       	std	Y+16, r25	; 0x10
    293c:	8f 87       	std	Y+15, r24	; 0x0f
    293e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2940:	98 89       	ldd	r25, Y+16	; 0x10
    2942:	01 97       	sbiw	r24, 0x01	; 1
    2944:	f1 f7       	brne	.-4      	; 0x2942 <ADC_PIR_FUNCTION+0x14c>
    2946:	98 8b       	std	Y+16, r25	; 0x10
    2948:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	LCD_VidSendString("digital : ");
    294a:	80 e8       	ldi	r24, 0x80	; 128
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	0e 94 32 10 	call	0x2064	; 0x2064 <LCD_VidSendString>
	LCD_VidSendint(percentage);
    2952:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2954:	88 2f       	mov	r24, r24
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <LCD_VidSendint>
	LCD_VidSendString(" %");
    295c:	8d e7       	ldi	r24, 0x7D	; 125
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	0e 94 32 10 	call	0x2064	; 0x2064 <LCD_VidSendString>
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	a8 ec       	ldi	r26, 0xC8	; 200
    296a:	b3 e4       	ldi	r27, 0x43	; 67
    296c:	8b 87       	std	Y+11, r24	; 0x0b
    296e:	9c 87       	std	Y+12, r25	; 0x0c
    2970:	ad 87       	std	Y+13, r26	; 0x0d
    2972:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2974:	6b 85       	ldd	r22, Y+11	; 0x0b
    2976:	7c 85       	ldd	r23, Y+12	; 0x0c
    2978:	8d 85       	ldd	r24, Y+13	; 0x0d
    297a:	9e 85       	ldd	r25, Y+14	; 0x0e
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	4a e7       	ldi	r20, 0x7A	; 122
    2982:	55 e4       	ldi	r21, 0x45	; 69
    2984:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	8f 83       	std	Y+7, r24	; 0x07
    298e:	98 87       	std	Y+8, r25	; 0x08
    2990:	a9 87       	std	Y+9, r26	; 0x09
    2992:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2994:	6f 81       	ldd	r22, Y+7	; 0x07
    2996:	78 85       	ldd	r23, Y+8	; 0x08
    2998:	89 85       	ldd	r24, Y+9	; 0x09
    299a:	9a 85       	ldd	r25, Y+10	; 0x0a
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e8       	ldi	r20, 0x80	; 128
    29a2:	5f e3       	ldi	r21, 0x3F	; 63
    29a4:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    29a8:	88 23       	and	r24, r24
    29aa:	2c f4       	brge	.+10     	; 0x29b6 <ADC_PIR_FUNCTION+0x1c0>
		__ticks = 1;
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	9e 83       	std	Y+6, r25	; 0x06
    29b2:	8d 83       	std	Y+5, r24	; 0x05
    29b4:	3f c0       	rjmp	.+126    	; 0x2a34 <ADC_PIR_FUNCTION+0x23e>
	else if (__tmp > 65535)
    29b6:	6f 81       	ldd	r22, Y+7	; 0x07
    29b8:	78 85       	ldd	r23, Y+8	; 0x08
    29ba:	89 85       	ldd	r24, Y+9	; 0x09
    29bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	3f ef       	ldi	r19, 0xFF	; 255
    29c2:	4f e7       	ldi	r20, 0x7F	; 127
    29c4:	57 e4       	ldi	r21, 0x47	; 71
    29c6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    29ca:	18 16       	cp	r1, r24
    29cc:	4c f5       	brge	.+82     	; 0x2a20 <ADC_PIR_FUNCTION+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e2       	ldi	r20, 0x20	; 32
    29dc:	51 e4       	ldi	r21, 0x41	; 65
    29de:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	bc 01       	movw	r22, r24
    29e8:	cd 01       	movw	r24, r26
    29ea:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	9e 83       	std	Y+6, r25	; 0x06
    29f4:	8d 83       	std	Y+5, r24	; 0x05
    29f6:	0f c0       	rjmp	.+30     	; 0x2a16 <ADC_PIR_FUNCTION+0x220>
    29f8:	80 e9       	ldi	r24, 0x90	; 144
    29fa:	91 e0       	ldi	r25, 0x01	; 1
    29fc:	9c 83       	std	Y+4, r25	; 0x04
    29fe:	8b 83       	std	Y+3, r24	; 0x03
    2a00:	8b 81       	ldd	r24, Y+3	; 0x03
    2a02:	9c 81       	ldd	r25, Y+4	; 0x04
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	f1 f7       	brne	.-4      	; 0x2a04 <ADC_PIR_FUNCTION+0x20e>
    2a08:	9c 83       	std	Y+4, r25	; 0x04
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	9e 83       	std	Y+6, r25	; 0x06
    2a14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a16:	8d 81       	ldd	r24, Y+5	; 0x05
    2a18:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1a:	00 97       	sbiw	r24, 0x00	; 0
    2a1c:	69 f7       	brne	.-38     	; 0x29f8 <ADC_PIR_FUNCTION+0x202>
    2a1e:	14 c0       	rjmp	.+40     	; 0x2a48 <ADC_PIR_FUNCTION+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a20:	6f 81       	ldd	r22, Y+7	; 0x07
    2a22:	78 85       	ldd	r23, Y+8	; 0x08
    2a24:	89 85       	ldd	r24, Y+9	; 0x09
    2a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a28:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	9e 83       	std	Y+6, r25	; 0x06
    2a32:	8d 83       	std	Y+5, r24	; 0x05
    2a34:	8d 81       	ldd	r24, Y+5	; 0x05
    2a36:	9e 81       	ldd	r25, Y+6	; 0x06
    2a38:	9a 83       	std	Y+2, r25	; 0x02
    2a3a:	89 83       	std	Y+1, r24	; 0x01
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	f1 f7       	brne	.-4      	; 0x2a40 <ADC_PIR_FUNCTION+0x24a>
    2a44:	9a 83       	std	Y+2, r25	; 0x02
    2a46:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(400);
	LCD_VidClear();
    2a48:	0e 94 0d 11 	call	0x221a	; 0x221a <LCD_VidClear>
}
    2a4c:	a1 96       	adiw	r28, 0x21	; 33
    2a4e:	0f b6       	in	r0, 0x3f	; 63
    2a50:	f8 94       	cli
    2a52:	de bf       	out	0x3e, r29	; 62
    2a54:	0f be       	out	0x3f, r0	; 63
    2a56:	cd bf       	out	0x3d, r28	; 61
    2a58:	cf 91       	pop	r28
    2a5a:	df 91       	pop	r29
    2a5c:	08 95       	ret

00002a5e <ADC_FLAME_FUNCTION>:
void ADC_FLAME_FUNCTION(void) {
    2a5e:	df 93       	push	r29
    2a60:	cf 93       	push	r28
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    2a66:	60 97       	sbiw	r28, 0x10	; 16
    2a68:	0f b6       	in	r0, 0x3f	; 63
    2a6a:	f8 94       	cli
    2a6c:	de bf       	out	0x3e, r29	; 62
    2a6e:	0f be       	out	0x3f, r0	; 63
    2a70:	cd bf       	out	0x3d, r28	; 61
	u16 flameValue = ADC_ADCResult();
    2a72:	0e 94 92 08 	call	0x1124	; 0x1124 <ADC_ADCResult>
    2a76:	98 8b       	std	Y+16, r25	; 0x10
    2a78:	8f 87       	std	Y+15, r24	; 0x0f

	if (flameValue != 0 ) {
    2a7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a7c:	98 89       	ldd	r25, Y+16	; 0x10
    2a7e:	00 97       	sbiw	r24, 0x00	; 0
    2a80:	31 f0       	breq	.+12     	; 0x2a8e <ADC_FLAME_FUNCTION+0x30>
		DIO_VidSetPinValue(Port_C, Pin1, Pin_High);
    2a82:	82 e0       	ldi	r24, 0x02	; 2
    2a84:	61 e0       	ldi	r22, 0x01	; 1
    2a86:	41 e0       	ldi	r20, 0x01	; 1
    2a88:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>
    2a8c:	05 c0       	rjmp	.+10     	; 0x2a98 <ADC_FLAME_FUNCTION+0x3a>

	} else {
		DIO_VidSetPinValue(Port_C, Pin1, Pin_Low);
    2a8e:	82 e0       	ldi	r24, 0x02	; 2
    2a90:	61 e0       	ldi	r22, 0x01	; 1
    2a92:	40 e0       	ldi	r20, 0x00	; 0
    2a94:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_VidSetPinValue>
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	a8 ec       	ldi	r26, 0xC8	; 200
    2a9e:	b2 e4       	ldi	r27, 0x42	; 66
    2aa0:	8b 87       	std	Y+11, r24	; 0x0b
    2aa2:	9c 87       	std	Y+12, r25	; 0x0c
    2aa4:	ad 87       	std	Y+13, r26	; 0x0d
    2aa6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	4a e7       	ldi	r20, 0x7A	; 122
    2ab6:	55 e4       	ldi	r21, 0x45	; 69
    2ab8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	8f 83       	std	Y+7, r24	; 0x07
    2ac2:	98 87       	std	Y+8, r25	; 0x08
    2ac4:	a9 87       	std	Y+9, r26	; 0x09
    2ac6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aca:	78 85       	ldd	r23, Y+8	; 0x08
    2acc:	89 85       	ldd	r24, Y+9	; 0x09
    2ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	40 e8       	ldi	r20, 0x80	; 128
    2ad6:	5f e3       	ldi	r21, 0x3F	; 63
    2ad8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2adc:	88 23       	and	r24, r24
    2ade:	2c f4       	brge	.+10     	; 0x2aea <ADC_FLAME_FUNCTION+0x8c>
		__ticks = 1;
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	9e 83       	std	Y+6, r25	; 0x06
    2ae6:	8d 83       	std	Y+5, r24	; 0x05
    2ae8:	3f c0       	rjmp	.+126    	; 0x2b68 <ADC_FLAME_FUNCTION+0x10a>
	else if (__tmp > 65535)
    2aea:	6f 81       	ldd	r22, Y+7	; 0x07
    2aec:	78 85       	ldd	r23, Y+8	; 0x08
    2aee:	89 85       	ldd	r24, Y+9	; 0x09
    2af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	3f ef       	ldi	r19, 0xFF	; 255
    2af6:	4f e7       	ldi	r20, 0x7F	; 127
    2af8:	57 e4       	ldi	r21, 0x47	; 71
    2afa:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2afe:	18 16       	cp	r1, r24
    2b00:	4c f5       	brge	.+82     	; 0x2b54 <ADC_FLAME_FUNCTION+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	40 e2       	ldi	r20, 0x20	; 32
    2b10:	51 e4       	ldi	r21, 0x41	; 65
    2b12:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	bc 01       	movw	r22, r24
    2b1c:	cd 01       	movw	r24, r26
    2b1e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	9e 83       	std	Y+6, r25	; 0x06
    2b28:	8d 83       	std	Y+5, r24	; 0x05
    2b2a:	0f c0       	rjmp	.+30     	; 0x2b4a <ADC_FLAME_FUNCTION+0xec>
    2b2c:	80 e9       	ldi	r24, 0x90	; 144
    2b2e:	91 e0       	ldi	r25, 0x01	; 1
    2b30:	9c 83       	std	Y+4, r25	; 0x04
    2b32:	8b 83       	std	Y+3, r24	; 0x03
    2b34:	8b 81       	ldd	r24, Y+3	; 0x03
    2b36:	9c 81       	ldd	r25, Y+4	; 0x04
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	f1 f7       	brne	.-4      	; 0x2b38 <ADC_FLAME_FUNCTION+0xda>
    2b3c:	9c 83       	std	Y+4, r25	; 0x04
    2b3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b40:	8d 81       	ldd	r24, Y+5	; 0x05
    2b42:	9e 81       	ldd	r25, Y+6	; 0x06
    2b44:	01 97       	sbiw	r24, 0x01	; 1
    2b46:	9e 83       	std	Y+6, r25	; 0x06
    2b48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4e:	00 97       	sbiw	r24, 0x00	; 0
    2b50:	69 f7       	brne	.-38     	; 0x2b2c <ADC_FLAME_FUNCTION+0xce>
    2b52:	14 c0       	rjmp	.+40     	; 0x2b7c <ADC_FLAME_FUNCTION+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b54:	6f 81       	ldd	r22, Y+7	; 0x07
    2b56:	78 85       	ldd	r23, Y+8	; 0x08
    2b58:	89 85       	ldd	r24, Y+9	; 0x09
    2b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b5c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	9e 83       	std	Y+6, r25	; 0x06
    2b66:	8d 83       	std	Y+5, r24	; 0x05
    2b68:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6c:	9a 83       	std	Y+2, r25	; 0x02
    2b6e:	89 83       	std	Y+1, r24	; 0x01
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	9a 81       	ldd	r25, Y+2	; 0x02
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	f1 f7       	brne	.-4      	; 0x2b74 <ADC_FLAME_FUNCTION+0x116>
    2b78:	9a 83       	std	Y+2, r25	; 0x02
    2b7a:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(100);
}
    2b7c:	60 96       	adiw	r28, 0x10	; 16
    2b7e:	0f b6       	in	r0, 0x3f	; 63
    2b80:	f8 94       	cli
    2b82:	de bf       	out	0x3e, r29	; 62
    2b84:	0f be       	out	0x3f, r0	; 63
    2b86:	cd bf       	out	0x3d, r28	; 61
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <__udivmodhi4>:
    2b8e:	aa 1b       	sub	r26, r26
    2b90:	bb 1b       	sub	r27, r27
    2b92:	51 e1       	ldi	r21, 0x11	; 17
    2b94:	07 c0       	rjmp	.+14     	; 0x2ba4 <__udivmodhi4_ep>

00002b96 <__udivmodhi4_loop>:
    2b96:	aa 1f       	adc	r26, r26
    2b98:	bb 1f       	adc	r27, r27
    2b9a:	a6 17       	cp	r26, r22
    2b9c:	b7 07       	cpc	r27, r23
    2b9e:	10 f0       	brcs	.+4      	; 0x2ba4 <__udivmodhi4_ep>
    2ba0:	a6 1b       	sub	r26, r22
    2ba2:	b7 0b       	sbc	r27, r23

00002ba4 <__udivmodhi4_ep>:
    2ba4:	88 1f       	adc	r24, r24
    2ba6:	99 1f       	adc	r25, r25
    2ba8:	5a 95       	dec	r21
    2baa:	a9 f7       	brne	.-22     	; 0x2b96 <__udivmodhi4_loop>
    2bac:	80 95       	com	r24
    2bae:	90 95       	com	r25
    2bb0:	bc 01       	movw	r22, r24
    2bb2:	cd 01       	movw	r24, r26
    2bb4:	08 95       	ret

00002bb6 <__divmodhi4>:
    2bb6:	97 fb       	bst	r25, 7
    2bb8:	09 2e       	mov	r0, r25
    2bba:	07 26       	eor	r0, r23
    2bbc:	0a d0       	rcall	.+20     	; 0x2bd2 <__divmodhi4_neg1>
    2bbe:	77 fd       	sbrc	r23, 7
    2bc0:	04 d0       	rcall	.+8      	; 0x2bca <__divmodhi4_neg2>
    2bc2:	e5 df       	rcall	.-54     	; 0x2b8e <__udivmodhi4>
    2bc4:	06 d0       	rcall	.+12     	; 0x2bd2 <__divmodhi4_neg1>
    2bc6:	00 20       	and	r0, r0
    2bc8:	1a f4       	brpl	.+6      	; 0x2bd0 <__divmodhi4_exit>

00002bca <__divmodhi4_neg2>:
    2bca:	70 95       	com	r23
    2bcc:	61 95       	neg	r22
    2bce:	7f 4f       	sbci	r23, 0xFF	; 255

00002bd0 <__divmodhi4_exit>:
    2bd0:	08 95       	ret

00002bd2 <__divmodhi4_neg1>:
    2bd2:	f6 f7       	brtc	.-4      	; 0x2bd0 <__divmodhi4_exit>
    2bd4:	90 95       	com	r25
    2bd6:	81 95       	neg	r24
    2bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bda:	08 95       	ret

00002bdc <__prologue_saves__>:
    2bdc:	2f 92       	push	r2
    2bde:	3f 92       	push	r3
    2be0:	4f 92       	push	r4
    2be2:	5f 92       	push	r5
    2be4:	6f 92       	push	r6
    2be6:	7f 92       	push	r7
    2be8:	8f 92       	push	r8
    2bea:	9f 92       	push	r9
    2bec:	af 92       	push	r10
    2bee:	bf 92       	push	r11
    2bf0:	cf 92       	push	r12
    2bf2:	df 92       	push	r13
    2bf4:	ef 92       	push	r14
    2bf6:	ff 92       	push	r15
    2bf8:	0f 93       	push	r16
    2bfa:	1f 93       	push	r17
    2bfc:	cf 93       	push	r28
    2bfe:	df 93       	push	r29
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	ca 1b       	sub	r28, r26
    2c06:	db 0b       	sbc	r29, r27
    2c08:	0f b6       	in	r0, 0x3f	; 63
    2c0a:	f8 94       	cli
    2c0c:	de bf       	out	0x3e, r29	; 62
    2c0e:	0f be       	out	0x3f, r0	; 63
    2c10:	cd bf       	out	0x3d, r28	; 61
    2c12:	09 94       	ijmp

00002c14 <__epilogue_restores__>:
    2c14:	2a 88       	ldd	r2, Y+18	; 0x12
    2c16:	39 88       	ldd	r3, Y+17	; 0x11
    2c18:	48 88       	ldd	r4, Y+16	; 0x10
    2c1a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c1c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c1e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c20:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c22:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c24:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c26:	b9 84       	ldd	r11, Y+9	; 0x09
    2c28:	c8 84       	ldd	r12, Y+8	; 0x08
    2c2a:	df 80       	ldd	r13, Y+7	; 0x07
    2c2c:	ee 80       	ldd	r14, Y+6	; 0x06
    2c2e:	fd 80       	ldd	r15, Y+5	; 0x05
    2c30:	0c 81       	ldd	r16, Y+4	; 0x04
    2c32:	1b 81       	ldd	r17, Y+3	; 0x03
    2c34:	aa 81       	ldd	r26, Y+2	; 0x02
    2c36:	b9 81       	ldd	r27, Y+1	; 0x01
    2c38:	ce 0f       	add	r28, r30
    2c3a:	d1 1d       	adc	r29, r1
    2c3c:	0f b6       	in	r0, 0x3f	; 63
    2c3e:	f8 94       	cli
    2c40:	de bf       	out	0x3e, r29	; 62
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	cd bf       	out	0x3d, r28	; 61
    2c46:	ed 01       	movw	r28, r26
    2c48:	08 95       	ret

00002c4a <dtostrf>:
    2c4a:	ef 92       	push	r14
    2c4c:	ff 92       	push	r15
    2c4e:	0f 93       	push	r16
    2c50:	1f 93       	push	r17
    2c52:	f2 2f       	mov	r31, r18
    2c54:	f0 2e       	mov	r15, r16
    2c56:	47 fd       	sbrc	r20, 7
    2c58:	02 c0       	rjmp	.+4      	; 0x2c5e <dtostrf+0x14>
    2c5a:	e4 e0       	ldi	r30, 0x04	; 4
    2c5c:	01 c0       	rjmp	.+2      	; 0x2c60 <dtostrf+0x16>
    2c5e:	e4 e1       	ldi	r30, 0x14	; 20
    2c60:	24 2f       	mov	r18, r20
    2c62:	33 27       	eor	r19, r19
    2c64:	27 fd       	sbrc	r18, 7
    2c66:	30 95       	com	r19
    2c68:	37 ff       	sbrs	r19, 7
    2c6a:	03 c0       	rjmp	.+6      	; 0x2c72 <dtostrf+0x28>
    2c6c:	30 95       	com	r19
    2c6e:	21 95       	neg	r18
    2c70:	3f 4f       	sbci	r19, 0xFF	; 255
    2c72:	4f 2d       	mov	r20, r15
    2c74:	51 2f       	mov	r21, r17
    2c76:	0f 2f       	mov	r16, r31
    2c78:	ee 2e       	mov	r14, r30
    2c7a:	0e 94 47 18 	call	0x308e	; 0x308e <dtoa_prf>
    2c7e:	8f 2d       	mov	r24, r15
    2c80:	91 2f       	mov	r25, r17
    2c82:	1f 91       	pop	r17
    2c84:	0f 91       	pop	r16
    2c86:	ff 90       	pop	r15
    2c88:	ef 90       	pop	r14
    2c8a:	08 95       	ret

00002c8c <sprintf>:
    2c8c:	ae e0       	ldi	r26, 0x0E	; 14
    2c8e:	b0 e0       	ldi	r27, 0x00	; 0
    2c90:	ec e4       	ldi	r30, 0x4C	; 76
    2c92:	f6 e1       	ldi	r31, 0x16	; 22
    2c94:	0c 94 fc 15 	jmp	0x2bf8	; 0x2bf8 <__prologue_saves__+0x1c>
    2c98:	0d 89       	ldd	r16, Y+21	; 0x15
    2c9a:	1e 89       	ldd	r17, Y+22	; 0x16
    2c9c:	86 e0       	ldi	r24, 0x06	; 6
    2c9e:	8c 83       	std	Y+4, r24	; 0x04
    2ca0:	1a 83       	std	Y+2, r17	; 0x02
    2ca2:	09 83       	std	Y+1, r16	; 0x01
    2ca4:	8f ef       	ldi	r24, 0xFF	; 255
    2ca6:	9f e7       	ldi	r25, 0x7F	; 127
    2ca8:	9e 83       	std	Y+6, r25	; 0x06
    2caa:	8d 83       	std	Y+5, r24	; 0x05
    2cac:	9e 01       	movw	r18, r28
    2cae:	27 5e       	subi	r18, 0xE7	; 231
    2cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb2:	ce 01       	movw	r24, r28
    2cb4:	01 96       	adiw	r24, 0x01	; 1
    2cb6:	6f 89       	ldd	r22, Y+23	; 0x17
    2cb8:	78 8d       	ldd	r23, Y+24	; 0x18
    2cba:	a9 01       	movw	r20, r18
    2cbc:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <vfprintf>
    2cc0:	2f 81       	ldd	r18, Y+7	; 0x07
    2cc2:	38 85       	ldd	r19, Y+8	; 0x08
    2cc4:	02 0f       	add	r16, r18
    2cc6:	13 1f       	adc	r17, r19
    2cc8:	f8 01       	movw	r30, r16
    2cca:	10 82       	st	Z, r1
    2ccc:	2e 96       	adiw	r28, 0x0e	; 14
    2cce:	e4 e0       	ldi	r30, 0x04	; 4
    2cd0:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__epilogue_restores__+0x1c>

00002cd4 <vfprintf>:
    2cd4:	ab e0       	ldi	r26, 0x0B	; 11
    2cd6:	b0 e0       	ldi	r27, 0x00	; 0
    2cd8:	e0 e7       	ldi	r30, 0x70	; 112
    2cda:	f6 e1       	ldi	r31, 0x16	; 22
    2cdc:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <__prologue_saves__>
    2ce0:	3c 01       	movw	r6, r24
    2ce2:	2b 01       	movw	r4, r22
    2ce4:	5a 01       	movw	r10, r20
    2ce6:	fc 01       	movw	r30, r24
    2ce8:	17 82       	std	Z+7, r1	; 0x07
    2cea:	16 82       	std	Z+6, r1	; 0x06
    2cec:	83 81       	ldd	r24, Z+3	; 0x03
    2cee:	81 fd       	sbrc	r24, 1
    2cf0:	03 c0       	rjmp	.+6      	; 0x2cf8 <vfprintf+0x24>
    2cf2:	6f ef       	ldi	r22, 0xFF	; 255
    2cf4:	7f ef       	ldi	r23, 0xFF	; 255
    2cf6:	c6 c1       	rjmp	.+908    	; 0x3084 <vfprintf+0x3b0>
    2cf8:	9a e0       	ldi	r25, 0x0A	; 10
    2cfa:	89 2e       	mov	r8, r25
    2cfc:	1e 01       	movw	r2, r28
    2cfe:	08 94       	sec
    2d00:	21 1c       	adc	r2, r1
    2d02:	31 1c       	adc	r3, r1
    2d04:	f3 01       	movw	r30, r6
    2d06:	23 81       	ldd	r18, Z+3	; 0x03
    2d08:	f2 01       	movw	r30, r4
    2d0a:	23 fd       	sbrc	r18, 3
    2d0c:	85 91       	lpm	r24, Z+
    2d0e:	23 ff       	sbrs	r18, 3
    2d10:	81 91       	ld	r24, Z+
    2d12:	2f 01       	movw	r4, r30
    2d14:	88 23       	and	r24, r24
    2d16:	09 f4       	brne	.+2      	; 0x2d1a <vfprintf+0x46>
    2d18:	b2 c1       	rjmp	.+868    	; 0x307e <vfprintf+0x3aa>
    2d1a:	85 32       	cpi	r24, 0x25	; 37
    2d1c:	39 f4       	brne	.+14     	; 0x2d2c <vfprintf+0x58>
    2d1e:	23 fd       	sbrc	r18, 3
    2d20:	85 91       	lpm	r24, Z+
    2d22:	23 ff       	sbrs	r18, 3
    2d24:	81 91       	ld	r24, Z+
    2d26:	2f 01       	movw	r4, r30
    2d28:	85 32       	cpi	r24, 0x25	; 37
    2d2a:	29 f4       	brne	.+10     	; 0x2d36 <vfprintf+0x62>
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	b3 01       	movw	r22, r6
    2d30:	0e 94 97 1a 	call	0x352e	; 0x352e <fputc>
    2d34:	e7 cf       	rjmp	.-50     	; 0x2d04 <vfprintf+0x30>
    2d36:	98 2f       	mov	r25, r24
    2d38:	ff 24       	eor	r15, r15
    2d3a:	ee 24       	eor	r14, r14
    2d3c:	99 24       	eor	r9, r9
    2d3e:	ff e1       	ldi	r31, 0x1F	; 31
    2d40:	ff 15       	cp	r31, r15
    2d42:	d0 f0       	brcs	.+52     	; 0x2d78 <vfprintf+0xa4>
    2d44:	9b 32       	cpi	r25, 0x2B	; 43
    2d46:	69 f0       	breq	.+26     	; 0x2d62 <vfprintf+0x8e>
    2d48:	9c 32       	cpi	r25, 0x2C	; 44
    2d4a:	28 f4       	brcc	.+10     	; 0x2d56 <vfprintf+0x82>
    2d4c:	90 32       	cpi	r25, 0x20	; 32
    2d4e:	59 f0       	breq	.+22     	; 0x2d66 <vfprintf+0x92>
    2d50:	93 32       	cpi	r25, 0x23	; 35
    2d52:	91 f4       	brne	.+36     	; 0x2d78 <vfprintf+0xa4>
    2d54:	0e c0       	rjmp	.+28     	; 0x2d72 <vfprintf+0x9e>
    2d56:	9d 32       	cpi	r25, 0x2D	; 45
    2d58:	49 f0       	breq	.+18     	; 0x2d6c <vfprintf+0x98>
    2d5a:	90 33       	cpi	r25, 0x30	; 48
    2d5c:	69 f4       	brne	.+26     	; 0x2d78 <vfprintf+0xa4>
    2d5e:	41 e0       	ldi	r20, 0x01	; 1
    2d60:	24 c0       	rjmp	.+72     	; 0x2daa <vfprintf+0xd6>
    2d62:	52 e0       	ldi	r21, 0x02	; 2
    2d64:	f5 2a       	or	r15, r21
    2d66:	84 e0       	ldi	r24, 0x04	; 4
    2d68:	f8 2a       	or	r15, r24
    2d6a:	28 c0       	rjmp	.+80     	; 0x2dbc <vfprintf+0xe8>
    2d6c:	98 e0       	ldi	r25, 0x08	; 8
    2d6e:	f9 2a       	or	r15, r25
    2d70:	25 c0       	rjmp	.+74     	; 0x2dbc <vfprintf+0xe8>
    2d72:	e0 e1       	ldi	r30, 0x10	; 16
    2d74:	fe 2a       	or	r15, r30
    2d76:	22 c0       	rjmp	.+68     	; 0x2dbc <vfprintf+0xe8>
    2d78:	f7 fc       	sbrc	r15, 7
    2d7a:	29 c0       	rjmp	.+82     	; 0x2dce <vfprintf+0xfa>
    2d7c:	89 2f       	mov	r24, r25
    2d7e:	80 53       	subi	r24, 0x30	; 48
    2d80:	8a 30       	cpi	r24, 0x0A	; 10
    2d82:	70 f4       	brcc	.+28     	; 0x2da0 <vfprintf+0xcc>
    2d84:	f6 fe       	sbrs	r15, 6
    2d86:	05 c0       	rjmp	.+10     	; 0x2d92 <vfprintf+0xbe>
    2d88:	98 9c       	mul	r9, r8
    2d8a:	90 2c       	mov	r9, r0
    2d8c:	11 24       	eor	r1, r1
    2d8e:	98 0e       	add	r9, r24
    2d90:	15 c0       	rjmp	.+42     	; 0x2dbc <vfprintf+0xe8>
    2d92:	e8 9c       	mul	r14, r8
    2d94:	e0 2c       	mov	r14, r0
    2d96:	11 24       	eor	r1, r1
    2d98:	e8 0e       	add	r14, r24
    2d9a:	f0 e2       	ldi	r31, 0x20	; 32
    2d9c:	ff 2a       	or	r15, r31
    2d9e:	0e c0       	rjmp	.+28     	; 0x2dbc <vfprintf+0xe8>
    2da0:	9e 32       	cpi	r25, 0x2E	; 46
    2da2:	29 f4       	brne	.+10     	; 0x2dae <vfprintf+0xda>
    2da4:	f6 fc       	sbrc	r15, 6
    2da6:	6b c1       	rjmp	.+726    	; 0x307e <vfprintf+0x3aa>
    2da8:	40 e4       	ldi	r20, 0x40	; 64
    2daa:	f4 2a       	or	r15, r20
    2dac:	07 c0       	rjmp	.+14     	; 0x2dbc <vfprintf+0xe8>
    2dae:	9c 36       	cpi	r25, 0x6C	; 108
    2db0:	19 f4       	brne	.+6      	; 0x2db8 <vfprintf+0xe4>
    2db2:	50 e8       	ldi	r21, 0x80	; 128
    2db4:	f5 2a       	or	r15, r21
    2db6:	02 c0       	rjmp	.+4      	; 0x2dbc <vfprintf+0xe8>
    2db8:	98 36       	cpi	r25, 0x68	; 104
    2dba:	49 f4       	brne	.+18     	; 0x2dce <vfprintf+0xfa>
    2dbc:	f2 01       	movw	r30, r4
    2dbe:	23 fd       	sbrc	r18, 3
    2dc0:	95 91       	lpm	r25, Z+
    2dc2:	23 ff       	sbrs	r18, 3
    2dc4:	91 91       	ld	r25, Z+
    2dc6:	2f 01       	movw	r4, r30
    2dc8:	99 23       	and	r25, r25
    2dca:	09 f0       	breq	.+2      	; 0x2dce <vfprintf+0xfa>
    2dcc:	b8 cf       	rjmp	.-144    	; 0x2d3e <vfprintf+0x6a>
    2dce:	89 2f       	mov	r24, r25
    2dd0:	85 54       	subi	r24, 0x45	; 69
    2dd2:	83 30       	cpi	r24, 0x03	; 3
    2dd4:	18 f0       	brcs	.+6      	; 0x2ddc <vfprintf+0x108>
    2dd6:	80 52       	subi	r24, 0x20	; 32
    2dd8:	83 30       	cpi	r24, 0x03	; 3
    2dda:	38 f4       	brcc	.+14     	; 0x2dea <vfprintf+0x116>
    2ddc:	44 e0       	ldi	r20, 0x04	; 4
    2dde:	50 e0       	ldi	r21, 0x00	; 0
    2de0:	a4 0e       	add	r10, r20
    2de2:	b5 1e       	adc	r11, r21
    2de4:	5f e3       	ldi	r21, 0x3F	; 63
    2de6:	59 83       	std	Y+1, r21	; 0x01
    2de8:	0f c0       	rjmp	.+30     	; 0x2e08 <vfprintf+0x134>
    2dea:	93 36       	cpi	r25, 0x63	; 99
    2dec:	31 f0       	breq	.+12     	; 0x2dfa <vfprintf+0x126>
    2dee:	93 37       	cpi	r25, 0x73	; 115
    2df0:	79 f0       	breq	.+30     	; 0x2e10 <vfprintf+0x13c>
    2df2:	93 35       	cpi	r25, 0x53	; 83
    2df4:	09 f0       	breq	.+2      	; 0x2df8 <vfprintf+0x124>
    2df6:	56 c0       	rjmp	.+172    	; 0x2ea4 <vfprintf+0x1d0>
    2df8:	20 c0       	rjmp	.+64     	; 0x2e3a <vfprintf+0x166>
    2dfa:	f5 01       	movw	r30, r10
    2dfc:	80 81       	ld	r24, Z
    2dfe:	89 83       	std	Y+1, r24	; 0x01
    2e00:	42 e0       	ldi	r20, 0x02	; 2
    2e02:	50 e0       	ldi	r21, 0x00	; 0
    2e04:	a4 0e       	add	r10, r20
    2e06:	b5 1e       	adc	r11, r21
    2e08:	61 01       	movw	r12, r2
    2e0a:	01 e0       	ldi	r16, 0x01	; 1
    2e0c:	10 e0       	ldi	r17, 0x00	; 0
    2e0e:	12 c0       	rjmp	.+36     	; 0x2e34 <vfprintf+0x160>
    2e10:	f5 01       	movw	r30, r10
    2e12:	c0 80       	ld	r12, Z
    2e14:	d1 80       	ldd	r13, Z+1	; 0x01
    2e16:	f6 fc       	sbrc	r15, 6
    2e18:	03 c0       	rjmp	.+6      	; 0x2e20 <vfprintf+0x14c>
    2e1a:	6f ef       	ldi	r22, 0xFF	; 255
    2e1c:	7f ef       	ldi	r23, 0xFF	; 255
    2e1e:	02 c0       	rjmp	.+4      	; 0x2e24 <vfprintf+0x150>
    2e20:	69 2d       	mov	r22, r9
    2e22:	70 e0       	ldi	r23, 0x00	; 0
    2e24:	42 e0       	ldi	r20, 0x02	; 2
    2e26:	50 e0       	ldi	r21, 0x00	; 0
    2e28:	a4 0e       	add	r10, r20
    2e2a:	b5 1e       	adc	r11, r21
    2e2c:	c6 01       	movw	r24, r12
    2e2e:	0e 94 8c 1a 	call	0x3518	; 0x3518 <strnlen>
    2e32:	8c 01       	movw	r16, r24
    2e34:	5f e7       	ldi	r21, 0x7F	; 127
    2e36:	f5 22       	and	r15, r21
    2e38:	14 c0       	rjmp	.+40     	; 0x2e62 <vfprintf+0x18e>
    2e3a:	f5 01       	movw	r30, r10
    2e3c:	c0 80       	ld	r12, Z
    2e3e:	d1 80       	ldd	r13, Z+1	; 0x01
    2e40:	f6 fc       	sbrc	r15, 6
    2e42:	03 c0       	rjmp	.+6      	; 0x2e4a <vfprintf+0x176>
    2e44:	6f ef       	ldi	r22, 0xFF	; 255
    2e46:	7f ef       	ldi	r23, 0xFF	; 255
    2e48:	02 c0       	rjmp	.+4      	; 0x2e4e <vfprintf+0x17a>
    2e4a:	69 2d       	mov	r22, r9
    2e4c:	70 e0       	ldi	r23, 0x00	; 0
    2e4e:	42 e0       	ldi	r20, 0x02	; 2
    2e50:	50 e0       	ldi	r21, 0x00	; 0
    2e52:	a4 0e       	add	r10, r20
    2e54:	b5 1e       	adc	r11, r21
    2e56:	c6 01       	movw	r24, r12
    2e58:	0e 94 81 1a 	call	0x3502	; 0x3502 <strnlen_P>
    2e5c:	8c 01       	movw	r16, r24
    2e5e:	50 e8       	ldi	r21, 0x80	; 128
    2e60:	f5 2a       	or	r15, r21
    2e62:	f3 fe       	sbrs	r15, 3
    2e64:	07 c0       	rjmp	.+14     	; 0x2e74 <vfprintf+0x1a0>
    2e66:	1a c0       	rjmp	.+52     	; 0x2e9c <vfprintf+0x1c8>
    2e68:	80 e2       	ldi	r24, 0x20	; 32
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	b3 01       	movw	r22, r6
    2e6e:	0e 94 97 1a 	call	0x352e	; 0x352e <fputc>
    2e72:	ea 94       	dec	r14
    2e74:	8e 2d       	mov	r24, r14
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	08 17       	cp	r16, r24
    2e7a:	19 07       	cpc	r17, r25
    2e7c:	a8 f3       	brcs	.-22     	; 0x2e68 <vfprintf+0x194>
    2e7e:	0e c0       	rjmp	.+28     	; 0x2e9c <vfprintf+0x1c8>
    2e80:	f6 01       	movw	r30, r12
    2e82:	f7 fc       	sbrc	r15, 7
    2e84:	85 91       	lpm	r24, Z+
    2e86:	f7 fe       	sbrs	r15, 7
    2e88:	81 91       	ld	r24, Z+
    2e8a:	6f 01       	movw	r12, r30
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	b3 01       	movw	r22, r6
    2e90:	0e 94 97 1a 	call	0x352e	; 0x352e <fputc>
    2e94:	e1 10       	cpse	r14, r1
    2e96:	ea 94       	dec	r14
    2e98:	01 50       	subi	r16, 0x01	; 1
    2e9a:	10 40       	sbci	r17, 0x00	; 0
    2e9c:	01 15       	cp	r16, r1
    2e9e:	11 05       	cpc	r17, r1
    2ea0:	79 f7       	brne	.-34     	; 0x2e80 <vfprintf+0x1ac>
    2ea2:	ea c0       	rjmp	.+468    	; 0x3078 <vfprintf+0x3a4>
    2ea4:	94 36       	cpi	r25, 0x64	; 100
    2ea6:	11 f0       	breq	.+4      	; 0x2eac <vfprintf+0x1d8>
    2ea8:	99 36       	cpi	r25, 0x69	; 105
    2eaa:	69 f5       	brne	.+90     	; 0x2f06 <vfprintf+0x232>
    2eac:	f7 fe       	sbrs	r15, 7
    2eae:	08 c0       	rjmp	.+16     	; 0x2ec0 <vfprintf+0x1ec>
    2eb0:	f5 01       	movw	r30, r10
    2eb2:	20 81       	ld	r18, Z
    2eb4:	31 81       	ldd	r19, Z+1	; 0x01
    2eb6:	42 81       	ldd	r20, Z+2	; 0x02
    2eb8:	53 81       	ldd	r21, Z+3	; 0x03
    2eba:	84 e0       	ldi	r24, 0x04	; 4
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	0a c0       	rjmp	.+20     	; 0x2ed4 <vfprintf+0x200>
    2ec0:	f5 01       	movw	r30, r10
    2ec2:	80 81       	ld	r24, Z
    2ec4:	91 81       	ldd	r25, Z+1	; 0x01
    2ec6:	9c 01       	movw	r18, r24
    2ec8:	44 27       	eor	r20, r20
    2eca:	37 fd       	sbrc	r19, 7
    2ecc:	40 95       	com	r20
    2ece:	54 2f       	mov	r21, r20
    2ed0:	82 e0       	ldi	r24, 0x02	; 2
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	a8 0e       	add	r10, r24
    2ed6:	b9 1e       	adc	r11, r25
    2ed8:	9f e6       	ldi	r25, 0x6F	; 111
    2eda:	f9 22       	and	r15, r25
    2edc:	57 ff       	sbrs	r21, 7
    2ede:	09 c0       	rjmp	.+18     	; 0x2ef2 <vfprintf+0x21e>
    2ee0:	50 95       	com	r21
    2ee2:	40 95       	com	r20
    2ee4:	30 95       	com	r19
    2ee6:	21 95       	neg	r18
    2ee8:	3f 4f       	sbci	r19, 0xFF	; 255
    2eea:	4f 4f       	sbci	r20, 0xFF	; 255
    2eec:	5f 4f       	sbci	r21, 0xFF	; 255
    2eee:	e0 e8       	ldi	r30, 0x80	; 128
    2ef0:	fe 2a       	or	r15, r30
    2ef2:	ca 01       	movw	r24, r20
    2ef4:	b9 01       	movw	r22, r18
    2ef6:	a1 01       	movw	r20, r2
    2ef8:	2a e0       	ldi	r18, 0x0A	; 10
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__ultoa_invert>
    2f00:	d8 2e       	mov	r13, r24
    2f02:	d2 18       	sub	r13, r2
    2f04:	40 c0       	rjmp	.+128    	; 0x2f86 <vfprintf+0x2b2>
    2f06:	95 37       	cpi	r25, 0x75	; 117
    2f08:	29 f4       	brne	.+10     	; 0x2f14 <vfprintf+0x240>
    2f0a:	1f 2d       	mov	r17, r15
    2f0c:	1f 7e       	andi	r17, 0xEF	; 239
    2f0e:	2a e0       	ldi	r18, 0x0A	; 10
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	1d c0       	rjmp	.+58     	; 0x2f4e <vfprintf+0x27a>
    2f14:	1f 2d       	mov	r17, r15
    2f16:	19 7f       	andi	r17, 0xF9	; 249
    2f18:	9f 36       	cpi	r25, 0x6F	; 111
    2f1a:	61 f0       	breq	.+24     	; 0x2f34 <vfprintf+0x260>
    2f1c:	90 37       	cpi	r25, 0x70	; 112
    2f1e:	20 f4       	brcc	.+8      	; 0x2f28 <vfprintf+0x254>
    2f20:	98 35       	cpi	r25, 0x58	; 88
    2f22:	09 f0       	breq	.+2      	; 0x2f26 <vfprintf+0x252>
    2f24:	ac c0       	rjmp	.+344    	; 0x307e <vfprintf+0x3aa>
    2f26:	0f c0       	rjmp	.+30     	; 0x2f46 <vfprintf+0x272>
    2f28:	90 37       	cpi	r25, 0x70	; 112
    2f2a:	39 f0       	breq	.+14     	; 0x2f3a <vfprintf+0x266>
    2f2c:	98 37       	cpi	r25, 0x78	; 120
    2f2e:	09 f0       	breq	.+2      	; 0x2f32 <vfprintf+0x25e>
    2f30:	a6 c0       	rjmp	.+332    	; 0x307e <vfprintf+0x3aa>
    2f32:	04 c0       	rjmp	.+8      	; 0x2f3c <vfprintf+0x268>
    2f34:	28 e0       	ldi	r18, 0x08	; 8
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	0a c0       	rjmp	.+20     	; 0x2f4e <vfprintf+0x27a>
    2f3a:	10 61       	ori	r17, 0x10	; 16
    2f3c:	14 fd       	sbrc	r17, 4
    2f3e:	14 60       	ori	r17, 0x04	; 4
    2f40:	20 e1       	ldi	r18, 0x10	; 16
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	04 c0       	rjmp	.+8      	; 0x2f4e <vfprintf+0x27a>
    2f46:	14 fd       	sbrc	r17, 4
    2f48:	16 60       	ori	r17, 0x06	; 6
    2f4a:	20 e1       	ldi	r18, 0x10	; 16
    2f4c:	32 e0       	ldi	r19, 0x02	; 2
    2f4e:	17 ff       	sbrs	r17, 7
    2f50:	08 c0       	rjmp	.+16     	; 0x2f62 <vfprintf+0x28e>
    2f52:	f5 01       	movw	r30, r10
    2f54:	60 81       	ld	r22, Z
    2f56:	71 81       	ldd	r23, Z+1	; 0x01
    2f58:	82 81       	ldd	r24, Z+2	; 0x02
    2f5a:	93 81       	ldd	r25, Z+3	; 0x03
    2f5c:	44 e0       	ldi	r20, 0x04	; 4
    2f5e:	50 e0       	ldi	r21, 0x00	; 0
    2f60:	08 c0       	rjmp	.+16     	; 0x2f72 <vfprintf+0x29e>
    2f62:	f5 01       	movw	r30, r10
    2f64:	80 81       	ld	r24, Z
    2f66:	91 81       	ldd	r25, Z+1	; 0x01
    2f68:	bc 01       	movw	r22, r24
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	42 e0       	ldi	r20, 0x02	; 2
    2f70:	50 e0       	ldi	r21, 0x00	; 0
    2f72:	a4 0e       	add	r10, r20
    2f74:	b5 1e       	adc	r11, r21
    2f76:	a1 01       	movw	r20, r2
    2f78:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__ultoa_invert>
    2f7c:	d8 2e       	mov	r13, r24
    2f7e:	d2 18       	sub	r13, r2
    2f80:	8f e7       	ldi	r24, 0x7F	; 127
    2f82:	f8 2e       	mov	r15, r24
    2f84:	f1 22       	and	r15, r17
    2f86:	f6 fe       	sbrs	r15, 6
    2f88:	0b c0       	rjmp	.+22     	; 0x2fa0 <vfprintf+0x2cc>
    2f8a:	5e ef       	ldi	r21, 0xFE	; 254
    2f8c:	f5 22       	and	r15, r21
    2f8e:	d9 14       	cp	r13, r9
    2f90:	38 f4       	brcc	.+14     	; 0x2fa0 <vfprintf+0x2cc>
    2f92:	f4 fe       	sbrs	r15, 4
    2f94:	07 c0       	rjmp	.+14     	; 0x2fa4 <vfprintf+0x2d0>
    2f96:	f2 fc       	sbrc	r15, 2
    2f98:	05 c0       	rjmp	.+10     	; 0x2fa4 <vfprintf+0x2d0>
    2f9a:	8f ee       	ldi	r24, 0xEF	; 239
    2f9c:	f8 22       	and	r15, r24
    2f9e:	02 c0       	rjmp	.+4      	; 0x2fa4 <vfprintf+0x2d0>
    2fa0:	1d 2d       	mov	r17, r13
    2fa2:	01 c0       	rjmp	.+2      	; 0x2fa6 <vfprintf+0x2d2>
    2fa4:	19 2d       	mov	r17, r9
    2fa6:	f4 fe       	sbrs	r15, 4
    2fa8:	0d c0       	rjmp	.+26     	; 0x2fc4 <vfprintf+0x2f0>
    2faa:	fe 01       	movw	r30, r28
    2fac:	ed 0d       	add	r30, r13
    2fae:	f1 1d       	adc	r31, r1
    2fb0:	80 81       	ld	r24, Z
    2fb2:	80 33       	cpi	r24, 0x30	; 48
    2fb4:	19 f4       	brne	.+6      	; 0x2fbc <vfprintf+0x2e8>
    2fb6:	99 ee       	ldi	r25, 0xE9	; 233
    2fb8:	f9 22       	and	r15, r25
    2fba:	08 c0       	rjmp	.+16     	; 0x2fcc <vfprintf+0x2f8>
    2fbc:	1f 5f       	subi	r17, 0xFF	; 255
    2fbe:	f2 fe       	sbrs	r15, 2
    2fc0:	05 c0       	rjmp	.+10     	; 0x2fcc <vfprintf+0x2f8>
    2fc2:	03 c0       	rjmp	.+6      	; 0x2fca <vfprintf+0x2f6>
    2fc4:	8f 2d       	mov	r24, r15
    2fc6:	86 78       	andi	r24, 0x86	; 134
    2fc8:	09 f0       	breq	.+2      	; 0x2fcc <vfprintf+0x2f8>
    2fca:	1f 5f       	subi	r17, 0xFF	; 255
    2fcc:	0f 2d       	mov	r16, r15
    2fce:	f3 fc       	sbrc	r15, 3
    2fd0:	14 c0       	rjmp	.+40     	; 0x2ffa <vfprintf+0x326>
    2fd2:	f0 fe       	sbrs	r15, 0
    2fd4:	0f c0       	rjmp	.+30     	; 0x2ff4 <vfprintf+0x320>
    2fd6:	1e 15       	cp	r17, r14
    2fd8:	10 f0       	brcs	.+4      	; 0x2fde <vfprintf+0x30a>
    2fda:	9d 2c       	mov	r9, r13
    2fdc:	0b c0       	rjmp	.+22     	; 0x2ff4 <vfprintf+0x320>
    2fde:	9d 2c       	mov	r9, r13
    2fe0:	9e 0c       	add	r9, r14
    2fe2:	91 1a       	sub	r9, r17
    2fe4:	1e 2d       	mov	r17, r14
    2fe6:	06 c0       	rjmp	.+12     	; 0x2ff4 <vfprintf+0x320>
    2fe8:	80 e2       	ldi	r24, 0x20	; 32
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	b3 01       	movw	r22, r6
    2fee:	0e 94 97 1a 	call	0x352e	; 0x352e <fputc>
    2ff2:	1f 5f       	subi	r17, 0xFF	; 255
    2ff4:	1e 15       	cp	r17, r14
    2ff6:	c0 f3       	brcs	.-16     	; 0x2fe8 <vfprintf+0x314>
    2ff8:	04 c0       	rjmp	.+8      	; 0x3002 <vfprintf+0x32e>
    2ffa:	1e 15       	cp	r17, r14
    2ffc:	10 f4       	brcc	.+4      	; 0x3002 <vfprintf+0x32e>
    2ffe:	e1 1a       	sub	r14, r17
    3000:	01 c0       	rjmp	.+2      	; 0x3004 <vfprintf+0x330>
    3002:	ee 24       	eor	r14, r14
    3004:	04 ff       	sbrs	r16, 4
    3006:	0f c0       	rjmp	.+30     	; 0x3026 <vfprintf+0x352>
    3008:	80 e3       	ldi	r24, 0x30	; 48
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	b3 01       	movw	r22, r6
    300e:	0e 94 97 1a 	call	0x352e	; 0x352e <fputc>
    3012:	02 ff       	sbrs	r16, 2
    3014:	1d c0       	rjmp	.+58     	; 0x3050 <vfprintf+0x37c>
    3016:	01 fd       	sbrc	r16, 1
    3018:	03 c0       	rjmp	.+6      	; 0x3020 <vfprintf+0x34c>
    301a:	88 e7       	ldi	r24, 0x78	; 120
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	0e c0       	rjmp	.+28     	; 0x303c <vfprintf+0x368>
    3020:	88 e5       	ldi	r24, 0x58	; 88
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	0b c0       	rjmp	.+22     	; 0x303c <vfprintf+0x368>
    3026:	80 2f       	mov	r24, r16
    3028:	86 78       	andi	r24, 0x86	; 134
    302a:	91 f0       	breq	.+36     	; 0x3050 <vfprintf+0x37c>
    302c:	01 ff       	sbrs	r16, 1
    302e:	02 c0       	rjmp	.+4      	; 0x3034 <vfprintf+0x360>
    3030:	8b e2       	ldi	r24, 0x2B	; 43
    3032:	01 c0       	rjmp	.+2      	; 0x3036 <vfprintf+0x362>
    3034:	80 e2       	ldi	r24, 0x20	; 32
    3036:	f7 fc       	sbrc	r15, 7
    3038:	8d e2       	ldi	r24, 0x2D	; 45
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	b3 01       	movw	r22, r6
    303e:	0e 94 97 1a 	call	0x352e	; 0x352e <fputc>
    3042:	06 c0       	rjmp	.+12     	; 0x3050 <vfprintf+0x37c>
    3044:	80 e3       	ldi	r24, 0x30	; 48
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	b3 01       	movw	r22, r6
    304a:	0e 94 97 1a 	call	0x352e	; 0x352e <fputc>
    304e:	9a 94       	dec	r9
    3050:	d9 14       	cp	r13, r9
    3052:	c0 f3       	brcs	.-16     	; 0x3044 <vfprintf+0x370>
    3054:	da 94       	dec	r13
    3056:	f1 01       	movw	r30, r2
    3058:	ed 0d       	add	r30, r13
    305a:	f1 1d       	adc	r31, r1
    305c:	80 81       	ld	r24, Z
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	b3 01       	movw	r22, r6
    3062:	0e 94 97 1a 	call	0x352e	; 0x352e <fputc>
    3066:	dd 20       	and	r13, r13
    3068:	a9 f7       	brne	.-22     	; 0x3054 <vfprintf+0x380>
    306a:	06 c0       	rjmp	.+12     	; 0x3078 <vfprintf+0x3a4>
    306c:	80 e2       	ldi	r24, 0x20	; 32
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	b3 01       	movw	r22, r6
    3072:	0e 94 97 1a 	call	0x352e	; 0x352e <fputc>
    3076:	ea 94       	dec	r14
    3078:	ee 20       	and	r14, r14
    307a:	c1 f7       	brne	.-16     	; 0x306c <vfprintf+0x398>
    307c:	43 ce       	rjmp	.-890    	; 0x2d04 <vfprintf+0x30>
    307e:	f3 01       	movw	r30, r6
    3080:	66 81       	ldd	r22, Z+6	; 0x06
    3082:	77 81       	ldd	r23, Z+7	; 0x07
    3084:	cb 01       	movw	r24, r22
    3086:	2b 96       	adiw	r28, 0x0b	; 11
    3088:	e2 e1       	ldi	r30, 0x12	; 18
    308a:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__epilogue_restores__>

0000308e <dtoa_prf>:
    308e:	a9 e0       	ldi	r26, 0x09	; 9
    3090:	b0 e0       	ldi	r27, 0x00	; 0
    3092:	ed e4       	ldi	r30, 0x4D	; 77
    3094:	f8 e1       	ldi	r31, 0x18	; 24
    3096:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__prologue_saves__+0x8>
    309a:	6a 01       	movw	r12, r20
    309c:	12 2f       	mov	r17, r18
    309e:	a0 2e       	mov	r10, r16
    30a0:	be 2c       	mov	r11, r14
    30a2:	2b e3       	ldi	r18, 0x3B	; 59
    30a4:	20 17       	cp	r18, r16
    30a6:	18 f4       	brcc	.+6      	; 0x30ae <dtoa_prf+0x20>
    30a8:	2c e3       	ldi	r18, 0x3C	; 60
    30aa:	92 2e       	mov	r9, r18
    30ac:	02 c0       	rjmp	.+4      	; 0x30b2 <dtoa_prf+0x24>
    30ae:	90 2e       	mov	r9, r16
    30b0:	93 94       	inc	r9
    30b2:	ae 01       	movw	r20, r28
    30b4:	4f 5f       	subi	r20, 0xFF	; 255
    30b6:	5f 4f       	sbci	r21, 0xFF	; 255
    30b8:	27 e0       	ldi	r18, 0x07	; 7
    30ba:	09 2d       	mov	r16, r9
    30bc:	0e 94 a9 19 	call	0x3352	; 0x3352 <__ftoa_engine>
    30c0:	bc 01       	movw	r22, r24
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	e8 2e       	mov	r14, r24
    30c6:	ff 24       	eor	r15, r15
    30c8:	c7 01       	movw	r24, r14
    30ca:	89 70       	andi	r24, 0x09	; 9
    30cc:	90 70       	andi	r25, 0x00	; 0
    30ce:	01 97       	sbiw	r24, 0x01	; 1
    30d0:	11 f4       	brne	.+4      	; 0x30d6 <dtoa_prf+0x48>
    30d2:	ad e2       	ldi	r26, 0x2D	; 45
    30d4:	09 c0       	rjmp	.+18     	; 0x30e8 <dtoa_prf+0x5a>
    30d6:	b1 fe       	sbrs	r11, 1
    30d8:	02 c0       	rjmp	.+4      	; 0x30de <dtoa_prf+0x50>
    30da:	ab e2       	ldi	r26, 0x2B	; 43
    30dc:	05 c0       	rjmp	.+10     	; 0x30e8 <dtoa_prf+0x5a>
    30de:	b0 fc       	sbrc	r11, 0
    30e0:	02 c0       	rjmp	.+4      	; 0x30e6 <dtoa_prf+0x58>
    30e2:	a0 e0       	ldi	r26, 0x00	; 0
    30e4:	01 c0       	rjmp	.+2      	; 0x30e8 <dtoa_prf+0x5a>
    30e6:	a0 e2       	ldi	r26, 0x20	; 32
    30e8:	e3 fe       	sbrs	r14, 3
    30ea:	3b c0       	rjmp	.+118    	; 0x3162 <dtoa_prf+0xd4>
    30ec:	aa 23       	and	r26, r26
    30ee:	11 f4       	brne	.+4      	; 0x30f4 <dtoa_prf+0x66>
    30f0:	23 e0       	ldi	r18, 0x03	; 3
    30f2:	01 c0       	rjmp	.+2      	; 0x30f6 <dtoa_prf+0x68>
    30f4:	24 e0       	ldi	r18, 0x04	; 4
    30f6:	21 17       	cp	r18, r17
    30f8:	10 f0       	brcs	.+4      	; 0x30fe <dtoa_prf+0x70>
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	02 c0       	rjmp	.+4      	; 0x3102 <dtoa_prf+0x74>
    30fe:	12 1b       	sub	r17, r18
    3100:	21 2f       	mov	r18, r17
    3102:	eb 2c       	mov	r14, r11
    3104:	b4 fe       	sbrs	r11, 4
    3106:	02 c0       	rjmp	.+4      	; 0x310c <dtoa_prf+0x7e>
    3108:	32 2f       	mov	r19, r18
    310a:	0a c0       	rjmp	.+20     	; 0x3120 <dtoa_prf+0x92>
    310c:	f6 01       	movw	r30, r12
    310e:	32 2f       	mov	r19, r18
    3110:	80 e2       	ldi	r24, 0x20	; 32
    3112:	02 c0       	rjmp	.+4      	; 0x3118 <dtoa_prf+0x8a>
    3114:	81 93       	st	Z+, r24
    3116:	31 50       	subi	r19, 0x01	; 1
    3118:	33 23       	and	r19, r19
    311a:	e1 f7       	brne	.-8      	; 0x3114 <dtoa_prf+0x86>
    311c:	c2 0e       	add	r12, r18
    311e:	d1 1c       	adc	r13, r1
    3120:	aa 23       	and	r26, r26
    3122:	19 f0       	breq	.+6      	; 0x312a <dtoa_prf+0x9c>
    3124:	f6 01       	movw	r30, r12
    3126:	a1 93       	st	Z+, r26
    3128:	6f 01       	movw	r12, r30
    312a:	f6 01       	movw	r30, r12
    312c:	31 96       	adiw	r30, 0x01	; 1
    312e:	e2 fe       	sbrs	r14, 2
    3130:	05 c0       	rjmp	.+10     	; 0x313c <dtoa_prf+0xae>
    3132:	9e e4       	ldi	r25, 0x4E	; 78
    3134:	d6 01       	movw	r26, r12
    3136:	9c 93       	st	X, r25
    3138:	81 e4       	ldi	r24, 0x41	; 65
    313a:	04 c0       	rjmp	.+8      	; 0x3144 <dtoa_prf+0xb6>
    313c:	9e e6       	ldi	r25, 0x6E	; 110
    313e:	d6 01       	movw	r26, r12
    3140:	9c 93       	st	X, r25
    3142:	81 e6       	ldi	r24, 0x61	; 97
    3144:	11 96       	adiw	r26, 0x01	; 1
    3146:	8c 93       	st	X, r24
    3148:	91 83       	std	Z+1, r25	; 0x01
    314a:	32 96       	adiw	r30, 0x02	; 2
    314c:	df 01       	movw	r26, r30
    314e:	83 2f       	mov	r24, r19
    3150:	90 e2       	ldi	r25, 0x20	; 32
    3152:	02 c0       	rjmp	.+4      	; 0x3158 <dtoa_prf+0xca>
    3154:	9d 93       	st	X+, r25
    3156:	81 50       	subi	r24, 0x01	; 1
    3158:	88 23       	and	r24, r24
    315a:	e1 f7       	brne	.-8      	; 0x3154 <dtoa_prf+0xc6>
    315c:	e3 0f       	add	r30, r19
    315e:	f1 1d       	adc	r31, r1
    3160:	40 c0       	rjmp	.+128    	; 0x31e2 <dtoa_prf+0x154>
    3162:	e2 fe       	sbrs	r14, 2
    3164:	42 c0       	rjmp	.+132    	; 0x31ea <dtoa_prf+0x15c>
    3166:	aa 23       	and	r26, r26
    3168:	11 f4       	brne	.+4      	; 0x316e <dtoa_prf+0xe0>
    316a:	23 e0       	ldi	r18, 0x03	; 3
    316c:	01 c0       	rjmp	.+2      	; 0x3170 <dtoa_prf+0xe2>
    316e:	24 e0       	ldi	r18, 0x04	; 4
    3170:	21 17       	cp	r18, r17
    3172:	10 f0       	brcs	.+4      	; 0x3178 <dtoa_prf+0xea>
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	02 c0       	rjmp	.+4      	; 0x317c <dtoa_prf+0xee>
    3178:	12 1b       	sub	r17, r18
    317a:	21 2f       	mov	r18, r17
    317c:	eb 2c       	mov	r14, r11
    317e:	b4 fe       	sbrs	r11, 4
    3180:	02 c0       	rjmp	.+4      	; 0x3186 <dtoa_prf+0xf8>
    3182:	92 2f       	mov	r25, r18
    3184:	0a c0       	rjmp	.+20     	; 0x319a <dtoa_prf+0x10c>
    3186:	f6 01       	movw	r30, r12
    3188:	92 2f       	mov	r25, r18
    318a:	80 e2       	ldi	r24, 0x20	; 32
    318c:	02 c0       	rjmp	.+4      	; 0x3192 <dtoa_prf+0x104>
    318e:	81 93       	st	Z+, r24
    3190:	91 50       	subi	r25, 0x01	; 1
    3192:	99 23       	and	r25, r25
    3194:	e1 f7       	brne	.-8      	; 0x318e <dtoa_prf+0x100>
    3196:	c2 0e       	add	r12, r18
    3198:	d1 1c       	adc	r13, r1
    319a:	aa 23       	and	r26, r26
    319c:	19 f0       	breq	.+6      	; 0x31a4 <dtoa_prf+0x116>
    319e:	f6 01       	movw	r30, r12
    31a0:	a1 93       	st	Z+, r26
    31a2:	6f 01       	movw	r12, r30
    31a4:	f6 01       	movw	r30, r12
    31a6:	31 96       	adiw	r30, 0x01	; 1
    31a8:	e2 fe       	sbrs	r14, 2
    31aa:	08 c0       	rjmp	.+16     	; 0x31bc <dtoa_prf+0x12e>
    31ac:	89 e4       	ldi	r24, 0x49	; 73
    31ae:	d6 01       	movw	r26, r12
    31b0:	8c 93       	st	X, r24
    31b2:	8e e4       	ldi	r24, 0x4E	; 78
    31b4:	11 96       	adiw	r26, 0x01	; 1
    31b6:	8c 93       	st	X, r24
    31b8:	86 e4       	ldi	r24, 0x46	; 70
    31ba:	07 c0       	rjmp	.+14     	; 0x31ca <dtoa_prf+0x13c>
    31bc:	89 e6       	ldi	r24, 0x69	; 105
    31be:	d6 01       	movw	r26, r12
    31c0:	8c 93       	st	X, r24
    31c2:	8e e6       	ldi	r24, 0x6E	; 110
    31c4:	11 96       	adiw	r26, 0x01	; 1
    31c6:	8c 93       	st	X, r24
    31c8:	86 e6       	ldi	r24, 0x66	; 102
    31ca:	81 83       	std	Z+1, r24	; 0x01
    31cc:	32 96       	adiw	r30, 0x02	; 2
    31ce:	df 01       	movw	r26, r30
    31d0:	89 2f       	mov	r24, r25
    31d2:	20 e2       	ldi	r18, 0x20	; 32
    31d4:	02 c0       	rjmp	.+4      	; 0x31da <dtoa_prf+0x14c>
    31d6:	2d 93       	st	X+, r18
    31d8:	81 50       	subi	r24, 0x01	; 1
    31da:	88 23       	and	r24, r24
    31dc:	e1 f7       	brne	.-8      	; 0x31d6 <dtoa_prf+0x148>
    31de:	e9 0f       	add	r30, r25
    31e0:	f1 1d       	adc	r31, r1
    31e2:	10 82       	st	Z, r1
    31e4:	2e ef       	ldi	r18, 0xFE	; 254
    31e6:	3f ef       	ldi	r19, 0xFF	; 255
    31e8:	af c0       	rjmp	.+350    	; 0x3348 <dtoa_prf+0x2ba>
    31ea:	16 16       	cp	r1, r22
    31ec:	17 06       	cpc	r1, r23
    31ee:	1c f0       	brlt	.+6      	; 0x31f6 <dtoa_prf+0x168>
    31f0:	41 e0       	ldi	r20, 0x01	; 1
    31f2:	50 e0       	ldi	r21, 0x00	; 0
    31f4:	03 c0       	rjmp	.+6      	; 0x31fc <dtoa_prf+0x16e>
    31f6:	ab 01       	movw	r20, r22
    31f8:	4f 5f       	subi	r20, 0xFF	; 255
    31fa:	5f 4f       	sbci	r21, 0xFF	; 255
    31fc:	aa 20       	and	r10, r10
    31fe:	19 f4       	brne	.+6      	; 0x3206 <dtoa_prf+0x178>
    3200:	80 e0       	ldi	r24, 0x00	; 0
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	03 c0       	rjmp	.+6      	; 0x320c <dtoa_prf+0x17e>
    3206:	8a 2d       	mov	r24, r10
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	01 96       	adiw	r24, 0x01	; 1
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	aa 23       	and	r26, r26
    3212:	11 f0       	breq	.+4      	; 0x3218 <dtoa_prf+0x18a>
    3214:	21 e0       	ldi	r18, 0x01	; 1
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	24 0f       	add	r18, r20
    321a:	35 1f       	adc	r19, r21
    321c:	28 0f       	add	r18, r24
    321e:	39 1f       	adc	r19, r25
    3220:	81 2f       	mov	r24, r17
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	28 17       	cp	r18, r24
    3226:	39 07       	cpc	r19, r25
    3228:	14 f0       	brlt	.+4      	; 0x322e <dtoa_prf+0x1a0>
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	02 c0       	rjmp	.+4      	; 0x3232 <dtoa_prf+0x1a4>
    322e:	12 1b       	sub	r17, r18
    3230:	21 2f       	mov	r18, r17
    3232:	4b 2d       	mov	r20, r11
    3234:	50 e0       	ldi	r21, 0x00	; 0
    3236:	ca 01       	movw	r24, r20
    3238:	80 71       	andi	r24, 0x10	; 16
    323a:	90 70       	andi	r25, 0x00	; 0
    323c:	b4 fc       	sbrc	r11, 4
    323e:	0d c0       	rjmp	.+26     	; 0x325a <dtoa_prf+0x1cc>
    3240:	b3 fc       	sbrc	r11, 3
    3242:	0b c0       	rjmp	.+22     	; 0x325a <dtoa_prf+0x1cc>
    3244:	f6 01       	movw	r30, r12
    3246:	32 2f       	mov	r19, r18
    3248:	40 e2       	ldi	r20, 0x20	; 32
    324a:	02 c0       	rjmp	.+4      	; 0x3250 <dtoa_prf+0x1c2>
    324c:	41 93       	st	Z+, r20
    324e:	31 50       	subi	r19, 0x01	; 1
    3250:	33 23       	and	r19, r19
    3252:	e1 f7       	brne	.-8      	; 0x324c <dtoa_prf+0x1be>
    3254:	c2 0e       	add	r12, r18
    3256:	d1 1c       	adc	r13, r1
    3258:	01 c0       	rjmp	.+2      	; 0x325c <dtoa_prf+0x1ce>
    325a:	32 2f       	mov	r19, r18
    325c:	aa 23       	and	r26, r26
    325e:	19 f0       	breq	.+6      	; 0x3266 <dtoa_prf+0x1d8>
    3260:	f6 01       	movw	r30, r12
    3262:	a1 93       	st	Z+, r26
    3264:	6f 01       	movw	r12, r30
    3266:	89 2b       	or	r24, r25
    3268:	11 f0       	breq	.+4      	; 0x326e <dtoa_prf+0x1e0>
    326a:	13 2f       	mov	r17, r19
    326c:	0a c0       	rjmp	.+20     	; 0x3282 <dtoa_prf+0x1f4>
    326e:	f6 01       	movw	r30, r12
    3270:	13 2f       	mov	r17, r19
    3272:	80 e3       	ldi	r24, 0x30	; 48
    3274:	02 c0       	rjmp	.+4      	; 0x327a <dtoa_prf+0x1ec>
    3276:	81 93       	st	Z+, r24
    3278:	11 50       	subi	r17, 0x01	; 1
    327a:	11 23       	and	r17, r17
    327c:	e1 f7       	brne	.-8      	; 0x3276 <dtoa_prf+0x1e8>
    327e:	c3 0e       	add	r12, r19
    3280:	d1 1c       	adc	r13, r1
    3282:	09 2d       	mov	r16, r9
    3284:	06 0f       	add	r16, r22
    3286:	ba 80       	ldd	r11, Y+2	; 0x02
    3288:	90 e1       	ldi	r25, 0x10	; 16
    328a:	89 2e       	mov	r8, r25
    328c:	91 2c       	mov	r9, r1
    328e:	8e 20       	and	r8, r14
    3290:	9f 20       	and	r9, r15
    3292:	e4 fe       	sbrs	r14, 4
    3294:	04 c0       	rjmp	.+8      	; 0x329e <dtoa_prf+0x210>
    3296:	f1 e3       	ldi	r31, 0x31	; 49
    3298:	bf 16       	cp	r11, r31
    329a:	09 f4       	brne	.+2      	; 0x329e <dtoa_prf+0x210>
    329c:	01 50       	subi	r16, 0x01	; 1
    329e:	10 16       	cp	r1, r16
    32a0:	14 f0       	brlt	.+4      	; 0x32a6 <dtoa_prf+0x218>
    32a2:	01 e0       	ldi	r16, 0x01	; 1
    32a4:	03 c0       	rjmp	.+6      	; 0x32ac <dtoa_prf+0x21e>
    32a6:	09 30       	cpi	r16, 0x09	; 9
    32a8:	08 f0       	brcs	.+2      	; 0x32ac <dtoa_prf+0x21e>
    32aa:	08 e0       	ldi	r16, 0x08	; 8
    32ac:	9b 01       	movw	r18, r22
    32ae:	77 ff       	sbrs	r23, 7
    32b0:	02 c0       	rjmp	.+4      	; 0x32b6 <dtoa_prf+0x228>
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	cb 01       	movw	r24, r22
    32b8:	01 96       	adiw	r24, 0x01	; 1
    32ba:	82 1b       	sub	r24, r18
    32bc:	93 0b       	sbc	r25, r19
    32be:	fe 01       	movw	r30, r28
    32c0:	31 96       	adiw	r30, 0x01	; 1
    32c2:	e8 0f       	add	r30, r24
    32c4:	f9 1f       	adc	r31, r25
    32c6:	8e e2       	ldi	r24, 0x2E	; 46
    32c8:	f8 2e       	mov	r15, r24
    32ca:	3b 01       	movw	r6, r22
    32cc:	60 1a       	sub	r6, r16
    32ce:	71 08       	sbc	r7, r1
    32d0:	8a 2d       	mov	r24, r10
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	44 27       	eor	r20, r20
    32d6:	55 27       	eor	r21, r21
    32d8:	48 1b       	sub	r20, r24
    32da:	59 0b       	sbc	r21, r25
    32dc:	8f ef       	ldi	r24, 0xFF	; 255
    32de:	2f 3f       	cpi	r18, 0xFF	; 255
    32e0:	38 07       	cpc	r19, r24
    32e2:	19 f4       	brne	.+6      	; 0x32ea <dtoa_prf+0x25c>
    32e4:	d6 01       	movw	r26, r12
    32e6:	fd 92       	st	X+, r15
    32e8:	6d 01       	movw	r12, r26
    32ea:	62 17       	cp	r22, r18
    32ec:	73 07       	cpc	r23, r19
    32ee:	2c f0       	brlt	.+10     	; 0x32fa <dtoa_prf+0x26c>
    32f0:	62 16       	cp	r6, r18
    32f2:	73 06       	cpc	r7, r19
    32f4:	14 f4       	brge	.+4      	; 0x32fa <dtoa_prf+0x26c>
    32f6:	80 81       	ld	r24, Z
    32f8:	01 c0       	rjmp	.+2      	; 0x32fc <dtoa_prf+0x26e>
    32fa:	80 e3       	ldi	r24, 0x30	; 48
    32fc:	21 50       	subi	r18, 0x01	; 1
    32fe:	30 40       	sbci	r19, 0x00	; 0
    3300:	31 96       	adiw	r30, 0x01	; 1
    3302:	24 17       	cp	r18, r20
    3304:	35 07       	cpc	r19, r21
    3306:	24 f0       	brlt	.+8      	; 0x3310 <dtoa_prf+0x282>
    3308:	d6 01       	movw	r26, r12
    330a:	8d 93       	st	X+, r24
    330c:	6d 01       	movw	r12, r26
    330e:	e6 cf       	rjmp	.-52     	; 0x32dc <dtoa_prf+0x24e>
    3310:	26 17       	cp	r18, r22
    3312:	37 07       	cpc	r19, r23
    3314:	49 f4       	brne	.+18     	; 0x3328 <dtoa_prf+0x29a>
    3316:	b5 e3       	ldi	r27, 0x35	; 53
    3318:	bb 15       	cp	r27, r11
    331a:	28 f0       	brcs	.+10     	; 0x3326 <dtoa_prf+0x298>
    331c:	bb 16       	cp	r11, r27
    331e:	21 f4       	brne	.+8      	; 0x3328 <dtoa_prf+0x29a>
    3320:	81 14       	cp	r8, r1
    3322:	91 04       	cpc	r9, r1
    3324:	09 f4       	brne	.+2      	; 0x3328 <dtoa_prf+0x29a>
    3326:	81 e3       	ldi	r24, 0x31	; 49
    3328:	f6 01       	movw	r30, r12
    332a:	81 93       	st	Z+, r24
    332c:	d6 01       	movw	r26, r12
    332e:	81 2f       	mov	r24, r17
    3330:	90 e2       	ldi	r25, 0x20	; 32
    3332:	02 c0       	rjmp	.+4      	; 0x3338 <dtoa_prf+0x2aa>
    3334:	9c 93       	st	X, r25
    3336:	81 50       	subi	r24, 0x01	; 1
    3338:	11 96       	adiw	r26, 0x01	; 1
    333a:	88 23       	and	r24, r24
    333c:	d9 f7       	brne	.-10     	; 0x3334 <dtoa_prf+0x2a6>
    333e:	e1 0f       	add	r30, r17
    3340:	f1 1d       	adc	r31, r1
    3342:	10 82       	st	Z, r1
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	c9 01       	movw	r24, r18
    334a:	29 96       	adiw	r28, 0x09	; 9
    334c:	ee e0       	ldi	r30, 0x0E	; 14
    334e:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__epilogue_restores__+0x8>

00003352 <__ftoa_engine>:
    3352:	28 30       	cpi	r18, 0x08	; 8
    3354:	08 f0       	brcs	.+2      	; 0x3358 <__ftoa_engine+0x6>
    3356:	27 e0       	ldi	r18, 0x07	; 7
    3358:	33 27       	eor	r19, r19
    335a:	da 01       	movw	r26, r20
    335c:	99 0f       	add	r25, r25
    335e:	31 1d       	adc	r19, r1
    3360:	87 fd       	sbrc	r24, 7
    3362:	91 60       	ori	r25, 0x01	; 1
    3364:	00 96       	adiw	r24, 0x00	; 0
    3366:	61 05       	cpc	r22, r1
    3368:	71 05       	cpc	r23, r1
    336a:	39 f4       	brne	.+14     	; 0x337a <__ftoa_engine+0x28>
    336c:	32 60       	ori	r19, 0x02	; 2
    336e:	2e 5f       	subi	r18, 0xFE	; 254
    3370:	3d 93       	st	X+, r19
    3372:	30 e3       	ldi	r19, 0x30	; 48
    3374:	2a 95       	dec	r18
    3376:	e1 f7       	brne	.-8      	; 0x3370 <__ftoa_engine+0x1e>
    3378:	08 95       	ret
    337a:	9f 3f       	cpi	r25, 0xFF	; 255
    337c:	30 f0       	brcs	.+12     	; 0x338a <__ftoa_engine+0x38>
    337e:	80 38       	cpi	r24, 0x80	; 128
    3380:	71 05       	cpc	r23, r1
    3382:	61 05       	cpc	r22, r1
    3384:	09 f0       	breq	.+2      	; 0x3388 <__ftoa_engine+0x36>
    3386:	3c 5f       	subi	r19, 0xFC	; 252
    3388:	3c 5f       	subi	r19, 0xFC	; 252
    338a:	3d 93       	st	X+, r19
    338c:	91 30       	cpi	r25, 0x01	; 1
    338e:	08 f0       	brcs	.+2      	; 0x3392 <__ftoa_engine+0x40>
    3390:	80 68       	ori	r24, 0x80	; 128
    3392:	91 1d       	adc	r25, r1
    3394:	df 93       	push	r29
    3396:	cf 93       	push	r28
    3398:	1f 93       	push	r17
    339a:	0f 93       	push	r16
    339c:	ff 92       	push	r15
    339e:	ef 92       	push	r14
    33a0:	19 2f       	mov	r17, r25
    33a2:	98 7f       	andi	r25, 0xF8	; 248
    33a4:	96 95       	lsr	r25
    33a6:	e9 2f       	mov	r30, r25
    33a8:	96 95       	lsr	r25
    33aa:	96 95       	lsr	r25
    33ac:	e9 0f       	add	r30, r25
    33ae:	ff 27       	eor	r31, r31
    33b0:	e2 55       	subi	r30, 0x52	; 82
    33b2:	ff 4f       	sbci	r31, 0xFF	; 255
    33b4:	99 27       	eor	r25, r25
    33b6:	33 27       	eor	r19, r19
    33b8:	ee 24       	eor	r14, r14
    33ba:	ff 24       	eor	r15, r15
    33bc:	a7 01       	movw	r20, r14
    33be:	e7 01       	movw	r28, r14
    33c0:	05 90       	lpm	r0, Z+
    33c2:	08 94       	sec
    33c4:	07 94       	ror	r0
    33c6:	28 f4       	brcc	.+10     	; 0x33d2 <__ftoa_engine+0x80>
    33c8:	36 0f       	add	r19, r22
    33ca:	e7 1e       	adc	r14, r23
    33cc:	f8 1e       	adc	r15, r24
    33ce:	49 1f       	adc	r20, r25
    33d0:	51 1d       	adc	r21, r1
    33d2:	66 0f       	add	r22, r22
    33d4:	77 1f       	adc	r23, r23
    33d6:	88 1f       	adc	r24, r24
    33d8:	99 1f       	adc	r25, r25
    33da:	06 94       	lsr	r0
    33dc:	a1 f7       	brne	.-24     	; 0x33c6 <__ftoa_engine+0x74>
    33de:	05 90       	lpm	r0, Z+
    33e0:	07 94       	ror	r0
    33e2:	28 f4       	brcc	.+10     	; 0x33ee <__ftoa_engine+0x9c>
    33e4:	e7 0e       	add	r14, r23
    33e6:	f8 1e       	adc	r15, r24
    33e8:	49 1f       	adc	r20, r25
    33ea:	56 1f       	adc	r21, r22
    33ec:	c1 1d       	adc	r28, r1
    33ee:	77 0f       	add	r23, r23
    33f0:	88 1f       	adc	r24, r24
    33f2:	99 1f       	adc	r25, r25
    33f4:	66 1f       	adc	r22, r22
    33f6:	06 94       	lsr	r0
    33f8:	a1 f7       	brne	.-24     	; 0x33e2 <__ftoa_engine+0x90>
    33fa:	05 90       	lpm	r0, Z+
    33fc:	07 94       	ror	r0
    33fe:	28 f4       	brcc	.+10     	; 0x340a <__ftoa_engine+0xb8>
    3400:	f8 0e       	add	r15, r24
    3402:	49 1f       	adc	r20, r25
    3404:	56 1f       	adc	r21, r22
    3406:	c7 1f       	adc	r28, r23
    3408:	d1 1d       	adc	r29, r1
    340a:	88 0f       	add	r24, r24
    340c:	99 1f       	adc	r25, r25
    340e:	66 1f       	adc	r22, r22
    3410:	77 1f       	adc	r23, r23
    3412:	06 94       	lsr	r0
    3414:	a1 f7       	brne	.-24     	; 0x33fe <__ftoa_engine+0xac>
    3416:	05 90       	lpm	r0, Z+
    3418:	07 94       	ror	r0
    341a:	20 f4       	brcc	.+8      	; 0x3424 <__ftoa_engine+0xd2>
    341c:	49 0f       	add	r20, r25
    341e:	56 1f       	adc	r21, r22
    3420:	c7 1f       	adc	r28, r23
    3422:	d8 1f       	adc	r29, r24
    3424:	99 0f       	add	r25, r25
    3426:	66 1f       	adc	r22, r22
    3428:	77 1f       	adc	r23, r23
    342a:	88 1f       	adc	r24, r24
    342c:	06 94       	lsr	r0
    342e:	a9 f7       	brne	.-22     	; 0x341a <__ftoa_engine+0xc8>
    3430:	84 91       	lpm	r24, Z+
    3432:	10 95       	com	r17
    3434:	17 70       	andi	r17, 0x07	; 7
    3436:	41 f0       	breq	.+16     	; 0x3448 <__ftoa_engine+0xf6>
    3438:	d6 95       	lsr	r29
    343a:	c7 95       	ror	r28
    343c:	57 95       	ror	r21
    343e:	47 95       	ror	r20
    3440:	f7 94       	ror	r15
    3442:	e7 94       	ror	r14
    3444:	1a 95       	dec	r17
    3446:	c1 f7       	brne	.-16     	; 0x3438 <__ftoa_engine+0xe6>
    3448:	e4 e5       	ldi	r30, 0x54	; 84
    344a:	f0 e0       	ldi	r31, 0x00	; 0
    344c:	68 94       	set
    344e:	15 90       	lpm	r1, Z+
    3450:	15 91       	lpm	r17, Z+
    3452:	35 91       	lpm	r19, Z+
    3454:	65 91       	lpm	r22, Z+
    3456:	95 91       	lpm	r25, Z+
    3458:	05 90       	lpm	r0, Z+
    345a:	7f e2       	ldi	r23, 0x2F	; 47
    345c:	73 95       	inc	r23
    345e:	e1 18       	sub	r14, r1
    3460:	f1 0a       	sbc	r15, r17
    3462:	43 0b       	sbc	r20, r19
    3464:	56 0b       	sbc	r21, r22
    3466:	c9 0b       	sbc	r28, r25
    3468:	d0 09       	sbc	r29, r0
    346a:	c0 f7       	brcc	.-16     	; 0x345c <__ftoa_engine+0x10a>
    346c:	e1 0c       	add	r14, r1
    346e:	f1 1e       	adc	r15, r17
    3470:	43 1f       	adc	r20, r19
    3472:	56 1f       	adc	r21, r22
    3474:	c9 1f       	adc	r28, r25
    3476:	d0 1d       	adc	r29, r0
    3478:	7e f4       	brtc	.+30     	; 0x3498 <__ftoa_engine+0x146>
    347a:	70 33       	cpi	r23, 0x30	; 48
    347c:	11 f4       	brne	.+4      	; 0x3482 <__ftoa_engine+0x130>
    347e:	8a 95       	dec	r24
    3480:	e6 cf       	rjmp	.-52     	; 0x344e <__ftoa_engine+0xfc>
    3482:	e8 94       	clt
    3484:	01 50       	subi	r16, 0x01	; 1
    3486:	30 f0       	brcs	.+12     	; 0x3494 <__ftoa_engine+0x142>
    3488:	08 0f       	add	r16, r24
    348a:	0a f4       	brpl	.+2      	; 0x348e <__ftoa_engine+0x13c>
    348c:	00 27       	eor	r16, r16
    348e:	02 17       	cp	r16, r18
    3490:	08 f4       	brcc	.+2      	; 0x3494 <__ftoa_engine+0x142>
    3492:	20 2f       	mov	r18, r16
    3494:	23 95       	inc	r18
    3496:	02 2f       	mov	r16, r18
    3498:	7a 33       	cpi	r23, 0x3A	; 58
    349a:	28 f0       	brcs	.+10     	; 0x34a6 <__ftoa_engine+0x154>
    349c:	79 e3       	ldi	r23, 0x39	; 57
    349e:	7d 93       	st	X+, r23
    34a0:	2a 95       	dec	r18
    34a2:	e9 f7       	brne	.-6      	; 0x349e <__ftoa_engine+0x14c>
    34a4:	10 c0       	rjmp	.+32     	; 0x34c6 <__ftoa_engine+0x174>
    34a6:	7d 93       	st	X+, r23
    34a8:	2a 95       	dec	r18
    34aa:	89 f6       	brne	.-94     	; 0x344e <__ftoa_engine+0xfc>
    34ac:	06 94       	lsr	r0
    34ae:	97 95       	ror	r25
    34b0:	67 95       	ror	r22
    34b2:	37 95       	ror	r19
    34b4:	17 95       	ror	r17
    34b6:	17 94       	ror	r1
    34b8:	e1 18       	sub	r14, r1
    34ba:	f1 0a       	sbc	r15, r17
    34bc:	43 0b       	sbc	r20, r19
    34be:	56 0b       	sbc	r21, r22
    34c0:	c9 0b       	sbc	r28, r25
    34c2:	d0 09       	sbc	r29, r0
    34c4:	98 f0       	brcs	.+38     	; 0x34ec <__ftoa_engine+0x19a>
    34c6:	23 95       	inc	r18
    34c8:	7e 91       	ld	r23, -X
    34ca:	73 95       	inc	r23
    34cc:	7a 33       	cpi	r23, 0x3A	; 58
    34ce:	08 f0       	brcs	.+2      	; 0x34d2 <__ftoa_engine+0x180>
    34d0:	70 e3       	ldi	r23, 0x30	; 48
    34d2:	7c 93       	st	X, r23
    34d4:	20 13       	cpse	r18, r16
    34d6:	b8 f7       	brcc	.-18     	; 0x34c6 <__ftoa_engine+0x174>
    34d8:	7e 91       	ld	r23, -X
    34da:	70 61       	ori	r23, 0x10	; 16
    34dc:	7d 93       	st	X+, r23
    34de:	30 f0       	brcs	.+12     	; 0x34ec <__ftoa_engine+0x19a>
    34e0:	83 95       	inc	r24
    34e2:	71 e3       	ldi	r23, 0x31	; 49
    34e4:	7d 93       	st	X+, r23
    34e6:	70 e3       	ldi	r23, 0x30	; 48
    34e8:	2a 95       	dec	r18
    34ea:	e1 f7       	brne	.-8      	; 0x34e4 <__ftoa_engine+0x192>
    34ec:	11 24       	eor	r1, r1
    34ee:	ef 90       	pop	r14
    34f0:	ff 90       	pop	r15
    34f2:	0f 91       	pop	r16
    34f4:	1f 91       	pop	r17
    34f6:	cf 91       	pop	r28
    34f8:	df 91       	pop	r29
    34fa:	99 27       	eor	r25, r25
    34fc:	87 fd       	sbrc	r24, 7
    34fe:	90 95       	com	r25
    3500:	08 95       	ret

00003502 <strnlen_P>:
    3502:	fc 01       	movw	r30, r24
    3504:	05 90       	lpm	r0, Z+
    3506:	61 50       	subi	r22, 0x01	; 1
    3508:	70 40       	sbci	r23, 0x00	; 0
    350a:	01 10       	cpse	r0, r1
    350c:	d8 f7       	brcc	.-10     	; 0x3504 <strnlen_P+0x2>
    350e:	80 95       	com	r24
    3510:	90 95       	com	r25
    3512:	8e 0f       	add	r24, r30
    3514:	9f 1f       	adc	r25, r31
    3516:	08 95       	ret

00003518 <strnlen>:
    3518:	fc 01       	movw	r30, r24
    351a:	61 50       	subi	r22, 0x01	; 1
    351c:	70 40       	sbci	r23, 0x00	; 0
    351e:	01 90       	ld	r0, Z+
    3520:	01 10       	cpse	r0, r1
    3522:	d8 f7       	brcc	.-10     	; 0x351a <strnlen+0x2>
    3524:	80 95       	com	r24
    3526:	90 95       	com	r25
    3528:	8e 0f       	add	r24, r30
    352a:	9f 1f       	adc	r25, r31
    352c:	08 95       	ret

0000352e <fputc>:
    352e:	0f 93       	push	r16
    3530:	1f 93       	push	r17
    3532:	cf 93       	push	r28
    3534:	df 93       	push	r29
    3536:	8c 01       	movw	r16, r24
    3538:	eb 01       	movw	r28, r22
    353a:	8b 81       	ldd	r24, Y+3	; 0x03
    353c:	81 ff       	sbrs	r24, 1
    353e:	1b c0       	rjmp	.+54     	; 0x3576 <fputc+0x48>
    3540:	82 ff       	sbrs	r24, 2
    3542:	0d c0       	rjmp	.+26     	; 0x355e <fputc+0x30>
    3544:	2e 81       	ldd	r18, Y+6	; 0x06
    3546:	3f 81       	ldd	r19, Y+7	; 0x07
    3548:	8c 81       	ldd	r24, Y+4	; 0x04
    354a:	9d 81       	ldd	r25, Y+5	; 0x05
    354c:	28 17       	cp	r18, r24
    354e:	39 07       	cpc	r19, r25
    3550:	64 f4       	brge	.+24     	; 0x356a <fputc+0x3c>
    3552:	e8 81       	ld	r30, Y
    3554:	f9 81       	ldd	r31, Y+1	; 0x01
    3556:	01 93       	st	Z+, r16
    3558:	f9 83       	std	Y+1, r31	; 0x01
    355a:	e8 83       	st	Y, r30
    355c:	06 c0       	rjmp	.+12     	; 0x356a <fputc+0x3c>
    355e:	e8 85       	ldd	r30, Y+8	; 0x08
    3560:	f9 85       	ldd	r31, Y+9	; 0x09
    3562:	80 2f       	mov	r24, r16
    3564:	09 95       	icall
    3566:	89 2b       	or	r24, r25
    3568:	31 f4       	brne	.+12     	; 0x3576 <fputc+0x48>
    356a:	8e 81       	ldd	r24, Y+6	; 0x06
    356c:	9f 81       	ldd	r25, Y+7	; 0x07
    356e:	01 96       	adiw	r24, 0x01	; 1
    3570:	9f 83       	std	Y+7, r25	; 0x07
    3572:	8e 83       	std	Y+6, r24	; 0x06
    3574:	02 c0       	rjmp	.+4      	; 0x357a <fputc+0x4c>
    3576:	0f ef       	ldi	r16, 0xFF	; 255
    3578:	1f ef       	ldi	r17, 0xFF	; 255
    357a:	c8 01       	movw	r24, r16
    357c:	df 91       	pop	r29
    357e:	cf 91       	pop	r28
    3580:	1f 91       	pop	r17
    3582:	0f 91       	pop	r16
    3584:	08 95       	ret

00003586 <__ultoa_invert>:
    3586:	fa 01       	movw	r30, r20
    3588:	aa 27       	eor	r26, r26
    358a:	28 30       	cpi	r18, 0x08	; 8
    358c:	51 f1       	breq	.+84     	; 0x35e2 <__ultoa_invert+0x5c>
    358e:	20 31       	cpi	r18, 0x10	; 16
    3590:	81 f1       	breq	.+96     	; 0x35f2 <__ultoa_invert+0x6c>
    3592:	e8 94       	clt
    3594:	6f 93       	push	r22
    3596:	6e 7f       	andi	r22, 0xFE	; 254
    3598:	6e 5f       	subi	r22, 0xFE	; 254
    359a:	7f 4f       	sbci	r23, 0xFF	; 255
    359c:	8f 4f       	sbci	r24, 0xFF	; 255
    359e:	9f 4f       	sbci	r25, 0xFF	; 255
    35a0:	af 4f       	sbci	r26, 0xFF	; 255
    35a2:	b1 e0       	ldi	r27, 0x01	; 1
    35a4:	3e d0       	rcall	.+124    	; 0x3622 <__ultoa_invert+0x9c>
    35a6:	b4 e0       	ldi	r27, 0x04	; 4
    35a8:	3c d0       	rcall	.+120    	; 0x3622 <__ultoa_invert+0x9c>
    35aa:	67 0f       	add	r22, r23
    35ac:	78 1f       	adc	r23, r24
    35ae:	89 1f       	adc	r24, r25
    35b0:	9a 1f       	adc	r25, r26
    35b2:	a1 1d       	adc	r26, r1
    35b4:	68 0f       	add	r22, r24
    35b6:	79 1f       	adc	r23, r25
    35b8:	8a 1f       	adc	r24, r26
    35ba:	91 1d       	adc	r25, r1
    35bc:	a1 1d       	adc	r26, r1
    35be:	6a 0f       	add	r22, r26
    35c0:	71 1d       	adc	r23, r1
    35c2:	81 1d       	adc	r24, r1
    35c4:	91 1d       	adc	r25, r1
    35c6:	a1 1d       	adc	r26, r1
    35c8:	20 d0       	rcall	.+64     	; 0x360a <__ultoa_invert+0x84>
    35ca:	09 f4       	brne	.+2      	; 0x35ce <__ultoa_invert+0x48>
    35cc:	68 94       	set
    35ce:	3f 91       	pop	r19
    35d0:	2a e0       	ldi	r18, 0x0A	; 10
    35d2:	26 9f       	mul	r18, r22
    35d4:	11 24       	eor	r1, r1
    35d6:	30 19       	sub	r19, r0
    35d8:	30 5d       	subi	r19, 0xD0	; 208
    35da:	31 93       	st	Z+, r19
    35dc:	de f6       	brtc	.-74     	; 0x3594 <__ultoa_invert+0xe>
    35de:	cf 01       	movw	r24, r30
    35e0:	08 95       	ret
    35e2:	46 2f       	mov	r20, r22
    35e4:	47 70       	andi	r20, 0x07	; 7
    35e6:	40 5d       	subi	r20, 0xD0	; 208
    35e8:	41 93       	st	Z+, r20
    35ea:	b3 e0       	ldi	r27, 0x03	; 3
    35ec:	0f d0       	rcall	.+30     	; 0x360c <__ultoa_invert+0x86>
    35ee:	c9 f7       	brne	.-14     	; 0x35e2 <__ultoa_invert+0x5c>
    35f0:	f6 cf       	rjmp	.-20     	; 0x35de <__ultoa_invert+0x58>
    35f2:	46 2f       	mov	r20, r22
    35f4:	4f 70       	andi	r20, 0x0F	; 15
    35f6:	40 5d       	subi	r20, 0xD0	; 208
    35f8:	4a 33       	cpi	r20, 0x3A	; 58
    35fa:	18 f0       	brcs	.+6      	; 0x3602 <__ultoa_invert+0x7c>
    35fc:	49 5d       	subi	r20, 0xD9	; 217
    35fe:	31 fd       	sbrc	r19, 1
    3600:	40 52       	subi	r20, 0x20	; 32
    3602:	41 93       	st	Z+, r20
    3604:	02 d0       	rcall	.+4      	; 0x360a <__ultoa_invert+0x84>
    3606:	a9 f7       	brne	.-22     	; 0x35f2 <__ultoa_invert+0x6c>
    3608:	ea cf       	rjmp	.-44     	; 0x35de <__ultoa_invert+0x58>
    360a:	b4 e0       	ldi	r27, 0x04	; 4
    360c:	a6 95       	lsr	r26
    360e:	97 95       	ror	r25
    3610:	87 95       	ror	r24
    3612:	77 95       	ror	r23
    3614:	67 95       	ror	r22
    3616:	ba 95       	dec	r27
    3618:	c9 f7       	brne	.-14     	; 0x360c <__ultoa_invert+0x86>
    361a:	00 97       	sbiw	r24, 0x00	; 0
    361c:	61 05       	cpc	r22, r1
    361e:	71 05       	cpc	r23, r1
    3620:	08 95       	ret
    3622:	9b 01       	movw	r18, r22
    3624:	ac 01       	movw	r20, r24
    3626:	0a 2e       	mov	r0, r26
    3628:	06 94       	lsr	r0
    362a:	57 95       	ror	r21
    362c:	47 95       	ror	r20
    362e:	37 95       	ror	r19
    3630:	27 95       	ror	r18
    3632:	ba 95       	dec	r27
    3634:	c9 f7       	brne	.-14     	; 0x3628 <__ultoa_invert+0xa2>
    3636:	62 0f       	add	r22, r18
    3638:	73 1f       	adc	r23, r19
    363a:	84 1f       	adc	r24, r20
    363c:	95 1f       	adc	r25, r21
    363e:	a0 1d       	adc	r26, r0
    3640:	08 95       	ret

00003642 <_exit>:
    3642:	f8 94       	cli

00003644 <__stop_program>:
    3644:	ff cf       	rjmp	.-2      	; 0x3644 <__stop_program>
